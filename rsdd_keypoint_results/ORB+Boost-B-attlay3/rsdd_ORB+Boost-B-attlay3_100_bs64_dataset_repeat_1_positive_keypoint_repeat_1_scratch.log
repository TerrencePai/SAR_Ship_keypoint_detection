2023-12-04 21:21:13,093 - INFO - >>>>>=========================Start Train!===========================<<<<<
2023-12-04 21:21:13,093 - INFO - descriptor: ORB+Boost-B-attlay3
2023-12-04 21:21:13,093 - INFO - num_epochs: 40
2023-12-04 21:21:13,093 - INFO - train_ratio: 1.0
2023-12-04 21:21:13,093 - INFO - batch_size: 64
2023-12-04 21:21:13,093 - INFO - num_workers: 4
2023-12-04 21:21:13,093 - INFO - print_interval: 20
2023-12-04 21:21:13,093 - INFO - eval_interval: 1
2023-12-04 21:21:13,093 - INFO - save_interval: 10
2023-12-04 21:21:13,093 - INFO - lr: 0.001
2023-12-04 21:21:13,093 - INFO - warmup_step: 20
2023-12-04 21:21:13,093 - INFO - random_seed: 0
2023-12-04 21:21:13,093 - INFO - expand_piexl: 3
2023-12-04 21:21:13,094 - INFO - test_threshold: 0.5
2023-12-04 21:21:13,094 - INFO - test_image: 
2023-12-04 21:21:13,094 - INFO - test_images: []
2023-12-04 21:21:13,094 - INFO - eval: False
2023-12-04 21:21:13,094 - INFO - save_path: work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth
2023-12-04 21:21:13,094 - INFO - log_file: work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_dataset_repeat_1_positive_keypoint_repeat_1_scratch.log
2023-12-04 21:21:13,094 - INFO - checkpoint: 
2023-12-04 21:21:13,094 - INFO - multiprocessing_context: None
2023-12-04 21:21:13,094 - INFO - data_root: data/rsdd
2023-12-04 21:21:13,094 - INFO - img_suffix: .jpg
2023-12-04 21:21:13,094 - INFO - train_ann_file: ['train/']
2023-12-04 21:21:13,094 - INFO - test_ann_file: ['test/all', 'test/offshore', 'test/inshore']
2023-12-04 21:21:13,094 - INFO - dataset_class: {'ship': 1}
2023-12-04 21:21:13,094 - INFO - dataset_repeat: 1
2023-12-04 21:21:13,094 - INFO - positive_keypoint_repeat: 1
2023-12-04 21:21:13,094 - INFO - image_aug: False
2023-12-04 21:21:13,094 - INFO - print: True
2023-12-04 21:21:13,094 - INFO - feature_booster_pretrained: 
2023-12-04 21:21:13,094 - INFO - device: cuda
2023-12-04 21:21:13,094 - INFO - color: ['#00FF00', '#FF00FF', '#FF4500', '#009900', '#009999', '#ff0000', '#ffff00', '#00ff00', '#00ffff', '#0000ff']
# -*- coding: UTF-8 -*-
import pycolmap # pycolmap 占用的TLS最大,放在最前面 
# 原理参考: https://github.com/pytorch/pytorch/issues/2575#issue-254038499
from extract_features import normalize_keypoints, extractor_build, extract_img_feature
from torch.utils.data import DataLoader, Dataset
from os import path as osp
from pathlib import Path
from torch import nn
import numpy as np
import matplotlib
matplotlib.use('Agg')  # 设置Agg为后端
import matplotlib.pyplot as plt
import importlib
import warnings
import logging
import random
import torch
import copy
import time
import glob
import yaml
import cv2
import os
warnings.filterwarnings('ignore')

def parse_arguments():
    parser = importlib.import_module('argparse').ArgumentParser(description="Extract feature and refine descriptor using neural network to find ship keypoint.")

    parser.add_argument(
        '--descriptor', type=str, default='ORB+Boost-B-attlay3',
        help='descriptor to extract' )

    parser.add_argument(
        '--num_epochs', type=int, default=40,)

    parser.add_argument(
        '--train_ratio', type=float, default=1.0,
        help='The ratio of data used for training out of the training set' )

    parser.add_argument(
        '--batch_size', type=int, default=64,)

    parser.add_argument(
        '--num_workers', type=int, default=4,)

    parser.add_argument(
        '--print_interval', type=int, default=20,)

    parser.add_argument(
        '--eval_interval', type=int, default=1,)

    parser.add_argument(
        '--save_interval', type=int, default=10,)

    parser.add_argument(
        '--lr', type=float, default=1e-3,)

    parser.add_argument(
        '--warmup_step', type=int, default=20,)

    parser.add_argument(
        '--random_seed', type=int, default=0,)

    parser.add_argument(
        '--expand_piexl', type=int, default=3,)

    parser.add_argument(
        '--test_threshold', type=float, default=0.5,)

    parser.add_argument(
        '--test_image', type=str, default='',)
    
    parser.add_argument(
        '--test_images', nargs='*', default=[],)
    
    parser.add_argument(
        '--eval', action='store_true',)

    parser.add_argument(
        '--save_path', type=str, default='',)

    parser.add_argument(
        '--log_file', type=str, default='',)

    parser.add_argument(
        '--checkpoint', type=str, default='',)

    parser.add_argument(
        '--multiprocessing_context', type=str, default=None,)

    parser.add_argument(
        '--data_root', type=str, default='data/rsdd',)

    parser.add_argument(
        '--img_suffix', type=str, default='.jpg',)

    parser.add_argument(
        '--train_ann_file', nargs='*', default=['train/'],)

    parser.add_argument(
        '--test_ann_file', nargs='*', default=['test/all','test/offshore','test/inshore'],)

    parser.add_argument(
        '--dataset_class',
        nargs='*',
        # default=['ore-oil','Cell-Container','Fishing','LawEnforce','Dredger','Container'], # [166, 89 , 288 , 25 , 263 , 2053]
        default=["ship"],
        help='Dataset classes list. Default is ["ship"].'
    )

    parser.add_argument(
        '--dataset_repeat', type=int, default=1,)
    
    parser.add_argument(
        '--positive_keypoint_repeat', type=int, default=1,)

    parser.add_argument(
        '--image_aug', action='store_true',)
    
    parser.add_argument(
        '--print', action='store_true')

    args = parser.parse_args()
    args.dataset_class = {item: index + 1 for index, item in enumerate(args.dataset_class)}    
    return args

def calculate_md5(file_path):

    hash_md5 = importlib.import_module('hashlib').md5()
    with open(file_path, "rb") as f:
        # 以块的方式读取文件，以防文件太大
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

# 定义舰船目标关键点检测模型（示例）
class ShipKeyPointsModel(nn.Module):
    def __init__(self, args,):
        super().__init__()
        FeatureBooster = importlib.import_module('FeatureBooster.featurebooster').FeatureBooster
        MLP = importlib.import_module('FeatureBooster.featurebooster').MLP

        self.device = args.device

        with open(str(Path(__file__).parent / "config.yaml"), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[args.descriptor]
        # Model
        self.feature_booster = FeatureBooster(self.config)
        # load the model
        if os.path.isfile(args.feature_booster_pretrained):
            self.feature_booster.load_state_dict(torch.load(args.feature_booster_pretrained), strict =False)
            args.logger.info(f"feature_booster weights loaded from {args.feature_booster_pretrained}!")
        self.fc_out = MLP([self.config['output_dim'], self.config['output_dim']//2, len(args.dataset_class)+1])
        self.to(args.device)
        self.args = args

    def forward(self, x):
        feat = self.feature_booster(x[...,self.config['keypoint_dim']:], x[...,:self.config['keypoint_dim']])
        x = self.fc_out(feat)
        if self.training:
            return feat, nn.functional.softmax(x, dim=-1)
        else:
            return nn.functional.softmax(x, dim=-1)

def rotate_box_90_degrees(coords):
    x1, y1, x2, y2, x3, y3, x4, y4 = coords

    # 计算中心点
    cx = (x1 + x3) / 2
    cy = (y1 + y3) / 2

    # 将矩形平移到原点，旋转90度，然后平移回去
    rotated_coords = []
    for x, y in [(x1, y1), (x2, y2), (x3, y3), (x4, y4)]:
        x_prime = -y + cy + cx
        y_prime = x - cx + cy
        rotated_coords.extend([x_prime, y_prime])

    return rotated_coords

def load_txt_info_srsdd(txt_file, args):
    data_info = {}
    img_id = osp.split(txt_file)[1][:-4]
    data_info['img_id'] = img_id
    img_name = img_id + f'.{args.img_suffix.lstrip(".")}'
    data_info['file_name'] = img_name

    img_path = txt_file.replace('.txt',f'.{args.img_suffix.lstrip(".")}').replace('labels','images')
    data_info['img_path'] = img_path

    instances = []
    with open(txt_file) as f:
        s = f.readlines()
        for si in s[2:]:
            instance = {}
            bbox_info = si.split()
            instance['bbox_label'] = args.dataset_class[bbox_info[8]] if len(args.dataset_class) > 1 else 1
            instance['ignore_flag'] = 0
            instance['bbox'] = [float(i) for i in bbox_info[:8]]
            instances.append(instance)
    data_info['instances'] = instances
    return data_info

def load_txt_info_rsdd(txt_file, args):
    data_info = {}
    img_id = osp.split(txt_file)[1][:-4]
    data_info['img_id'] = img_id
    img_name = img_id + f'.{args.img_suffix.lstrip(".")}'
    data_info['file_name'] = img_name

    img_path = txt_file.replace('.txt',f'.{args.img_suffix.lstrip(".")}').replace('labels','images')
    data_info['img_path'] = img_path

    instances = []
    with open(txt_file) as f:
        s = f.readlines()
        for si in s:
            instance = {}
            bbox_info = si.split()
            instance['bbox_label'] = args.dataset_class[bbox_info[8]] if len(args.dataset_class) > 1 else 1
            instance['ignore_flag'] = 0
            instance['bbox'] = rotate_box_90_degrees([float(i) for i in bbox_info[2:]]) # 这里标注出的矩形框和真实中间差90度。可能是标注换换的问题。
            #人为旋转90度
            instances.append(instance)
    data_info['instances'] = instances
    return data_info

def load_txt_info_hrsid(txt_file, args):
    data_info = {}
    img_id = osp.split(txt_file)[1][:-4]
    data_info['img_id'] = img_id
    img_name = img_id + f'.{args.img_suffix.lstrip(".")}'
    data_info['file_name'] = img_name

    img_path = txt_file.replace('.txt',f'.{args.img_suffix.lstrip(".")}').replace('labelTxt','images')
    data_info['img_path'] = img_path

    instances = []
    with open(txt_file) as f:
        s = f.readlines()
        for si in s:
            instance = {}
            bbox_info = si.split()
            instance['bbox_label'] = args.dataset_class[bbox_info[8]]
            instance['ignore_flag'] = 0
            instance['bbox'] = [float(i) for i in bbox_info[:8]]
            instances.append(instance)
    data_info['instances'] = instances
    return data_info

def get_keypoint_label(keypoints, data_info, args):
    bboxes = []
    bbox_label = []
    for instances in data_info['instances']:
        bboxes.append(np.array([(instances['bbox'][i], instances['bbox'][i + 1]) for i in range(0, len(instances['bbox']), 2)], dtype=np.int32))
        bbox_label.append(instances['bbox_label'])

    tmp = np.zeros(data_info['image_shape'], dtype=np.uint8)
    for box, label in zip(bboxes, bbox_label):
        cv2.fillPoly(tmp, np.array([box]), label)
    target = []
    mode = importlib.import_module('scipy.stats').mode
    for kp in keypoints: 
        region = tmp[max(0, int(kp[1] - args.expand_piexl)):min(int(kp[1] + args.expand_piexl), data_info['image_shape'][0]),
                    max(0, int(kp[0] - args.expand_piexl)):min(int(kp[0] +args.expand_piexl), data_info['image_shape'][1])]
        if region[region != 0].size > 0:
            # 计算区域的众数
            mode_val = mode(region, axis=None)[0][0]
            target.append(mode_val)
        else:
            target.append(0)  
    return np.array(target), bboxes

# 定义数据集（示例）
class ShipKeyPointsDataset(Dataset):
    def __init__(self, args, dataset_repeat = 1, pipeline = [], debug = False, **kwargs):
        super(ShipKeyPointsDataset, self).__init__()
        if len(pipeline):
            importlib.import_module('mmdet.utils').register_all_modules(init_default_scope=False)
            importlib.import_module('mmdet.utils').register_all_modules(init_default_scope=False)
        self.transform = importlib.import_module('mmengine.dataset').Compose(pipeline)
        self.debug = debug
        self.args = args
        with open(str(Path(__file__).parent / "config.yaml"), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[args.descriptor]
        self.extractor = extractor_build(self.args.descriptor, device = args.device)
        if 'ann_file' in kwargs and kwargs['ann_file'] !='':
            # train case
            ann_dir = kwargs['ann_file']
            if isinstance(ann_dir, str):
                ann_dir = [ann_dir]
        else:
            ann_dir = []
        self.txt_files = []
        for path in ann_dir:
            self.txt_files.extend(glob.glob(osp.join(args.data_root, path, "**/*.txt"), recursive=True)) 
        if (not args.eval) and (args.train_ratio<1):
            self.txt_files = random.sample(self.txt_files, int(np.ceil(len(self.txt_files)*args.train_ratio)))
        if (not args.eval) and (dataset_repeat > 1):
            self.txt_files = self.txt_files*dataset_repeat
            args.logger.info(f"The dataset located in {ann_dir} was duplicated {dataset_repeat} times!")

    def __len__(self):
        return len(self.txt_files)

    def load_data_info(self, idx):
        txt_file = self.txt_files[idx]
        load_txt_info_func = globals()['load_txt_info_' + self.args.data_root.rstrip('/').split('/')[-1]]
        return load_txt_info_func(txt_file, self.args)

    def __getitem__(self, idx):
        data_info = self.load_data_info(idx)
        bboxes = []
        if (not self.args.eval) and (len(self.transform.transforms)):
            data = self.transform(data_info)
            data_instance = data['data_samples'].gt_instances
            if (len(data_info['instances'])>0) and (len(data_instance.labels)<1):
                image = cv2.cvtColor(cv2.imread(data_info['img_path']), cv2.COLOR_BGR2RGB)
                data_info['image_shape'] = image.shape[:2]
            else:            
                image = data['inputs'].cpu().numpy().transpose(1, 2, 0)
                data_info['image_shape'] = image.shape[:2]
                data_info['instances'] = [] 
                for box_id in range(len(data_instance.labels)):
                    instance = {}
                    instance['bbox_label'] = int(data_instance.labels[box_id])
                    instance['bbox'] = list(data_instance.bboxes.vertices[box_id].reshape(-1).cpu().numpy())
                    data_info['instances'].append(instance)
            del data
        else:
            image = cv2.cvtColor(cv2.imread(data_info['img_path']), cv2.COLOR_BGR2RGB)
            data_info['image_shape'] = image.shape[:2]

        keypoints, descriptors, image = extract_img_feature(self.args.descriptor, image, self.extractor)
        if keypoints.size == 0:
            message = f"{data_info['img_path']} has no keypoint founded with {self.args.descriptor}"
            print(message)
            with open(self.args.log_file, "a") as file:   
                file.write(message+'\n')
            return torch.zeros([2, self.config['keypoint_dim'] + self.config['descriptor_dim'] + 2], dtype = torch.float32, requires_grad = False).float(), data_info['img_path']
        else:
            target, bboxes = get_keypoint_label(keypoints, data_info, self.args)
            
            if (not self.args.eval) and (self.args.positive_keypoint_repeat>1) and (np.random.rand() > 0.5): # 将正样本的关键点特征进行重复，增加正样本数目
                keypoints = np.concatenate([keypoints, np.tile(keypoints[target.astype(np.bool_)], (self.args.positive_keypoint_repeat,1))], axis=0)
                descriptors = np.concatenate([descriptors, np.tile(descriptors[target.astype(np.bool_)], (self.args.positive_keypoint_repeat,1))], axis=0)
                target = np.concatenate([target, np.tile(target[target.astype(np.bool_)], self.args.positive_keypoint_repeat)], axis=0)

            # visualization
            if self.debug:
                print(f"VISUALIZATION: {data_info['img_path']}")
                kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])
                image = cv2.drawKeypoints(image, kps[target.astype(np.bool_)], None, color=(255,0,0,))
                image = cv2.drawKeypoints(image, kps[~(target.astype(np.bool_))], None, color=(0,0,255))
                image = cv2.polylines(image, bboxes, isClosed=True, color=(0, 255, 0), thickness=2)
                cv2.imwrite(f"vis_dir/{data_info['img_id']}.png", cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
                
            # boosted the descriptor using trained model
            keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
            if 'orb' in self.args.descriptor.lower():
                descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
                descriptors = descriptors * 2.0 - 1.0
            # 最后的全一是为了区分对齐batch的padding数据
            result = torch.from_numpy(np.concatenate([keypoints, descriptors, target.reshape(-1, 1), np.ones([len(target),1])], axis=-1))
            if (not self.args.eval) and (np.random.rand() > 0.5):
                result = result[torch.randperm(len(result))]
            result.requires_grad = False
            result = result.float()
            return result, data_info['img_path']

def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def get_metric(all_labels, all_output, args):
    accuracy_score = importlib.import_module('sklearn.metrics').accuracy_score
    recall_score = importlib.import_module('sklearn.metrics').recall_score
    precision_score = importlib.import_module('sklearn.metrics').precision_score
    precision_recall_curve = importlib.import_module('sklearn.metrics').precision_recall_curve
    average_precision_score = importlib.import_module('sklearn.metrics').average_precision_score
    f1_score = importlib.import_module('sklearn.metrics').f1_score
    if isinstance(all_output, torch.Tensor):
        if all_output.requires_grad:
            all_output = all_output.detach()
        all_output = all_output.cpu().numpy()
    if isinstance(all_labels, torch.Tensor):
        all_labels = all_labels.cpu().numpy()

    metrics_per_class = {}
    Average_Precision_Curve = {}
    avg_metrics = {}
  
    dataset_class = args.dataset_class.copy()
    if len(args.dataset_class) > 1:
        dataset_class['foreground'] = 0

    all_predict = np.zeros_like(all_output, dtype=bool)
    np.put_along_axis(all_predict, np.argmax(all_output, axis=-1).reshape(-1, 1), True, axis=-1)
     
    for class_name, idx in dataset_class.items():
        # 为当前类别准备标签和预测
        if class_name in 'foreground':
            class_labels = (all_labels != idx).astype(int)
            class_output = ~all_predict[:, 0]
            ap = average_precision_score(class_labels, 1-all_output[:, idx])
            precisions, recalls, _ = precision_recall_curve(class_labels, 1-all_output[:, idx])
        else:
            class_labels = (all_labels == idx).astype(int)
            class_output = all_predict[:, idx]
            ap = average_precision_score(class_labels, all_output[:, idx])
            precisions, recalls, _ = precision_recall_curve(class_labels, all_output[:, idx])
        # 计算指标
        accuracy = accuracy_score(class_labels, class_output)
        precision = precision_score(class_labels, class_output)
        recall = recall_score(class_labels, class_output)
        f1 = f1_score(class_labels, class_output)

        metrics_per_class[class_name] = {
            'Accuracy': accuracy,
            'Precision': precision,
            'Recall': recall,
            'F1_score': f1,
            'Average_Precision': ap,
        }
        Average_Precision_Curve[class_name] = {'Precision': precisions,'Recall': recalls}
        metrics_str = ', '.join(f"{metric}: {value:.4f}" for metric, value in metrics_per_class[class_name].items())
        args.logger.info(f"Metrics for {class_name}: {metrics_str}")

    if len(args.dataset_class)>1:    
        # 计算平均值
        for metric in metrics_per_class[list(args.dataset_class.keys())[0]].keys():
            avg_metrics[metric] = np.mean([class_metrics[metric] for class_metrics in metrics_per_class.values()])
        metrics_str = ', '.join(f"{metric}: {value:.4f}" for metric, value in avg_metrics.items())
        args.logger.info(f"Average metrics: {metrics_str}")
        
        if (not ( os.path.isfile(args.test_image) or (len(args.test_images)>0) )):
            for class_name, idx in dataset_class.items():
                plt.plot(Average_Precision_Curve[class_name]['Recall'], 
                        Average_Precision_Curve[class_name]['Precision'], label=class_name, color=args.color[idx % len(args.color)])
            # 设置图例和标签
            plt.xlabel('Recall')
            plt.ylabel('Precision')
            plt.title('Precision-Recall Curve')
            plt.legend()
            if (args.eval): 
                PR_curve_path = 'work_dirs/' + f'{args.save_path.split("/")[-1][:-4]}_PR_curve_eval.png'
            else:
                PR_curve_path = 'work_dirs/' + f'{args.save_path.split("/")[-1][:-4]}_PR_curve_train.png'
            plt.savefig(PR_curve_path, bbox_inches='tight', dpi=300)
            plt.close('all') 
            args.logger.info(f"PR_curve has been saved to {PR_curve_path}:")        
        return avg_metrics, Average_Precision_Curve['foreground']
    return metrics_per_class[list(args.dataset_class.keys())[0]], Average_Precision_Curve[list(args.dataset_class.keys())[0]] 

def evaluate(model, eva_loader, args):
    model.eval()

    all_output = torch.tensor([], device=args.device)
    all_labels = torch.tensor([], device=args.device)

    with torch.no_grad():
        for i, (data, img_paths) in enumerate(eva_loader):
            data = data.to(args.device)
            outputs = model(data[:,:,:-2])
            valid = data[:,:,-1].reshape(-1).bool()
            all_output = torch.cat([all_output, outputs.view(-1,len(args.dataset_class)+1)[valid,:]], dim=0)
            all_labels = torch.cat([all_labels, data[:,:,-2].long().reshape(-1)[valid]], dim=0)

            if (i + 1) % args.print_interval == 0:
                args.logger.info(f"Epoch(test) : [{i + 1}/{len(eva_loader)}]")

    return get_metric(all_labels, all_output, args)

def test(model, test_image, args):
    model.eval()
    extractor = extractor_build(args.descriptor)
    keypoints, descriptors, image = extract_img_feature(args.descriptor, cv2.cvtColor(cv2.imread(test_image), cv2.COLOR_BGR2RGB), extractor)

    load_txt_info_func = globals()['load_txt_info_' + args.data_root.rstrip('/').split('/')[-1]]
    txt_file = test_image.replace(f'.{args.img_suffix.lstrip(".")}','.txt').replace('images','**')
    txt_file = glob.glob(txt_file, recursive=True)[0]
    data_info = load_txt_info_func(txt_file, args)
    data_info['image_shape'] = image.shape[:2]
    labels, bboxes = get_keypoint_label(keypoints, data_info, args)
    
    kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])
    # boosted the descriptor using trained model
    keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
    if 'orb' in args.descriptor.lower():
        descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
        descriptors = descriptors * 2.0 - 1.0
    with torch.no_grad():
        output = model(torch.from_numpy(np.concatenate([keypoints, descriptors,], axis=-1)).to(args.device).float()).cpu().numpy()

    metric_dict, PR_dict = get_metric(labels, output, args)
    # predict = (1-output[...,0]) > args.test_threshold
    predict = np.argmax(output, axis=-1)
    dataset_class = dict()
    for class_name, idx in args.dataset_class.items():
        dataset_class[str(idx)] = class_name
        index = (predict==idx) # & (output[:,idx]>args.test_threshold)
        image = cv2.drawKeypoints(image, kps[index&labels.astype(np.bool_)], None, color=hex_to_rgb(args.color[idx % len(args.color)]),) 
        image = cv2.drawKeypoints(image, kps[index&(~labels.astype(np.bool_))], None, color=hex_to_rgb(args.color[(idx+1) % len(args.color)]),) 
        # image = cv2.drawKeypoints(image, kps[(~predict)&(labels)], None, color=(0,0,255)) # Aqua蓝色 漏检
        # image = cv2.drawKeypoints(image, kps[predict&labels], None, color=(0,0,255,),) # 黄色 正确预测(正样本)
        # image = cv2.drawKeypoints(image, kps[(~predict)&(~labels)], None, color= (0, 255, 0) ) # 绿色 正确预测(负样本)
        # image = cv2.drawKeypoints(image, kps[(label)], None, color=(255,0,0,))
        # image = cv2.drawKeypoints(image, kps[~predict], None, color=(0,255,0))
    for instance in data_info['instances']:
        color=hex_to_rgb(args.color[instance['bbox_label'] % len(args.color)])
        box = np.array([(instance['bbox'][i], instance['bbox'][i + 1]) for i in range(0, len(instance['bbox']), 2)], dtype=np.int32)
        image = cv2.polylines(image, [box], isClosed=True, color=color, thickness=1)
        # cls_name = dataset_class[str(instance['bbox_label'])]
        # assert args.dataset_class[cls_name] == instance['bbox_label']
        # cv2.putText(image, cls_name, (int(instance['bbox'][0]), int(instance['bbox'][1])), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
    save_path = f"{args.data_root.rstrip('/').split('/')[-1]}_keypoint_results/{args.descriptor}/vis/" + test_image.split('/')[-1]
    if not os.path.exists(os.path.dirname(save_path)):
        os.makedirs(os.path.dirname(save_path))        
    cv2.imwrite(save_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
    return metric_dict, PR_dict

def worker_init_fn(worker_id, group, args):
    # torch.cuda.set_device(worker_id) 指定数加载设备
    torch.cuda.manual_seed_all(worker_id)

def custom_collate_fn(batch):
    rnn_utils = importlib.import_module('torch.nn.utils.rnn')
    results = [item[0] for item in batch]  # 提取每个样本的result
    img_paths = [item[1] for item in batch]  # 提取每个样本的img_path
    padded_results = rnn_utils.pad_sequence(results, batch_first=True, padding_value=0)
    return padded_results, img_paths

def train(model, args):
    CosineAnnealingWarmRestarts = importlib.import_module('torch.optim.lr_scheduler').CosineAnnealingWarmRestarts
    LinearLR = importlib.import_module('torch.optim.lr_scheduler').LinearLR
    MultiStepLR = importlib.import_module('torch.optim.lr_scheduler').MultiStepLR
    ChainedScheduler = importlib.import_module('torch.optim.lr_scheduler').ChainedScheduler
    clip_grad_norm_ = importlib.import_module('torch.nn.utils').clip_grad_norm_
    optimizer_class = importlib.import_module('torch.optim').AdamW
    partial = importlib.import_module('functools').partial
    train_pipeline = []
    if args.image_aug:
        train_pipeline = [
            dict(type='mmdet.LoadImageFromFile', backend_args=None),
            dict(type='mmdet.LoadAnnotations', with_bbox=True, box_type='qbox'),
            dict(
                type='mmrotate.ConvertBoxType',
                box_type_mapping=dict(gt_bboxes='rbox')),
            dict(
                type='mmrotate.RandomRotate',
                prob=0.5,
                angle_range=180,
                rotate_type='mmrotate.Rotate'),
            dict(
                type='mmdet.RandomFlip',
                prob=0.75,
                direction=['horizontal', 'vertical', 'diagonal']),
            dict(
                type='mmdet.RandomAffine',),
            dict(
                type='mmdet.PhotoMetricDistortion',),

            dict(
                type='mmrotate.ConvertBoxType',
                box_type_mapping=dict(gt_bboxes='qbox')),
            dict(type='mmdet.PackDetInputs', meta_keys=())]
    train_dataset = ShipKeyPointsDataset(args, ann_file = args.train_ann_file, dataset_repeat = args.dataset_repeat, pipeline = train_pipeline)
    train_loader = DataLoader(train_dataset, batch_size=args.batch_size, shuffle=True, 
                              num_workers=args.num_workers, collate_fn=custom_collate_fn, 
                              # worker_init_fn=partial(worker_init_fn, group='train', args = args),
                              # pin_memory=True, persistent_workers = True,
                              multiprocessing_context=args.multiprocessing_context)
    eva_loader = {}
    for ann_file in args.test_ann_file:
        eval_args = copy.deepcopy(args)
        eval_args.eval = True
        eva_dataset = ShipKeyPointsDataset(args = eval_args, ann_file = ann_file)
        eva_loader[ann_file] = DataLoader(eva_dataset, batch_size=args.batch_size, shuffle=False, 
                                num_workers=args.num_workers, collate_fn=custom_collate_fn, 
                                # worker_init_fn=partial(worker_init_fn, group='eval', args = args), 
                                # pin_memory=True, persistent_workers = True,
                                multiprocessing_context=args.multiprocessing_context)
    if args.print:
        outputs = importlib.import_module('mmengine.analysis').get_model_complexity_info(
            model,
            input_shape=None,
            inputs=train_dataset.__getitem__(0)[0][:,:-2].float().to(args.device),  # the input tensor of the model
            show_table=True,  # show the complexity table
            show_arch=False)  # show the complexity arch
        for k, v in outputs.items():
            args.logger.info(f"{k}: {v}")
    # 定义损失函数和优化器
    weight = torch.softmax(1/torch.tensor([100000.0,  166, 89 , 288 , 25 , 263 , 2053], device = args.device),dim=-1) # [100000.0,  166, 89 , 288 , 25 , 263 , 2053]

    CenterLoss = getattr(importlib.import_module("CenterLoss"), "CenterLoss")
    loss_weight = 20
    centerloss = CenterLoss(len(args.dataset_class) + 1, model.config['output_dim']).to(args.device)
    nllloss = nn.NLLLoss().to(args.device)
    param_groups = [
        {'params': model.parameters(), 'lr': args.lr, 'weight_decay': 1e-4},
        {'params': centerloss.parameters(), 'lr': args.lr, 'weight_decay': 1e-4}
    ]
    optimizer = optimizer_class(param_groups) # 
    # warmup_scheduler = LinearLR(optimizer, start_factor=1.0 / 20, end_factor=1.0, total_iters=args.warmup_step)
    scheduler = CosineAnnealingWarmRestarts(optimizer, T_0=20, T_mult=2, eta_min = 1e-5)
    # scheduler = MultiStepLR(optimizer, milestones=[40, 70, 90], gamma=0.5)
    # scheduler = ChainedScheduler([warmup_scheduler, step_scheduler])

    start_epoch = 0
    best_AP = 0.0
    if os.path.isfile(args.checkpoint):
        checkpoint = torch.load(args.checkpoint)
        model.load_state_dict(checkpoint['model_state_dict'])
        centerloss.load_state_dict(checkpoint['centerloss_state_dict'])
        optimizer.load_state_dict(checkpoint['optimizer_state_dict']),
        scheduler.load_state_dict(checkpoint['scheduler_state_dict'])
        start_epoch = checkpoint['epoch']+1
        best_AP = checkpoint['best_AP']
        args.logger.info(f'Continue training from epoch [{start_epoch}] !')

    # getGPUs = importlib.import_module('GPUtil').getGPUs
    # virtual_memory = importlib.import_module('psutil').virtual_memory
    # collect = importlib.import_module('gc').collect
    for epoch in range(start_epoch, args.num_epochs):
        start_time = time.time()
        model.train()
        for i, (data, img_paths)  in enumerate(train_loader):
            torch.cuda.empty_cache() # 在显存资源有限的情况下使用
            data = data.to(args.device)
            # collect() # 显式垃圾回收
            # memory = virtual_memory()
            # args.logger.info(f"总内存: {memory.total / (1024 ** 3):.2f} GB, 可用内存: {memory.available / (1024 ** 3):.2f} GB, 内存使用率: {memory.percent}%")
            # gpu = getGPUs()[0]
            # args.logger.info(f">>>before: GPU: {gpu.name}, 显存总量: {gpu.memoryTotal}MB, 显存使用: {gpu.memoryUsed}MB, 显存空闲: {gpu.memoryFree}MB")
            feat, outputs = model(data[:,:,:-2])
            # args.logger.info(f">>>after: GPU: {gpu.name}, 显存总量: {gpu.memoryTotal}MB, 显存使用: {gpu.memoryUsed}MB, 显存空闲: {gpu.memoryFree}MB")
            valid = data[:,:,-1].reshape(-1).bool()
            label_inc = data[:,:,-2].long().view(-1)[valid]
            feat = feat.view(-1,model.config['output_dim'])[valid,:]
            outputs = outputs.view(-1,len(args.dataset_class)+1)[valid,:]
            
            # label = nn.functional.one_hot(label_inc, num_classes= len(args.dataset_class) + 1).float()
            
            # if len(args.dataset_class) > 1: # soft_label
            #     softening_value = 0.1
            #     non_background_mask = (label_inc != 0).unsqueeze(dim=-1).repeat(1,len(args.dataset_class)+1)
            #     non_background_mask[...,0] = False
            #     label[non_background_mask] = label[non_background_mask]  * (1 - softening_value) + \
            #                                     (1 - label[non_background_mask]) * softening_value / (len(args.dataset_class)-1)  
                                                          
            # loss_cls = torch.mean(- 0.75*label * ((1-outputs)**2) *torch.log(outputs) - 0.25*((1-label) *(outputs**2)* torch.log(1-outputs)), dim = 0)
            # inter_cls_loss = torch.sum(loss_cls*weight)
            inter_cls_loss = nllloss(torch.log(outputs), label_inc)
            inner_cls_loss = centerloss(feat, label_inc)
            loss = loss_weight * inter_cls_loss + inner_cls_loss
            
            optimizer.zero_grad()
            loss.backward()
            clip_grad_norm_(model.parameters(), 35, 2)
            clip_grad_norm_(centerloss.parameters(), 35, 2)
            optimizer.step()
            del outputs, data, valid
            if (i + 1) % args.print_interval == 0:
                current_time = time.time()
                eta_seconds = (current_time - start_time) / (i+1) * ( (args.num_epochs - epoch ) * len(train_loader) - (i + 1))
                eta_str = str(int(eta_seconds // 3600)) + ':' + str(int((eta_seconds % 3600) // 60)) + ':' + str(int(eta_seconds % 60))
                # loss_str = ' '.join([f"{cls_name}:{loss_value:.4f}" for cls_name,loss_value in zip(['background'] + list(args.dataset_class.keys()), loss_cls)])
                args.logger.info(f"Epoch(train)"
                      f"[{epoch + 1}/{args.num_epochs}][{i + 1}/{len(train_loader)}]"
                      f"lr: {optimizer.param_groups[0]['lr']:.4e}  eta: {eta_str}  " 
                      f"time: {current_time - start_time:.4f}  inter_cls_loss: {inter_cls_loss:.4f} inner_cls_loss: {inner_cls_loss.item():.4f}")
        scheduler.step()
        if ((epoch+1) % args.eval_interval == 0) or (epoch == 0) or (epoch == args.num_epochs-1): #            
            for idx, ann_file in enumerate(args.test_ann_file): 
                args.logger.info(f"Epoch(test) {ann_file}:")
                metric_dict_all, PR_dict_all = evaluate(model, eva_loader[ann_file], args)
                if len(args.test_ann_file) >1:
                    plt.plot(PR_dict_all['Recall'], PR_dict_all['Precision'], label=ann_file, color=args.color[idx % len(args.color)])
            if len(args.test_ann_file) >1:
                plt.xlabel('Recall')
                plt.ylabel('Precision')
                plt.title('Precision-Recall Curve')
                plt.legend()
                PR_curve_path = 'work_dirs/' + f'{args.save_path.split("/")[-1][:-4]}_PR_curve_train.png'
                plt.savefig(PR_curve_path, bbox_inches='tight', dpi=300)
                plt.close('all') 
                args.logger.info(f"PR_curve has been saved to {PR_curve_path}:")      
                               
            # 检查是否有更好的模型，如果有，则保存权重
            if metric_dict_all['Average_Precision'] > best_AP:
                best_AP = metric_dict_all['Average_Precision']
                # 保存当前模型的权重
                torch.save(model.state_dict(), args.save_path)
                args.logger.info(f"Best model saved to  {args.save_path} with MD5 {calculate_md5(args.save_path)}, with {args.test_ann_file[-1]} image AP {best_AP:.4f}")
            if (epoch >= args.num_epochs-1):
                last_save_path = 'work_dirs/' + args.data_root.rstrip('/').split('/')[-1] + '_' + args.descriptor + f'_{args.train_ratio*100:.0f}' + '_last_model_weight.pth'
                torch.save(model.state_dict(), last_save_path)
                args.logger.info(f"Last model saved :{last_save_path}")

        if ((epoch+1) % args.save_interval == 0):
            for file_path in glob.glob(args.save_path[:-4] + '*_epoch.pth'):
                os.remove(file_path)
            torch.save({
                'model_state_dict': model.state_dict(),
                'centerloss_state_dict': centerloss.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
                'scheduler_state_dict': scheduler.state_dict(),
                'epoch': epoch,
                'best_AP': best_AP,
                }, args.save_path[:-4] + f'_{epoch+1}_epoch.pth')

if __name__ == '__main__':
    args = parse_arguments()

    random.seed(args.random_seed)
    np.random.seed(args.random_seed)
    torch.manual_seed(args.random_seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed_all(args.random_seed)

    if ('alike' in args.descriptor.lower()) or ('superpoint' in args.descriptor.lower()) or ('hardnet' in args.descriptor.lower()) or ('sosnet' in args.descriptor.lower()):
        args.multiprocessing_context = 'spawn'

    args.feature_booster_pretrained = '' # Path(__file__).parent / str("FeatureBooster/models/" + args.descriptor + ".pth")
    pretrained_str = 'finetune' if os.path.isfile(args.feature_booster_pretrained) else 'scratch'
    args.save_path = args.save_path if len(args.save_path) else 'work_dirs/' + args.data_root.rstrip('/').split('/')[-1] + '_' + args.descriptor + f'_{args.train_ratio*100:.0f}' + f"_bs{args.batch_size}" + f'_best_model_weights_{pretrained_str}.pth'
    args.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    # args.color = ['#ff0000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#ff00ff', '#990000', '#999900', '#009900', '#009999'] 
    args.color = ['#00FF00', '#FF00FF', '#FF4500', '#009900', '#009999','#ff0000', '#ffff00', '#00ff00','#00ffff', '#0000ff', ] 
    model = ShipKeyPointsModel(args)
    
    # 创建日志器
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    # 创建控制台处理程序
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))    
    logger.addHandler(console_handler)
    args.logger = logger
    if (not args.eval) and (not ( os.path.isfile(args.test_image) or (len(args.test_images)>0) )): # train
        args.log_file = args.log_file if len(args.log_file) else 'work_dirs/' + args.data_root.rstrip('/').split('/')[-1] + '_' + args.descriptor + f'_{args.train_ratio*100:.0f}' + f"_bs{args.batch_size}" + f'_dataset_repeat_{args.dataset_repeat}_positive_keypoint_repeat_{args.positive_keypoint_repeat}_{pretrained_str}.log'
        if not os.path.exists(os.path.dirname(args.log_file)):
            os.makedirs(os.path.dirname(args.log_file))
        # 创建文件处理程序
        file_handler = logging.FileHandler(args.log_file, mode='a')
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        # 添加处理程序到日志器
        logger.addHandler(file_handler)
        logger.info(">>>>>=========================Start Train!===========================<<<<<")
        for k, v in vars(args).items():
            if k not in 'logger':
                logger.info(f"{k}: {v}")

        if args.print: 
            with open(__file__, 'r') as file:
                lines = file.readlines()
            with open(args.log_file, "a") as file:   
                for line in lines:
                    file.write(line[:-1]+'\n')
                file.write('\n')
        train(model, args)
        args.logger.info(f"model weights saved to {args.save_path} with MD5 {calculate_md5(args.save_path)}!")
        args.checkpoint = args.save_path
        args.eval = True

    model_weights_md5 = "init_md5"
    if os.path.isfile(args.checkpoint):
        if 'cpu' in args.device.type:
            model.load_state_dict(torch.load(args.checkpoint, map_location=lambda storage, loc:storage), strict=False)
        else:
            model.load_state_dict(torch.load(args.checkpoint), strict=False)
        model_weights_md5 = calculate_md5(args.checkpoint)
        args.logger.info(f"model weights loaded from {args.checkpoint} with MD5 {model_weights_md5}!")
        model_weights_md5 = model_weights_md5[:5]

    for img in args.test_images:
        if os.path.isfile(img):
            args.logger.info(f"Epoch(test) - {img}:")
            metric_dict, PR_dict = test(model,img, args)
    if os.path.isfile(args.test_image):
        args.logger.info(f"Epoch(test) - {args.test_image}:")
        metric_dict, PR_dict = test(model, args.test_image, args)
    if args.eval:
        for idx, ann_file in enumerate(args.test_ann_file):
            args.logger.info(f"Epoch(test) {ann_file}:")
            eva_dataset = ShipKeyPointsDataset(args = args, ann_file = ann_file)
            eva_loader = DataLoader(eva_dataset, batch_size=args.batch_size, shuffle=False, 
                                    num_workers=args.num_workers, collate_fn=custom_collate_fn, 
                                    pin_memory=True, persistent_workers = True, multiprocessing_context=args.multiprocessing_context)
            metric_dict, PR_dict_all = evaluate(model, eva_loader, args)
            if len(args.test_ann_file) >1:
                plt.plot(PR_dict_all['Recall'], PR_dict_all['Precision'], label=ann_file, color=args.color[idx % len(args.color)])
        if len(args.test_ann_file) >1:
            plt.xlabel('Recall')
            plt.ylabel('Precision')
            plt.title('Precision-Recall Curve')
            plt.legend()
            PR_curve_path = 'work_dirs/' + f'{args.save_path.split("/")[-1][:-4]}_PR_curve_eval_{model_weights_md5}.png'
            plt.savefig(PR_curve_path, bbox_inches='tight', dpi=300)
            plt.close('all') 
            args.logger.info(f"PR_curve has been saved to {PR_curve_path}!"

2023-12-04 21:21:14,056 - INFO - flops: 6254954880
2023-12-04 21:21:14,056 - INFO - flops_str: 6.255G
2023-12-04 21:21:14,057 - INFO - activations: 22227510
2023-12-04 21:21:14,057 - INFO - activations_str: 22.228M
2023-12-04 21:21:14,057 - INFO - params: 2118882
2023-12-04 21:21:14,057 - INFO - params_str: 2.119M
2023-12-04 21:21:14,057 - INFO - out_table: 
+---------------------------+----------------------+------------+--------------+
| module                    | #parameters or shape | #flops     | #activations |
+---------------------------+----------------------+------------+--------------+
| model                     | 2.119M               | 6.255G     | 22.228M      |
|  feature_booster          |  2.086M              |  6.157G    |  21.843M     |
|   feature_booster.kenc.e… |   0.109M             |   0.321G   |   2.175M     |
|    feature_booster.kenc.… |    0.16K             |    0.378M  |    94.56K    |
|    feature_booster.kenc.… |    2.112K            |    6.052M  |    0.189M    |
|    feature_booster.kenc.… |    8.32K             |    24.207M |    0.378M    |
|    feature_booster.kenc.… |    33.024K           |    96.829M |    0.756M    |
|    feature_booster.kenc.… |    65.792K           |    0.194G  |    0.756M    |
|   feature_booster.denc.e… |   0.329M             |   0.968G   |   3.026M     |
|    feature_booster.denc.… |    0.132M            |    0.387G  |    1.513M    |
|    feature_booster.denc.… |    0.131M            |    0.387G  |    0.756M    |
|    feature_booster.denc.… |    65.792K           |    0.194G  |    0.756M    |
|   feature_booster.attn_p… |   1.581M             |   4.671G   |   15.886M    |
|    feature_booster.attn_… |    0.527M            |    1.557G  |    5.295M    |
|    feature_booster.attn_… |    0.527M            |    1.557G  |    5.295M    |
|    feature_booster.attn_… |    0.527M            |    1.557G  |    5.295M    |
|   feature_booster.final_… |   65.792K            |   0.194G   |   0.756M     |
|    feature_booster.final… |    (256, 256)        |            |              |
|    feature_booster.final… |    (256,)            |            |              |
|   feature_booster.layer_… |   0.512K             |   3.782M   |   0          |
|    feature_booster.layer… |    (256,)            |            |              |
|    feature_booster.layer… |    (256,)            |            |              |
|  fc_out                   |  33.154K             |  97.586M   |  0.384M      |
|   fc_out.0                |   32.896K            |   96.829M  |   0.378M     |
|    fc_out.0.weight        |    (128, 256)        |            |              |
|    fc_out.0.bias          |    (128,)            |            |              |
|   fc_out.2                |   0.258K             |   0.756M   |   5.91K      |
|    fc_out.2.weight        |    (2, 128)          |            |              |
|    fc_out.2.bias          |    (2,)              |            |              |
+---------------------------+----------------------+------------+--------------+

2023-12-04 21:21:14,057 - INFO - out_arch: 
2023-12-04 21:21:40,773 - INFO - Epoch(train)[1/40][20/79]lr: 1.0000e-03  eta: 1:9:53  time: 26.7093  inter_cls_loss: 0.1556 inner_cls_loss: 22.3861
2023-12-04 21:22:04,361 - INFO - Epoch(train)[1/40][40/79]lr: 1.0000e-03  eta: 1:5:23  time: 50.2964  inter_cls_loss: 0.1437 inner_cls_loss: 21.2827
2023-12-04 21:22:27,412 - INFO - Epoch(train)[1/40][60/79]lr: 1.0000e-03  eta: 1:3:9  time: 73.3476  inter_cls_loss: 0.1418 inner_cls_loss: 20.4241
2023-12-04 21:22:49,934 - INFO - Epoch(test) test/all:
2023-12-04 21:23:15,460 - INFO - Epoch(test) : [20/32]
2023-12-04 21:23:36,463 - INFO - Metrics for ship: Accuracy: 0.9645, Precision: 0.0000, Recall: 0.0000, F1_score: 0.0000, Average_Precision: 0.1246
2023-12-04 21:23:36,547 - INFO - Epoch(test) test/offshore:
2023-12-04 21:24:01,343 - INFO - Epoch(test) : [20/29]
2023-12-04 21:24:17,669 - INFO - Metrics for ship: Accuracy: 0.9655, Precision: 0.0000, Recall: 0.0000, F1_score: 0.0000, Average_Precision: 0.1347
2023-12-04 21:24:17,733 - INFO - Epoch(test) test/inshore:
2023-12-04 21:24:26,006 - INFO - Metrics for ship: Accuracy: 0.9561, Precision: 0.0000, Recall: 0.0000, F1_score: 0.0000, Average_Precision: 0.0803
2023-12-04 21:24:28,925 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:24:28,957 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 5992cf6d6696662d6aa1572a7ef8d9ab, with test/inshore image AP 0.0803
2023-12-04 21:24:55,646 - INFO - Epoch(train)[2/40][20/79]lr: 9.9391e-04  eta: 1:8:4  time: 26.6889  inter_cls_loss: 0.1246 inner_cls_loss: 18.3152
2023-12-04 21:25:22,361 - INFO - Epoch(train)[2/40][40/79]lr: 9.9391e-04  eta: 1:7:39  time: 53.4032  inter_cls_loss: 0.1499 inner_cls_loss: 18.8297
2023-12-04 21:25:46,980 - INFO - Epoch(train)[2/40][60/79]lr: 9.9391e-04  eta: 1:5:28  time: 78.0230  inter_cls_loss: 0.0915 inner_cls_loss: 16.8823
2023-12-04 21:26:09,368 - INFO - Epoch(test) test/all:
2023-12-04 21:26:35,457 - INFO - Epoch(test) : [20/32]
2023-12-04 21:26:57,985 - INFO - Metrics for ship: Accuracy: 0.9747, Precision: 0.6106, Recall: 0.7920, F1_score: 0.6896, Average_Precision: 0.6641
2023-12-04 21:26:58,034 - INFO - Epoch(test) test/offshore:
2023-12-04 21:27:22,879 - INFO - Epoch(test) : [20/29]
2023-12-04 21:27:41,257 - INFO - Metrics for ship: Accuracy: 0.9794, Precision: 0.6581, Recall: 0.8363, F1_score: 0.7366, Average_Precision: 0.7035
2023-12-04 21:27:41,278 - INFO - Epoch(test) test/inshore:
2023-12-04 21:27:49,674 - INFO - Metrics for ship: Accuracy: 0.9270, Precision: 0.3088, Recall: 0.5367, F1_score: 0.3920, Average_Precision: 0.2710
2023-12-04 21:27:51,177 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:27:51,230 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 00fb0a3f89dea35a903aaf024bc3e25f, with test/inshore image AP 0.2710
2023-12-04 21:28:17,508 - INFO - Epoch(train)[3/40][20/79]lr: 9.7577e-04  eta: 1:5:18  time: 26.2782  inter_cls_loss: 0.0848 inner_cls_loss: 15.0641
2023-12-04 21:28:41,517 - INFO - Epoch(train)[3/40][40/79]lr: 9.7577e-04  eta: 1:2:3  time: 50.2873  inter_cls_loss: 0.0711 inner_cls_loss: 14.0892
2023-12-04 21:29:05,273 - INFO - Epoch(train)[3/40][60/79]lr: 9.7577e-04  eta: 1:0:30  time: 74.0432  inter_cls_loss: 0.0615 inner_cls_loss: 13.0882
2023-12-04 21:29:31,931 - INFO - Epoch(test) test/all:
2023-12-04 21:29:57,722 - INFO - Epoch(test) : [20/32]
2023-12-04 21:30:19,450 - INFO - Metrics for ship: Accuracy: 0.9804, Precision: 0.7712, Recall: 0.6369, F1_score: 0.6977, Average_Precision: 0.7602
2023-12-04 21:30:19,512 - INFO - Epoch(test) test/offshore:
2023-12-04 21:30:45,665 - INFO - Epoch(test) : [20/29]
2023-12-04 21:31:03,106 - INFO - Metrics for ship: Accuracy: 0.9828, Precision: 0.7875, Recall: 0.6883, F1_score: 0.7346, Average_Precision: 0.7968
2023-12-04 21:31:03,142 - INFO - Epoch(test) test/inshore:
2023-12-04 21:31:11,988 - INFO - Metrics for ship: Accuracy: 0.9534, Precision: 0.4604, Recall: 0.3550, F1_score: 0.4009, Average_Precision: 0.3785
2023-12-04 21:31:14,535 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:31:14,587 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 540a46ef262a81df9464932cdf923866, with test/inshore image AP 0.3785
2023-12-04 21:31:41,633 - INFO - Epoch(train)[4/40][20/79]lr: 9.4605e-04  eta: 1:5:25  time: 27.0460  inter_cls_loss: 0.0562 inner_cls_loss: 12.0964
2023-12-04 21:32:06,657 - INFO - Epoch(train)[4/40][40/79]lr: 9.4605e-04  eta: 1:2:32  time: 52.0694  inter_cls_loss: 0.0596 inner_cls_loss: 11.8621
2023-12-04 21:32:31,443 - INFO - Epoch(train)[4/40][60/79]lr: 9.4605e-04  eta: 1:1:7  time: 76.8557  inter_cls_loss: 0.0412 inner_cls_loss: 11.0527
2023-12-04 21:32:53,269 - INFO - Epoch(test) test/all:
2023-12-04 21:33:18,834 - INFO - Epoch(test) : [20/32]
2023-12-04 21:33:40,542 - INFO - Metrics for ship: Accuracy: 0.9805, Precision: 0.7095, Recall: 0.7649, F1_score: 0.7362, Average_Precision: 0.7872
2023-12-04 21:33:40,649 - INFO - Epoch(test) test/offshore:
2023-12-04 21:34:05,378 - INFO - Epoch(test) : [20/29]
2023-12-04 21:34:22,617 - INFO - Metrics for ship: Accuracy: 0.9844, Precision: 0.7569, Recall: 0.8073, F1_score: 0.7813, Average_Precision: 0.8345
2023-12-04 21:34:22,662 - INFO - Epoch(test) test/inshore:
2023-12-04 21:34:30,987 - INFO - Metrics for ship: Accuracy: 0.9445, Precision: 0.3926, Recall: 0.4880, F1_score: 0.4351, Average_Precision: 0.3801
2023-12-04 21:34:34,365 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:34:34,424 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 0bf6dc46c6af33a3c8263059034c6167, with test/inshore image AP 0.3801
2023-12-04 21:35:01,382 - INFO - Epoch(train)[5/40][20/79]lr: 9.0546e-04  eta: 1:3:26  time: 26.9570  inter_cls_loss: 0.0561 inner_cls_loss: 10.8513
2023-12-04 21:35:24,631 - INFO - Epoch(train)[5/40][40/79]lr: 9.0546e-04  eta: 0:58:39  time: 50.2065  inter_cls_loss: 0.0327 inner_cls_loss: 9.6173
2023-12-04 21:35:48,618 - INFO - Epoch(train)[5/40][60/79]lr: 9.0546e-04  eta: 0:57:22  time: 74.1932  inter_cls_loss: 0.0425 inner_cls_loss: 9.7569
2023-12-04 21:36:11,064 - INFO - Epoch(test) test/all:
2023-12-04 21:36:36,352 - INFO - Epoch(test) : [20/32]
2023-12-04 21:36:57,797 - INFO - Metrics for ship: Accuracy: 0.9800, Precision: 0.6827, Recall: 0.8155, F1_score: 0.7432, Average_Precision: 0.8020
2023-12-04 21:36:57,866 - INFO - Epoch(test) test/offshore:
2023-12-04 21:37:23,076 - INFO - Epoch(test) : [20/29]
2023-12-04 21:37:39,890 - INFO - Metrics for ship: Accuracy: 0.9838, Precision: 0.7225, Recall: 0.8611, F1_score: 0.7858, Average_Precision: 0.8421
2023-12-04 21:37:39,935 - INFO - Epoch(test) test/inshore:
2023-12-04 21:37:48,326 - INFO - Metrics for ship: Accuracy: 0.9439, Precision: 0.3955, Recall: 0.5267, F1_score: 0.4518, Average_Precision: 0.4325
2023-12-04 21:37:51,200 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:37:51,253 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 f3ba64058f04fe3c61180a0e4e7fd3e9, with test/inshore image AP 0.4325
2023-12-04 21:38:18,066 - INFO - Epoch(train)[6/40][20/79]lr: 8.5502e-04  eta: 1:1:20  time: 26.8132  inter_cls_loss: 0.0398 inner_cls_loss: 9.0409
2023-12-04 21:38:42,432 - INFO - Epoch(train)[6/40][40/79]lr: 8.5502e-04  eta: 0:58:6  time: 51.1789  inter_cls_loss: 0.0394 inner_cls_loss: 8.7894
2023-12-04 21:39:05,064 - INFO - Epoch(train)[6/40][60/79]lr: 8.5502e-04  eta: 0:55:27  time: 73.8115  inter_cls_loss: 0.0458 inner_cls_loss: 8.7491
2023-12-04 21:39:27,090 - INFO - Epoch(test) test/all:
2023-12-04 21:39:52,785 - INFO - Epoch(test) : [20/32]
2023-12-04 21:40:13,652 - INFO - Metrics for ship: Accuracy: 0.9818, Precision: 0.8324, Recall: 0.6118, F1_score: 0.7053, Average_Precision: 0.8229
2023-12-04 21:40:13,725 - INFO - Epoch(test) test/offshore:
2023-12-04 21:40:38,134 - INFO - Epoch(test) : [20/29]
2023-12-04 21:40:54,605 - INFO - Metrics for ship: Accuracy: 0.9843, Precision: 0.8505, Recall: 0.6611, F1_score: 0.7439, Average_Precision: 0.8605
2023-12-04 21:40:54,652 - INFO - Epoch(test) test/inshore:
2023-12-04 21:41:02,861 - INFO - Metrics for ship: Accuracy: 0.9596, Precision: 0.5634, Recall: 0.3399, F1_score: 0.4240, Average_Precision: 0.4669
2023-12-04 21:41:05,719 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:41:05,776 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 3352d48081642abfbcfbb74995bdd60f, with test/inshore image AP 0.4669
2023-12-04 21:41:32,366 - INFO - Epoch(train)[7/40][20/79]lr: 7.9595e-04  eta: 0:59:4  time: 26.5889  inter_cls_loss: 0.0422 inner_cls_loss: 8.1107
2023-12-04 21:41:55,534 - INFO - Epoch(train)[7/40][40/79]lr: 7.9595e-04  eta: 0:54:51  time: 49.7572  inter_cls_loss: 0.0318 inner_cls_loss: 7.5548
2023-12-04 21:42:18,664 - INFO - Epoch(train)[7/40][60/79]lr: 7.9595e-04  eta: 0:53:10  time: 72.8875  inter_cls_loss: 0.0404 inner_cls_loss: 7.6841
2023-12-04 21:42:40,882 - INFO - Epoch(test) test/all:
2023-12-04 21:43:06,308 - INFO - Epoch(test) : [20/32]
2023-12-04 21:43:27,566 - INFO - Metrics for ship: Accuracy: 0.9826, Precision: 0.8193, Recall: 0.6549, F1_score: 0.7279, Average_Precision: 0.8261
2023-12-04 21:43:27,641 - INFO - Epoch(test) test/offshore:
2023-12-04 21:43:52,280 - INFO - Epoch(test) : [20/29]
2023-12-04 21:44:08,755 - INFO - Metrics for ship: Accuracy: 0.9853, Precision: 0.8490, Recall: 0.6998, F1_score: 0.7672, Average_Precision: 0.8694
2023-12-04 21:44:08,816 - INFO - Epoch(test) test/inshore:
2023-12-04 21:44:17,014 - INFO - Metrics for ship: Accuracy: 0.9587, Precision: 0.5454, Recall: 0.3545, F1_score: 0.4297, Average_Precision: 0.4582
2023-12-04 21:44:23,246 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:44:49,711 - INFO - Epoch(train)[8/40][20/79]lr: 7.2973e-04  eta: 0:57:3  time: 26.4648  inter_cls_loss: 0.0388 inner_cls_loss: 7.1845
2023-12-04 21:45:12,598 - INFO - Epoch(train)[8/40][40/79]lr: 7.2973e-04  eta: 0:52:47  time: 49.3515  inter_cls_loss: 0.0454 inner_cls_loss: 7.1447
2023-12-04 21:45:37,012 - INFO - Epoch(train)[8/40][60/79]lr: 7.2973e-04  eta: 0:52:11  time: 73.7650  inter_cls_loss: 0.0379 inner_cls_loss: 6.8072
2023-12-04 21:45:59,169 - INFO - Epoch(test) test/all:
2023-12-04 21:46:24,411 - INFO - Epoch(test) : [20/32]
2023-12-04 21:46:44,936 - INFO - Metrics for ship: Accuracy: 0.9776, Precision: 0.9112, Recall: 0.4104, F1_score: 0.5659, Average_Precision: 0.8314
2023-12-04 21:46:44,987 - INFO - Epoch(test) test/offshore:
2023-12-04 21:47:09,722 - INFO - Epoch(test) : [20/29]
2023-12-04 21:47:26,212 - INFO - Metrics for ship: Accuracy: 0.9795, Precision: 0.9219, Recall: 0.4440, F1_score: 0.5993, Average_Precision: 0.8704
2023-12-04 21:47:26,235 - INFO - Epoch(test) test/inshore:
2023-12-04 21:47:34,477 - INFO - Metrics for ship: Accuracy: 0.9607, Precision: 0.6960, Recall: 0.1834, F1_score: 0.2903, Average_Precision: 0.4659
2023-12-04 21:47:36,238 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:48:03,556 - INFO - Epoch(train)[9/40][20/79]lr: 6.5796e-04  eta: 0:57:5  time: 27.3176  inter_cls_loss: 0.0318 inner_cls_loss: 6.3617
2023-12-04 21:48:26,877 - INFO - Epoch(train)[9/40][40/79]lr: 6.5796e-04  eta: 0:52:29  time: 50.6387  inter_cls_loss: 0.0387 inner_cls_loss: 6.3946
2023-12-04 21:48:53,837 - INFO - Epoch(train)[9/40][60/79]lr: 6.5796e-04  eta: 0:53:11  time: 77.5989  inter_cls_loss: 0.0542 inner_cls_loss: 6.7441
2023-12-04 21:49:16,418 - INFO - Epoch(test) test/all:
2023-12-04 21:49:41,839 - INFO - Epoch(test) : [20/32]
2023-12-04 21:50:03,731 - INFO - Metrics for ship: Accuracy: 0.9837, Precision: 0.7677, Recall: 0.7762, F1_score: 0.7719, Average_Precision: 0.8433
2023-12-04 21:50:03,798 - INFO - Epoch(test) test/offshore:
2023-12-04 21:50:28,507 - INFO - Epoch(test) : [20/29]
2023-12-04 21:50:45,309 - INFO - Metrics for ship: Accuracy: 0.9868, Precision: 0.8015, Recall: 0.8207, F1_score: 0.8110, Average_Precision: 0.8821
2023-12-04 21:50:45,350 - INFO - Epoch(test) test/inshore:
2023-12-04 21:50:53,468 - INFO - Metrics for ship: Accuracy: 0.9533, Precision: 0.4688, Recall: 0.4821, F1_score: 0.4753, Average_Precision: 0.4633
2023-12-04 21:50:59,199 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:51:25,739 - INFO - Epoch(train)[10/40][20/79]lr: 5.8244e-04  eta: 0:53:43  time: 26.5396  inter_cls_loss: 0.0423 inner_cls_loss: 5.9655
2023-12-04 21:51:48,843 - INFO - Epoch(train)[10/40][40/79]lr: 5.8244e-04  eta: 0:49:49  time: 49.6438  inter_cls_loss: 0.0375 inner_cls_loss: 5.8336
2023-12-04 21:52:12,572 - INFO - Epoch(train)[10/40][60/79]lr: 5.8244e-04  eta: 0:48:41  time: 73.3723  inter_cls_loss: 0.0282 inner_cls_loss: 5.3608
2023-12-04 21:52:35,251 - INFO - Epoch(test) test/all:
2023-12-04 21:53:00,590 - INFO - Epoch(test) : [20/32]
2023-12-04 21:53:22,133 - INFO - Metrics for ship: Accuracy: 0.9843, Precision: 0.8130, Recall: 0.7257, F1_score: 0.7669, Average_Precision: 0.8495
2023-12-04 21:53:22,211 - INFO - Epoch(test) test/offshore:
2023-12-04 21:53:46,833 - INFO - Epoch(test) : [20/29]
2023-12-04 21:54:03,450 - INFO - Metrics for ship: Accuracy: 0.9870, Precision: 0.8291, Recall: 0.7841, F1_score: 0.8060, Average_Precision: 0.8828
2023-12-04 21:54:03,490 - INFO - Epoch(test) test/inshore:
2023-12-04 21:54:11,650 - INFO - Metrics for ship: Accuracy: 0.9595, Precision: 0.5552, Recall: 0.3808, F1_score: 0.4518, Average_Precision: 0.4857
2023-12-04 21:54:17,348 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:54:17,395 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 64c500379a21fc80ad28aea6cc2efebe, with test/inshore image AP 0.4857
2023-12-04 21:54:43,376 - INFO - Epoch(train)[11/40][20/79]lr: 5.0500e-04  eta: 0:50:47  time: 25.9372  inter_cls_loss: 0.0370 inner_cls_loss: 5.4214
2023-12-04 21:55:07,154 - INFO - Epoch(train)[11/40][40/79]lr: 5.0500e-04  eta: 0:48:15  time: 49.7152  inter_cls_loss: 0.0412 inner_cls_loss: 5.4325
2023-12-04 21:55:30,295 - INFO - Epoch(train)[11/40][60/79]lr: 5.0500e-04  eta: 0:46:44  time: 72.8570  inter_cls_loss: 0.0391 inner_cls_loss: 5.3109
2023-12-04 21:55:53,163 - INFO - Epoch(test) test/all:
2023-12-04 21:56:18,624 - INFO - Epoch(test) : [20/32]
2023-12-04 21:56:40,258 - INFO - Metrics for ship: Accuracy: 0.9843, Precision: 0.8345, Recall: 0.6955, F1_score: 0.7587, Average_Precision: 0.8555
2023-12-04 21:56:40,320 - INFO - Epoch(test) test/offshore:
2023-12-04 21:57:04,923 - INFO - Epoch(test) : [20/29]
2023-12-04 21:57:21,842 - INFO - Metrics for ship: Accuracy: 0.9868, Precision: 0.8536, Recall: 0.7466, F1_score: 0.7965, Average_Precision: 0.8885
2023-12-04 21:57:21,881 - INFO - Epoch(test) test/inshore:
2023-12-04 21:57:30,114 - INFO - Metrics for ship: Accuracy: 0.9607, Precision: 0.5754, Recall: 0.3931, F1_score: 0.4671, Average_Precision: 0.5042
2023-12-04 21:57:35,529 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 21:57:35,581 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 812509d225c5bf8aa24645175189fd00, with test/inshore image AP 0.5042
2023-12-04 21:58:01,748 - INFO - Epoch(train)[12/40][20/79]lr: 4.2756e-04  eta: 0:49:31  time: 26.1669  inter_cls_loss: 0.0414 inner_cls_loss: 5.2092
2023-12-04 21:58:26,149 - INFO - Epoch(train)[12/40][40/79]lr: 4.2756e-04  eta: 0:47:25  time: 50.5677  inter_cls_loss: 0.0475 inner_cls_loss: 5.2783
2023-12-04 21:58:50,909 - INFO - Epoch(train)[12/40][60/79]lr: 4.2756e-04  eta: 0:46:40  time: 75.3279  inter_cls_loss: 0.0258 inner_cls_loss: 4.6406
2023-12-04 21:59:13,072 - INFO - Epoch(test) test/all:
2023-12-04 21:59:38,561 - INFO - Epoch(test) : [20/32]
2023-12-04 22:00:00,718 - INFO - Metrics for ship: Accuracy: 0.9848, Precision: 0.7904, Recall: 0.7791, F1_score: 0.7847, Average_Precision: 0.8597
2023-12-04 22:00:00,794 - INFO - Epoch(test) test/offshore:
2023-12-04 22:00:26,021 - INFO - Epoch(test) : [20/29]
2023-12-04 22:00:43,119 - INFO - Metrics for ship: Accuracy: 0.9876, Precision: 0.8153, Recall: 0.8287, F1_score: 0.8219, Average_Precision: 0.8936
2023-12-04 22:00:43,162 - INFO - Epoch(test) test/inshore:
2023-12-04 22:00:51,420 - INFO - Metrics for ship: Accuracy: 0.9570, Precision: 0.5105, Recall: 0.4832, F1_score: 0.4965, Average_Precision: 0.5030
2023-12-04 22:00:57,641 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:01:23,986 - INFO - Epoch(train)[13/40][20/79]lr: 3.5204e-04  eta: 0:48:7  time: 26.3449  inter_cls_loss: 0.0308 inner_cls_loss: 4.6342
2023-12-04 22:01:47,654 - INFO - Epoch(train)[13/40][40/79]lr: 3.5204e-04  eta: 0:45:15  time: 50.0132  inter_cls_loss: 0.0325 inner_cls_loss: 4.5965
2023-12-04 22:02:11,166 - INFO - Epoch(train)[13/40][60/79]lr: 3.5204e-04  eta: 0:43:57  time: 73.5246  inter_cls_loss: 0.0247 inner_cls_loss: 4.3377
2023-12-04 22:02:33,521 - INFO - Epoch(test) test/all:
2023-12-04 22:02:59,011 - INFO - Epoch(test) : [20/32]
2023-12-04 22:03:20,385 - INFO - Metrics for ship: Accuracy: 0.9850, Precision: 0.8058, Recall: 0.7611, F1_score: 0.7828, Average_Precision: 0.8595
2023-12-04 22:03:20,450 - INFO - Epoch(test) test/offshore:
2023-12-04 22:03:45,728 - INFO - Epoch(test) : [20/29]
2023-12-04 22:04:02,219 - INFO - Metrics for ship: Accuracy: 0.9876, Precision: 0.8243, Recall: 0.8151, F1_score: 0.8197, Average_Precision: 0.8900
2023-12-04 22:04:02,263 - INFO - Epoch(test) test/inshore:
2023-12-04 22:04:10,619 - INFO - Metrics for ship: Accuracy: 0.9613, Precision: 0.5761, Recall: 0.4468, F1_score: 0.5033, Average_Precision: 0.5255
2023-12-04 22:04:15,943 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:04:16,001 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 851cff74e2d129502ec835b7a0881256, with test/inshore image AP 0.5255
2023-12-04 22:04:42,461 - INFO - Epoch(train)[14/40][20/79]lr: 2.8027e-04  eta: 0:46:35  time: 26.4599  inter_cls_loss: 0.0311 inner_cls_loss: 4.4093
2023-12-04 22:05:06,516 - INFO - Epoch(train)[14/40][40/79]lr: 2.8027e-04  eta: 0:44:3  time: 50.5147  inter_cls_loss: 0.0309 inner_cls_loss: 4.3635
2023-12-04 22:05:30,896 - INFO - Epoch(train)[14/40][60/79]lr: 2.8027e-04  eta: 0:43:7  time: 74.8945  inter_cls_loss: 0.0398 inner_cls_loss: 4.5225
2023-12-04 22:05:53,180 - INFO - Epoch(test) test/all:
2023-12-04 22:06:18,805 - INFO - Epoch(test) : [20/32]
2023-12-04 22:06:40,773 - INFO - Metrics for ship: Accuracy: 0.9852, Precision: 0.8120, Recall: 0.7581, F1_score: 0.7841, Average_Precision: 0.8644
2023-12-04 22:06:40,839 - INFO - Epoch(test) test/offshore:
2023-12-04 22:07:05,631 - INFO - Epoch(test) : [20/29]
2023-12-04 22:07:22,599 - INFO - Metrics for ship: Accuracy: 0.9879, Precision: 0.8317, Recall: 0.8146, F1_score: 0.8231, Average_Precision: 0.8959
2023-12-04 22:07:22,641 - INFO - Epoch(test) test/inshore:
2023-12-04 22:07:30,935 - INFO - Metrics for ship: Accuracy: 0.9604, Precision: 0.5618, Recall: 0.4406, F1_score: 0.4939, Average_Precision: 0.5182
2023-12-04 22:07:36,884 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:08:03,142 - INFO - Epoch(train)[15/40][20/79]lr: 2.1405e-04  eta: 0:44:30  time: 26.2572  inter_cls_loss: 0.0305 inner_cls_loss: 4.2392
2023-12-04 22:08:26,598 - INFO - Epoch(train)[15/40][40/79]lr: 2.1405e-04  eta: 0:41:43  time: 49.7131  inter_cls_loss: 0.0330 inner_cls_loss: 4.2326
2023-12-04 22:08:50,170 - INFO - Epoch(train)[15/40][60/79]lr: 2.1405e-04  eta: 0:40:35  time: 73.2857  inter_cls_loss: 0.0410 inner_cls_loss: 4.4152
2023-12-04 22:09:12,245 - INFO - Epoch(test) test/all:
2023-12-04 22:09:37,891 - INFO - Epoch(test) : [20/32]
2023-12-04 22:09:59,701 - INFO - Metrics for ship: Accuracy: 0.9852, Precision: 0.8327, Recall: 0.7293, F1_score: 0.7776, Average_Precision: 0.8666
2023-12-04 22:09:59,767 - INFO - Epoch(test) test/offshore:
2023-12-04 22:10:24,494 - INFO - Epoch(test) : [20/29]
2023-12-04 22:10:41,789 - INFO - Metrics for ship: Accuracy: 0.9877, Precision: 0.8487, Recall: 0.7839, F1_score: 0.8150, Average_Precision: 0.8964
2023-12-04 22:10:41,841 - INFO - Epoch(test) test/inshore:
2023-12-04 22:10:50,210 - INFO - Metrics for ship: Accuracy: 0.9627, Precision: 0.6122, Recall: 0.4073, F1_score: 0.4892, Average_Precision: 0.5324
2023-12-04 22:10:55,327 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:10:55,384 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 4915236b34710dc807ee5d9e8170e535, with test/inshore image AP 0.5324
2023-12-04 22:11:21,549 - INFO - Epoch(train)[16/40][20/79]lr: 1.5498e-04  eta: 0:42:37  time: 26.1641  inter_cls_loss: 0.0364 inner_cls_loss: 4.2792
2023-12-04 22:11:45,639 - INFO - Epoch(train)[16/40][40/79]lr: 1.5498e-04  eta: 0:40:31  time: 50.2547  inter_cls_loss: 0.0313 inner_cls_loss: 4.1075
2023-12-04 22:12:08,943 - INFO - Epoch(train)[16/40][60/79]lr: 1.5498e-04  eta: 0:39:7  time: 73.5588  inter_cls_loss: 0.0329 inner_cls_loss: 4.1258
2023-12-04 22:12:29,860 - INFO - Epoch(test) test/all:
2023-12-04 22:12:55,597 - INFO - Epoch(test) : [20/32]
2023-12-04 22:13:17,099 - INFO - Metrics for ship: Accuracy: 0.9853, Precision: 0.8080, Recall: 0.7701, F1_score: 0.7886, Average_Precision: 0.8662
2023-12-04 22:13:17,164 - INFO - Epoch(test) test/offshore:
2023-12-04 22:13:42,186 - INFO - Epoch(test) : [20/29]
2023-12-04 22:13:58,527 - INFO - Metrics for ship: Accuracy: 0.9880, Precision: 0.8267, Recall: 0.8260, F1_score: 0.8264, Average_Precision: 0.8973
2023-12-04 22:13:58,567 - INFO - Epoch(test) test/inshore:
2023-12-04 22:14:06,672 - INFO - Metrics for ship: Accuracy: 0.9609, Precision: 0.5700, Recall: 0.4439, F1_score: 0.4991, Average_Precision: 0.5249
2023-12-04 22:14:11,885 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:14:38,354 - INFO - Epoch(train)[17/40][20/79]lr: 1.0454e-04  eta: 0:41:22  time: 26.4692  inter_cls_loss: 0.0391 inner_cls_loss: 4.2391
2023-12-04 22:15:01,548 - INFO - Epoch(train)[17/40][40/79]lr: 1.0454e-04  eta: 0:38:24  time: 49.6630  inter_cls_loss: 0.0258 inner_cls_loss: 3.8879
2023-12-04 22:15:25,119 - INFO - Epoch(train)[17/40][60/79]lr: 1.0454e-04  eta: 0:37:20  time: 73.2342  inter_cls_loss: 0.0357 inner_cls_loss: 4.1090
2023-12-04 22:15:46,411 - INFO - Epoch(test) test/all:
2023-12-04 22:16:11,869 - INFO - Epoch(test) : [20/32]
2023-12-04 22:16:33,296 - INFO - Metrics for ship: Accuracy: 0.9853, Precision: 0.8258, Recall: 0.7427, F1_score: 0.7821, Average_Precision: 0.8675
2023-12-04 22:16:33,363 - INFO - Epoch(test) test/offshore:
2023-12-04 22:16:58,274 - INFO - Epoch(test) : [20/29]
2023-12-04 22:17:15,169 - INFO - Metrics for ship: Accuracy: 0.9879, Precision: 0.8416, Recall: 0.8002, F1_score: 0.8204, Average_Precision: 0.8975
2023-12-04 22:17:15,209 - INFO - Epoch(test) test/inshore:
2023-12-04 22:17:23,784 - INFO - Metrics for ship: Accuracy: 0.9623, Precision: 0.6006, Recall: 0.4195, F1_score: 0.4940, Average_Precision: 0.5310
2023-12-04 22:17:29,151 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:17:55,761 - INFO - Epoch(train)[18/40][20/79]lr: 6.3952e-05  eta: 0:39:50  time: 26.6100  inter_cls_loss: 0.0287 inner_cls_loss: 3.9310
2023-12-04 22:18:19,234 - INFO - Epoch(train)[18/40][40/79]lr: 6.3952e-05  eta: 0:37:4  time: 50.0829  inter_cls_loss: 0.0296 inner_cls_loss: 3.9181
2023-12-04 22:18:43,463 - INFO - Epoch(train)[18/40][60/79]lr: 6.3952e-05  eta: 0:36:16  time: 74.3120  inter_cls_loss: 0.0279 inner_cls_loss: 3.9189
2023-12-04 22:19:05,238 - INFO - Epoch(test) test/all:
2023-12-04 22:19:30,468 - INFO - Epoch(test) : [20/32]
2023-12-04 22:19:51,790 - INFO - Metrics for ship: Accuracy: 0.9854, Precision: 0.8111, Recall: 0.7660, F1_score: 0.7879, Average_Precision: 0.8675
2023-12-04 22:19:51,866 - INFO - Epoch(test) test/offshore:
2023-12-04 22:20:16,945 - INFO - Epoch(test) : [20/29]
2023-12-04 22:20:33,442 - INFO - Metrics for ship: Accuracy: 0.9881, Precision: 0.8287, Recall: 0.8247, F1_score: 0.8267, Average_Precision: 0.8989
2023-12-04 22:20:33,484 - INFO - Epoch(test) test/inshore:
2023-12-04 22:20:42,017 - INFO - Metrics for ship: Accuracy: 0.9610, Precision: 0.5709, Recall: 0.4444, F1_score: 0.4997, Average_Precision: 0.5237
2023-12-04 22:20:47,411 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:21:14,379 - INFO - Epoch(train)[19/40][20/79]lr: 3.4227e-05  eta: 0:38:36  time: 26.9679  inter_cls_loss: 0.0272 inner_cls_loss: 3.8586
2023-12-04 22:21:38,424 - INFO - Epoch(train)[19/40][40/79]lr: 3.4227e-05  eta: 0:36:5  time: 51.0127  inter_cls_loss: 0.0319 inner_cls_loss: 3.9566
2023-12-04 22:22:01,723 - INFO - Epoch(train)[19/40][60/79]lr: 3.4227e-05  eta: 0:34:38  time: 74.3117  inter_cls_loss: 0.0303 inner_cls_loss: 3.8356
2023-12-04 22:22:23,084 - INFO - Epoch(test) test/all:
2023-12-04 22:22:48,804 - INFO - Epoch(test) : [20/32]
2023-12-04 22:23:10,262 - INFO - Metrics for ship: Accuracy: 0.9854, Precision: 0.8188, Recall: 0.7555, F1_score: 0.7859, Average_Precision: 0.8680
2023-12-04 22:23:10,323 - INFO - Epoch(test) test/offshore:
2023-12-04 22:23:35,337 - INFO - Epoch(test) : [20/29]
2023-12-04 22:23:52,171 - INFO - Metrics for ship: Accuracy: 0.9880, Precision: 0.8354, Recall: 0.8130, F1_score: 0.8241, Average_Precision: 0.8988
2023-12-04 22:23:52,212 - INFO - Epoch(test) test/inshore:
2023-12-04 22:24:00,786 - INFO - Metrics for ship: Accuracy: 0.9617, Precision: 0.5847, Recall: 0.4327, F1_score: 0.4973, Average_Precision: 0.5268
2023-12-04 22:24:06,172 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:24:32,038 - INFO - Epoch(train)[20/40][20/79]lr: 1.6094e-05  eta: 0:35:19  time: 25.8658  inter_cls_loss: 0.0245 inner_cls_loss: 3.7699
2023-12-04 22:24:55,460 - INFO - Epoch(train)[20/40][40/79]lr: 1.6094e-05  eta: 0:33:14  time: 49.2876  inter_cls_loss: 0.0284 inner_cls_loss: 3.8522
2023-12-04 22:25:19,150 - INFO - Epoch(train)[20/40][60/79]lr: 1.6094e-05  eta: 0:32:24  time: 72.9781  inter_cls_loss: 0.0355 inner_cls_loss: 4.0218
2023-12-04 22:25:41,864 - INFO - Epoch(test) test/all:
2023-12-04 22:26:07,423 - INFO - Epoch(test) : [20/32]
2023-12-04 22:26:28,926 - INFO - Metrics for ship: Accuracy: 0.9853, Precision: 0.8253, Recall: 0.7451, F1_score: 0.7832, Average_Precision: 0.8684
2023-12-04 22:26:28,990 - INFO - Epoch(test) test/offshore:
2023-12-04 22:26:53,956 - INFO - Epoch(test) : [20/29]
2023-12-04 22:27:10,959 - INFO - Metrics for ship: Accuracy: 0.9879, Precision: 0.8410, Recall: 0.8020, F1_score: 0.8211, Average_Precision: 0.8989
2023-12-04 22:27:11,003 - INFO - Epoch(test) test/inshore:
2023-12-04 22:27:19,615 - INFO - Metrics for ship: Accuracy: 0.9622, Precision: 0.5971, Recall: 0.4220, F1_score: 0.4945, Average_Precision: 0.5318
2023-12-04 22:27:24,793 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:27:51,324 - INFO - Epoch(train)[21/40][20/79]lr: 1.0000e-03  eta: 0:34:25  time: 26.4813  inter_cls_loss: 0.0411 inner_cls_loss: 4.0059
2023-12-04 22:28:15,005 - INFO - Epoch(train)[21/40][40/79]lr: 1.0000e-03  eta: 0:32:11  time: 50.1632  inter_cls_loss: 0.0440 inner_cls_loss: 3.8828
2023-12-04 22:28:38,368 - INFO - Epoch(train)[21/40][60/79]lr: 1.0000e-03  eta: 0:31:2  time: 73.5256  inter_cls_loss: 0.0343 inner_cls_loss: 3.5012
2023-12-04 22:29:00,568 - INFO - Epoch(test) test/all:
2023-12-04 22:29:26,109 - INFO - Epoch(test) : [20/32]
2023-12-04 22:29:47,669 - INFO - Metrics for ship: Accuracy: 0.9834, Precision: 0.8491, Recall: 0.6465, F1_score: 0.7341, Average_Precision: 0.8478
2023-12-04 22:29:47,743 - INFO - Epoch(test) test/offshore:
2023-12-04 22:30:12,662 - INFO - Epoch(test) : [20/29]
2023-12-04 22:30:29,253 - INFO - Metrics for ship: Accuracy: 0.9855, Precision: 0.8662, Recall: 0.6871, F1_score: 0.7663, Average_Precision: 0.8812
2023-12-04 22:30:29,281 - INFO - Epoch(test) test/inshore:
2023-12-04 22:30:37,921 - INFO - Metrics for ship: Accuracy: 0.9601, Precision: 0.5654, Recall: 0.3861, F1_score: 0.4588, Average_Precision: 0.4983
2023-12-04 22:30:42,102 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:31:08,274 - INFO - Epoch(train)[22/40][20/79]lr: 9.9847e-04  eta: 0:32:18  time: 26.1725  inter_cls_loss: 0.0413 inner_cls_loss: 3.4254
2023-12-04 22:31:31,435 - INFO - Epoch(train)[22/40][40/79]lr: 9.9847e-04  eta: 0:30:1  time: 49.3327  inter_cls_loss: 0.0252 inner_cls_loss: 2.9437
2023-12-04 22:31:55,187 - INFO - Epoch(train)[22/40][60/79]lr: 9.9847e-04  eta: 0:29:15  time: 73.0850  inter_cls_loss: 0.0297 inner_cls_loss: 2.9485
2023-12-04 22:32:16,734 - INFO - Epoch(test) test/all:
2023-12-04 22:32:42,129 - INFO - Epoch(test) : [20/32]
2023-12-04 22:33:03,833 - INFO - Metrics for ship: Accuracy: 0.9849, Precision: 0.8214, Recall: 0.7330, F1_score: 0.7747, Average_Precision: 0.8615
2023-12-04 22:33:03,886 - INFO - Epoch(test) test/offshore:
2023-12-04 22:33:28,572 - INFO - Epoch(test) : [20/29]
2023-12-04 22:33:45,510 - INFO - Metrics for ship: Accuracy: 0.9874, Precision: 0.8433, Recall: 0.7809, F1_score: 0.8109, Average_Precision: 0.8932
2023-12-04 22:33:45,542 - INFO - Epoch(test) test/inshore:
2023-12-04 22:33:54,187 - INFO - Metrics for ship: Accuracy: 0.9603, Precision: 0.5604, Recall: 0.4410, F1_score: 0.4936, Average_Precision: 0.5183
2023-12-04 22:33:58,661 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:34:25,133 - INFO - Epoch(train)[23/40][20/79]lr: 9.9391e-04  eta: 0:30:55  time: 26.4708  inter_cls_loss: 0.0251 inner_cls_loss: 2.6438
2023-12-04 22:34:48,238 - INFO - Epoch(train)[23/40][40/79]lr: 9.9391e-04  eta: 0:28:32  time: 49.5763  inter_cls_loss: 0.0389 inner_cls_loss: 2.8196
2023-12-04 22:35:11,508 - INFO - Epoch(train)[23/40][60/79]lr: 9.9391e-04  eta: 0:27:33  time: 72.8467  inter_cls_loss: 0.0413 inner_cls_loss: 2.7235
2023-12-04 22:35:33,740 - INFO - Epoch(test) test/all:
2023-12-04 22:35:59,330 - INFO - Epoch(test) : [20/32]
2023-12-04 22:36:20,958 - INFO - Metrics for ship: Accuracy: 0.9852, Precision: 0.8350, Recall: 0.7256, F1_score: 0.7765, Average_Precision: 0.8661
2023-12-04 22:36:21,014 - INFO - Epoch(test) test/offshore:
2023-12-04 22:36:45,911 - INFO - Epoch(test) : [20/29]
2023-12-04 22:37:03,134 - INFO - Metrics for ship: Accuracy: 0.9876, Precision: 0.8515, Recall: 0.7772, F1_score: 0.8127, Average_Precision: 0.8959
2023-12-04 22:37:03,167 - INFO - Epoch(test) test/inshore:
2023-12-04 22:37:11,858 - INFO - Metrics for ship: Accuracy: 0.9623, Precision: 0.5958, Recall: 0.4344, F1_score: 0.5025, Average_Precision: 0.5393
2023-12-04 22:37:16,389 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:37:16,447 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 e3b9f8b11d54d25fdc092ae475d0afe3, with test/inshore image AP 0.5393
2023-12-04 22:37:43,864 - INFO - Epoch(train)[24/40][20/79]lr: 9.8632e-04  eta: 0:30:13  time: 27.4171  inter_cls_loss: 0.0321 inner_cls_loss: 2.4432
2023-12-04 22:38:08,612 - INFO - Epoch(train)[24/40][40/79]lr: 9.8632e-04  eta: 0:28:19  time: 52.1650  inter_cls_loss: 0.0301 inner_cls_loss: 2.2996
2023-12-04 22:38:33,516 - INFO - Epoch(train)[24/40][60/79]lr: 9.8632e-04  eta: 0:27:27  time: 77.0689  inter_cls_loss: 0.0285 inner_cls_loss: 2.2036
2023-12-04 22:38:56,590 - INFO - Epoch(test) test/all:
2023-12-04 22:39:22,153 - INFO - Epoch(test) : [20/32]
2023-12-04 22:39:44,387 - INFO - Metrics for ship: Accuracy: 0.9832, Precision: 0.7154, Recall: 0.8754, F1_score: 0.7874, Average_Precision: 0.8691
2023-12-04 22:39:44,463 - INFO - Epoch(test) test/offshore:
2023-12-04 22:40:09,543 - INFO - Epoch(test) : [20/29]
2023-12-04 22:40:26,583 - INFO - Metrics for ship: Accuracy: 0.9867, Precision: 0.7531, Recall: 0.9132, F1_score: 0.8254, Average_Precision: 0.8997
2023-12-04 22:40:26,617 - INFO - Epoch(test) test/inshore:
2023-12-04 22:40:35,273 - INFO - Metrics for ship: Accuracy: 0.9475, Precision: 0.4334, Recall: 0.6452, F1_score: 0.5185, Average_Precision: 0.5268
2023-12-04 22:40:40,316 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:41:07,206 - INFO - Epoch(train)[25/40][20/79]lr: 9.7577e-04  eta: 0:27:52  time: 26.8890  inter_cls_loss: 0.0289 inner_cls_loss: 2.0821
2023-12-04 22:41:30,927 - INFO - Epoch(train)[25/40][40/79]lr: 9.7577e-04  eta: 0:25:48  time: 50.6105  inter_cls_loss: 0.0355 inner_cls_loss: 2.1004
2023-12-04 22:41:54,791 - INFO - Epoch(train)[25/40][60/79]lr: 9.7577e-04  eta: 0:24:54  time: 74.4742  inter_cls_loss: 0.0355 inner_cls_loss: 2.0314
2023-12-04 22:42:16,951 - INFO - Epoch(test) test/all:
2023-12-04 22:42:42,411 - INFO - Epoch(test) : [20/32]
2023-12-04 22:43:03,930 - INFO - Metrics for ship: Accuracy: 0.9839, Precision: 0.8808, Recall: 0.6308, F1_score: 0.7351, Average_Precision: 0.8678
2023-12-04 22:43:03,977 - INFO - Epoch(test) test/offshore:
2023-12-04 22:43:28,918 - INFO - Epoch(test) : [20/29]
2023-12-04 22:43:46,303 - INFO - Metrics for ship: Accuracy: 0.9863, Precision: 0.8927, Recall: 0.6855, F1_score: 0.7755, Average_Precision: 0.8994
2023-12-04 22:43:46,326 - INFO - Epoch(test) test/inshore:
2023-12-04 22:43:54,952 - INFO - Metrics for ship: Accuracy: 0.9631, Precision: 0.6634, Recall: 0.3227, F1_score: 0.4342, Average_Precision: 0.5378
2023-12-04 22:43:58,726 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:44:25,893 - INFO - Epoch(train)[26/40][20/79]lr: 9.6232e-04  eta: 0:26:22  time: 27.1665  inter_cls_loss: 0.0210 inner_cls_loss: 1.7045
2023-12-04 22:44:49,107 - INFO - Epoch(train)[26/40][40/79]lr: 9.6232e-04  eta: 0:24:2  time: 50.3808  inter_cls_loss: 0.0248 inner_cls_loss: 1.7103
2023-12-04 22:45:13,116 - INFO - Epoch(train)[26/40][60/79]lr: 9.6232e-04  eta: 0:23:14  time: 74.3904  inter_cls_loss: 0.0393 inner_cls_loss: 1.8421
2023-12-04 22:45:35,225 - INFO - Epoch(test) test/all:
2023-12-04 22:46:00,949 - INFO - Epoch(test) : [20/32]
2023-12-04 22:46:22,611 - INFO - Metrics for ship: Accuracy: 0.9847, Precision: 0.8552, Recall: 0.6844, F1_score: 0.7603, Average_Precision: 0.8670
2023-12-04 22:46:22,669 - INFO - Epoch(test) test/offshore:
2023-12-04 22:46:47,558 - INFO - Epoch(test) : [20/29]
2023-12-04 22:47:04,472 - INFO - Metrics for ship: Accuracy: 0.9873, Precision: 0.8784, Recall: 0.7334, F1_score: 0.7994, Average_Precision: 0.9018
2023-12-04 22:47:04,505 - INFO - Epoch(test) test/inshore:
2023-12-04 22:47:13,257 - INFO - Metrics for ship: Accuracy: 0.9623, Precision: 0.6116, Recall: 0.3850, F1_score: 0.4725, Average_Precision: 0.5305
2023-12-04 22:47:17,873 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:47:44,487 - INFO - Epoch(train)[27/40][20/79]lr: 9.4605e-04  eta: 0:24:5  time: 26.6140  inter_cls_loss: 0.0242 inner_cls_loss: 1.5160
2023-12-04 22:48:09,052 - INFO - Epoch(train)[27/40][40/79]lr: 9.4605e-04  eta: 0:22:43  time: 51.1788  inter_cls_loss: 0.0309 inner_cls_loss: 1.5706
2023-12-04 22:48:32,369 - INFO - Epoch(train)[27/40][60/79]lr: 9.4605e-04  eta: 0:21:38  time: 74.4957  inter_cls_loss: 0.0212 inner_cls_loss: 1.4108
2023-12-04 22:48:54,146 - INFO - Epoch(test) test/all:
2023-12-04 22:49:19,478 - INFO - Epoch(test) : [20/32]
2023-12-04 22:49:41,237 - INFO - Metrics for ship: Accuracy: 0.9847, Precision: 0.8719, Recall: 0.6670, F1_score: 0.7558, Average_Precision: 0.8737
2023-12-04 22:49:41,288 - INFO - Epoch(test) test/offshore:
2023-12-04 22:50:07,229 - INFO - Epoch(test) : [20/29]
2023-12-04 22:50:24,757 - INFO - Metrics for ship: Accuracy: 0.9871, Precision: 0.8838, Recall: 0.7213, F1_score: 0.7943, Average_Precision: 0.9037
2023-12-04 22:50:24,783 - INFO - Epoch(test) test/inshore:
2023-12-04 22:50:33,882 - INFO - Metrics for ship: Accuracy: 0.9635, Precision: 0.6529, Recall: 0.3570, F1_score: 0.4616, Average_Precision: 0.5438
2023-12-04 22:50:37,842 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:50:37,903 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 09b49b799d3e0df2555462a9df811762, with test/inshore image AP 0.5438
2023-12-04 22:51:05,869 - INFO - Epoch(train)[28/40][20/79]lr: 9.2706e-04  eta: 0:23:28  time: 27.9653  inter_cls_loss: 0.0246 inner_cls_loss: 1.3456
2023-12-04 22:51:30,153 - INFO - Epoch(train)[28/40][40/79]lr: 9.2706e-04  eta: 0:21:29  time: 52.2497  inter_cls_loss: 0.0239 inner_cls_loss: 1.3088
2023-12-04 22:51:54,505 - INFO - Epoch(train)[28/40][60/79]lr: 9.2706e-04  eta: 0:20:34  time: 76.6017  inter_cls_loss: 0.0246 inner_cls_loss: 1.2833
2023-12-04 22:52:16,358 - INFO - Epoch(test) test/all:
2023-12-04 22:52:41,803 - INFO - Epoch(test) : [20/32]
2023-12-04 22:53:03,437 - INFO - Metrics for ship: Accuracy: 0.9848, Precision: 0.8713, Recall: 0.6719, F1_score: 0.7587, Average_Precision: 0.8730
2023-12-04 22:53:03,507 - INFO - Epoch(test) test/offshore:
2023-12-04 22:53:28,583 - INFO - Epoch(test) : [20/29]
2023-12-04 22:53:45,189 - INFO - Metrics for ship: Accuracy: 0.9871, Precision: 0.8833, Recall: 0.7227, F1_score: 0.7949, Average_Precision: 0.9035
2023-12-04 22:53:45,220 - INFO - Epoch(test) test/inshore:
2023-12-04 22:53:53,924 - INFO - Metrics for ship: Accuracy: 0.9630, Precision: 0.6299, Recall: 0.3772, F1_score: 0.4719, Average_Precision: 0.5354
2023-12-04 22:53:58,074 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:54:25,308 - INFO - Epoch(train)[29/40][20/79]lr: 9.0546e-04  eta: 0:21:3  time: 27.2332  inter_cls_loss: 0.0248 inner_cls_loss: 1.1818
2023-12-04 22:54:48,891 - INFO - Epoch(train)[29/40][40/79]lr: 9.0546e-04  eta: 0:19:13  time: 50.8168  inter_cls_loss: 0.0330 inner_cls_loss: 1.2669
2023-12-04 22:55:12,788 - INFO - Epoch(train)[29/40][60/79]lr: 9.0546e-04  eta: 0:18:25  time: 74.7130  inter_cls_loss: 0.0364 inner_cls_loss: 1.2430
2023-12-04 22:55:34,497 - INFO - Epoch(test) test/all:
2023-12-04 22:56:00,182 - INFO - Epoch(test) : [20/32]
2023-12-04 22:56:21,711 - INFO - Metrics for ship: Accuracy: 0.9854, Precision: 0.8499, Recall: 0.7160, F1_score: 0.7772, Average_Precision: 0.8742
2023-12-04 22:56:21,763 - INFO - Epoch(test) test/offshore:
2023-12-04 22:56:46,976 - INFO - Epoch(test) : [20/29]
2023-12-04 22:57:04,296 - INFO - Metrics for ship: Accuracy: 0.9881, Precision: 0.8685, Recall: 0.7707, F1_score: 0.8167, Average_Precision: 0.9072
2023-12-04 22:57:04,330 - INFO - Epoch(test) test/inshore:
2023-12-04 22:57:12,980 - INFO - Metrics for ship: Accuracy: 0.9617, Precision: 0.5924, Recall: 0.4043, F1_score: 0.4806, Average_Precision: 0.5248
2023-12-04 22:57:17,351 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 22:57:44,679 - INFO - Epoch(train)[30/40][20/79]lr: 8.8140e-04  eta: 0:19:20  time: 27.3274  inter_cls_loss: 0.0269 inner_cls_loss: 1.0753
2023-12-04 22:58:09,457 - INFO - Epoch(train)[30/40][40/79]lr: 8.8140e-04  eta: 0:17:59  time: 52.1060  inter_cls_loss: 0.0353 inner_cls_loss: 1.1208
2023-12-04 22:58:32,096 - INFO - Epoch(train)[30/40][60/79]lr: 8.8140e-04  eta: 0:16:47  time: 74.7441  inter_cls_loss: 0.0411 inner_cls_loss: 1.1719
2023-12-04 22:58:54,557 - INFO - Epoch(test) test/all:
2023-12-04 22:59:20,100 - INFO - Epoch(test) : [20/32]
2023-12-04 22:59:41,693 - INFO - Metrics for ship: Accuracy: 0.9848, Precision: 0.8540, Recall: 0.6891, F1_score: 0.7628, Average_Precision: 0.8677
2023-12-04 22:59:41,739 - INFO - Epoch(test) test/offshore:
2023-12-04 23:00:06,847 - INFO - Epoch(test) : [20/29]
2023-12-04 23:00:23,737 - INFO - Metrics for ship: Accuracy: 0.9875, Precision: 0.8727, Recall: 0.7462, F1_score: 0.8045, Average_Precision: 0.9025
2023-12-04 23:00:23,758 - INFO - Epoch(test) test/inshore:
2023-12-04 23:00:32,542 - INFO - Metrics for ship: Accuracy: 0.9622, Precision: 0.6201, Recall: 0.3556, F1_score: 0.4520, Average_Precision: 0.5256
2023-12-04 23:00:36,034 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:01:02,545 - INFO - Epoch(train)[31/40][20/79]lr: 8.5502e-04  eta: 0:16:58  time: 26.4561  inter_cls_loss: 0.0269 inner_cls_loss: 0.9674
2023-12-04 23:01:26,233 - INFO - Epoch(train)[31/40][40/79]lr: 8.5502e-04  eta: 0:15:40  time: 50.1447  inter_cls_loss: 0.0252 inner_cls_loss: 0.9066
2023-12-04 23:01:50,042 - INFO - Epoch(train)[31/40][60/79]lr: 8.5502e-04  eta: 0:14:59  time: 73.9535  inter_cls_loss: 0.0392 inner_cls_loss: 1.0344
2023-12-04 23:02:12,396 - INFO - Epoch(test) test/all:
2023-12-04 23:02:38,275 - INFO - Epoch(test) : [20/32]
2023-12-04 23:03:00,567 - INFO - Metrics for ship: Accuracy: 0.9858, Precision: 0.8144, Recall: 0.7768, F1_score: 0.7952, Average_Precision: 0.8773
2023-12-04 23:03:00,621 - INFO - Epoch(test) test/offshore:
2023-12-04 23:03:26,508 - INFO - Epoch(test) : [20/29]
2023-12-04 23:03:43,756 - INFO - Metrics for ship: Accuracy: 0.9886, Precision: 0.8405, Recall: 0.8254, F1_score: 0.8329, Average_Precision: 0.9091
2023-12-04 23:03:43,781 - INFO - Epoch(test) test/inshore:
2023-12-04 23:03:52,745 - INFO - Metrics for ship: Accuracy: 0.9600, Precision: 0.5477, Recall: 0.4989, F1_score: 0.5222, Average_Precision: 0.5387
2023-12-04 23:03:56,781 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:04:25,776 - INFO - Epoch(train)[32/40][20/79]lr: 8.2648e-04  eta: 0:16:41  time: 28.9952  inter_cls_loss: 0.0278 inner_cls_loss: 0.8709
2023-12-04 23:04:49,128 - INFO - Epoch(train)[32/40][40/79]lr: 8.2648e-04  eta: 0:14:38  time: 52.3472  inter_cls_loss: 0.0290 inner_cls_loss: 0.8552
2023-12-04 23:05:12,831 - INFO - Epoch(train)[32/40][60/79]lr: 8.2648e-04  eta: 0:13:45  time: 76.0494  inter_cls_loss: 0.0223 inner_cls_loss: 0.7850
2023-12-04 23:05:36,650 - INFO - Epoch(test) test/all:
2023-12-04 23:06:02,880 - INFO - Epoch(test) : [20/32]
2023-12-04 23:06:23,432 - INFO - Metrics for ship: Accuracy: 0.9854, Precision: 0.7768, Recall: 0.8279, F1_score: 0.8015, Average_Precision: 0.8745
2023-12-04 23:06:23,490 - INFO - Epoch(test) test/offshore:
2023-12-04 23:06:49,627 - INFO - Epoch(test) : [20/29]
2023-12-04 23:07:07,314 - INFO - Metrics for ship: Accuracy: 0.9885, Precision: 0.8080, Recall: 0.8747, F1_score: 0.8400, Average_Precision: 0.9067
2023-12-04 23:07:07,338 - INFO - Epoch(test) test/inshore:
2023-12-04 23:07:16,137 - INFO - Metrics for ship: Accuracy: 0.9575, Precision: 0.5152, Recall: 0.5338, F1_score: 0.5243, Average_Precision: 0.5308
2023-12-04 23:07:19,942 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:07:46,711 - INFO - Epoch(train)[33/40][20/79]lr: 7.9595e-04  eta: 0:13:39  time: 26.7690  inter_cls_loss: 0.0318 inner_cls_loss: 0.8129
2023-12-04 23:08:11,622 - INFO - Epoch(train)[33/40][40/79]lr: 7.9595e-04  eta: 0:12:44  time: 51.6796  inter_cls_loss: 0.0182 inner_cls_loss: 0.6752
2023-12-04 23:08:37,174 - INFO - Epoch(train)[33/40][60/79]lr: 7.9595e-04  eta: 0:12:16  time: 77.2313  inter_cls_loss: 0.0307 inner_cls_loss: 0.7712
2023-12-04 23:09:02,046 - INFO - Epoch(test) test/all:
2023-12-04 23:09:28,339 - INFO - Epoch(test) : [20/32]
2023-12-04 23:09:50,351 - INFO - Metrics for ship: Accuracy: 0.9853, Precision: 0.7689, Recall: 0.8367, F1_score: 0.8014, Average_Precision: 0.8759
2023-12-04 23:09:50,414 - INFO - Epoch(test) test/offshore:
2023-12-04 23:10:16,072 - INFO - Epoch(test) : [20/29]
2023-12-04 23:10:32,906 - INFO - Metrics for ship: Accuracy: 0.9883, Precision: 0.8007, Recall: 0.8791, F1_score: 0.8381, Average_Precision: 0.9065
2023-12-04 23:10:32,955 - INFO - Epoch(test) test/inshore:
2023-12-04 23:10:41,643 - INFO - Metrics for ship: Accuracy: 0.9580, Precision: 0.5186, Recall: 0.5490, F1_score: 0.5334, Average_Precision: 0.5411
2023-12-04 23:10:46,841 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:11:13,904 - INFO - Epoch(train)[34/40][20/79]lr: 7.6364e-04  eta: 0:12:1  time: 27.0632  inter_cls_loss: 0.0338 inner_cls_loss: 0.7435
2023-12-04 23:11:37,774 - INFO - Epoch(train)[34/40][40/79]lr: 7.6364e-04  eta: 0:10:53  time: 50.9328  inter_cls_loss: 0.0258 inner_cls_loss: 0.6727
2023-12-04 23:12:01,190 - INFO - Epoch(train)[34/40][60/79]lr: 7.6364e-04  eta: 0:10:10  time: 74.3492  inter_cls_loss: 0.0203 inner_cls_loss: 0.6114
2023-12-04 23:12:23,676 - INFO - Epoch(test) test/all:
2023-12-04 23:12:49,484 - INFO - Epoch(test) : [20/32]
2023-12-04 23:13:09,788 - INFO - Metrics for ship: Accuracy: 0.9860, Precision: 0.8387, Recall: 0.7500, F1_score: 0.7919, Average_Precision: 0.8813
2023-12-04 23:13:09,845 - INFO - Epoch(test) test/offshore:
2023-12-04 23:13:34,732 - INFO - Epoch(test) : [20/29]
2023-12-04 23:13:51,076 - INFO - Metrics for ship: Accuracy: 0.9885, Precision: 0.8536, Recall: 0.8066, F1_score: 0.8294, Average_Precision: 0.9103
2023-12-04 23:13:51,100 - INFO - Epoch(test) test/inshore:
2023-12-04 23:13:59,590 - INFO - Metrics for ship: Accuracy: 0.9636, Precision: 0.6318, Recall: 0.4116, F1_score: 0.4984, Average_Precision: 0.5577
2023-12-04 23:14:03,380 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:14:03,442 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 d0ca5f2f8c6b6a6e2b40d8261821eef3, with test/inshore image AP 0.5577
2023-12-04 23:14:30,091 - INFO - Epoch(train)[35/40][20/79]lr: 7.2973e-04  eta: 0:10:4  time: 26.6486  inter_cls_loss: 0.0232 inner_cls_loss: 0.6013
2023-12-04 23:14:53,929 - INFO - Epoch(train)[35/40][40/79]lr: 7.2973e-04  eta: 0:9:7  time: 50.4861  inter_cls_loss: 0.0207 inner_cls_loss: 0.5612
2023-12-04 23:15:17,084 - INFO - Epoch(train)[35/40][60/79]lr: 7.2973e-04  eta: 0:8:28  time: 73.6418  inter_cls_loss: 0.0343 inner_cls_loss: 0.6506
2023-12-04 23:15:38,347 - INFO - Epoch(test) test/all:
2023-12-04 23:16:04,119 - INFO - Epoch(test) : [20/32]
2023-12-04 23:16:24,654 - INFO - Metrics for ship: Accuracy: 0.9860, Precision: 0.8026, Recall: 0.8042, F1_score: 0.8034, Average_Precision: 0.8817
2023-12-04 23:16:24,714 - INFO - Epoch(test) test/offshore:
2023-12-04 23:16:49,937 - INFO - Epoch(test) : [20/29]
2023-12-04 23:17:06,810 - INFO - Metrics for ship: Accuracy: 0.9886, Precision: 0.8197, Recall: 0.8583, F1_score: 0.8386, Average_Precision: 0.9090
2023-12-04 23:17:06,841 - INFO - Epoch(test) test/inshore:
2023-12-04 23:17:15,322 - INFO - Metrics for ship: Accuracy: 0.9625, Precision: 0.5850, Recall: 0.4925, F1_score: 0.5348, Average_Precision: 0.5671
2023-12-04 23:17:19,864 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:17:19,922 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 2ca348e0cb895dbcbbc3bd3281a3df08, with test/inshore image AP 0.5671
2023-12-04 23:17:45,967 - INFO - Epoch(train)[36/40][20/79]lr: 6.9443e-04  eta: 0:8:8  time: 26.0445  inter_cls_loss: 0.0210 inner_cls_loss: 0.5252
2023-12-04 23:18:09,614 - INFO - Epoch(train)[36/40][40/79]lr: 6.9443e-04  eta: 0:7:21  time: 49.6918  inter_cls_loss: 0.0170 inner_cls_loss: 0.4820
2023-12-04 23:18:32,892 - INFO - Epoch(train)[36/40][60/79]lr: 6.9443e-04  eta: 0:6:47  time: 72.9698  inter_cls_loss: 0.0200 inner_cls_loss: 0.4899
2023-12-04 23:18:55,064 - INFO - Epoch(test) test/all:
2023-12-04 23:19:20,710 - INFO - Epoch(test) : [20/32]
2023-12-04 23:19:41,334 - INFO - Metrics for ship: Accuracy: 0.9852, Precision: 0.8719, Recall: 0.6851, F1_score: 0.7673, Average_Precision: 0.8812
2023-12-04 23:19:41,389 - INFO - Epoch(test) test/offshore:
2023-12-04 23:20:06,461 - INFO - Epoch(test) : [20/29]
2023-12-04 23:20:22,773 - INFO - Metrics for ship: Accuracy: 0.9877, Precision: 0.8834, Recall: 0.7421, F1_score: 0.8066, Average_Precision: 0.9101
2023-12-04 23:20:22,801 - INFO - Epoch(test) test/inshore:
2023-12-04 23:20:31,404 - INFO - Metrics for ship: Accuracy: 0.9641, Precision: 0.6636, Recall: 0.3654, F1_score: 0.4712, Average_Precision: 0.5641
2023-12-04 23:20:35,323 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:21:02,684 - INFO - Epoch(train)[37/40][20/79]lr: 6.5796e-04  eta: 0:6:44  time: 27.3613  inter_cls_loss: 0.0241 inner_cls_loss: 0.4953
2023-12-04 23:21:26,719 - INFO - Epoch(train)[37/40][40/79]lr: 6.5796e-04  eta: 0:5:54  time: 51.3962  inter_cls_loss: 0.0370 inner_cls_loss: 0.5813
2023-12-04 23:21:49,516 - INFO - Epoch(train)[37/40][60/79]lr: 6.5796e-04  eta: 0:5:16  time: 74.1927  inter_cls_loss: 0.0188 inner_cls_loss: 0.4546
2023-12-04 23:22:11,433 - INFO - Epoch(test) test/all:
2023-12-04 23:22:37,266 - INFO - Epoch(test) : [20/32]
2023-12-04 23:22:58,179 - INFO - Metrics for ship: Accuracy: 0.9861, Precision: 0.7990, Recall: 0.8138, F1_score: 0.8063, Average_Precision: 0.8813
2023-12-04 23:22:58,260 - INFO - Epoch(test) test/offshore:
2023-12-04 23:23:23,914 - INFO - Epoch(test) : [20/29]
2023-12-04 23:23:40,082 - INFO - Metrics for ship: Accuracy: 0.9886, Precision: 0.8151, Recall: 0.8648, F1_score: 0.8392, Average_Precision: 0.9083
2023-12-04 23:23:40,126 - INFO - Epoch(test) test/inshore:
2023-12-04 23:23:48,698 - INFO - Metrics for ship: Accuracy: 0.9616, Precision: 0.5683, Recall: 0.5193, F1_score: 0.5427, Average_Precision: 0.5656
2023-12-04 23:23:54,774 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:24:21,764 - INFO - Epoch(train)[38/40][20/79]lr: 6.2056e-04  eta: 0:4:52  time: 26.9896  inter_cls_loss: 0.0173 inner_cls_loss: 0.4145
2023-12-04 23:24:46,044 - INFO - Epoch(train)[38/40][40/79]lr: 6.2056e-04  eta: 0:4:12  time: 51.2690  inter_cls_loss: 0.0261 inner_cls_loss: 0.4621
2023-12-04 23:25:09,514 - INFO - Epoch(train)[38/40][60/79]lr: 6.2056e-04  eta: 0:3:40  time: 74.7396  inter_cls_loss: 0.0281 inner_cls_loss: 0.4716
2023-12-04 23:25:31,453 - INFO - Epoch(test) test/all:
2023-12-04 23:25:57,198 - INFO - Epoch(test) : [20/32]
2023-12-04 23:26:17,847 - INFO - Metrics for ship: Accuracy: 0.9862, Precision: 0.8298, Recall: 0.7681, F1_score: 0.7977, Average_Precision: 0.8822
2023-12-04 23:26:17,896 - INFO - Epoch(test) test/offshore:
2023-12-04 23:26:43,058 - INFO - Epoch(test) : [20/29]
2023-12-04 23:26:59,401 - INFO - Metrics for ship: Accuracy: 0.9887, Precision: 0.8479, Recall: 0.8207, F1_score: 0.8341, Average_Precision: 0.9115
2023-12-04 23:26:59,429 - INFO - Epoch(test) test/inshore:
2023-12-04 23:27:07,975 - INFO - Metrics for ship: Accuracy: 0.9627, Precision: 0.5991, Recall: 0.4550, F1_score: 0.5172, Average_Precision: 0.5592
2023-12-04 23:27:12,194 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:27:39,524 - INFO - Epoch(train)[39/40][20/79]lr: 5.8244e-04  eta: 0:3:8  time: 27.3296  inter_cls_loss: 0.0190 inner_cls_loss: 0.3942
2023-12-04 23:28:02,969 - INFO - Epoch(train)[39/40][40/79]lr: 5.8244e-04  eta: 0:2:29  time: 50.7747  inter_cls_loss: 0.0226 inner_cls_loss: 0.4004
2023-12-04 23:28:26,471 - INFO - Epoch(train)[39/40][60/79]lr: 5.8244e-04  eta: 0:2:1  time: 74.2767  inter_cls_loss: 0.0180 inner_cls_loss: 0.3659
2023-12-04 23:28:49,342 - INFO - Epoch(test) test/all:
2023-12-04 23:29:15,387 - INFO - Epoch(test) : [20/32]
2023-12-04 23:29:35,912 - INFO - Metrics for ship: Accuracy: 0.9859, Precision: 0.7907, Recall: 0.8205, F1_score: 0.8053, Average_Precision: 0.8808
2023-12-04 23:29:35,972 - INFO - Epoch(test) test/offshore:
2023-12-04 23:30:01,534 - INFO - Epoch(test) : [20/29]
2023-12-04 23:30:17,586 - INFO - Metrics for ship: Accuracy: 0.9885, Precision: 0.8104, Recall: 0.8686, F1_score: 0.8385, Average_Precision: 0.9088
2023-12-04 23:30:17,614 - INFO - Epoch(test) test/inshore:
2023-12-04 23:30:26,046 - INFO - Metrics for ship: Accuracy: 0.9609, Precision: 0.5564, Recall: 0.5241, F1_score: 0.5398, Average_Precision: 0.5622
2023-12-04 23:30:30,386 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:30:57,696 - INFO - Epoch(train)[40/40][20/79]lr: 5.4384e-04  eta: 0:1:20  time: 27.3099  inter_cls_loss: 0.0171 inner_cls_loss: 0.3388
2023-12-04 23:31:21,138 - INFO - Epoch(train)[40/40][40/79]lr: 5.4384e-04  eta: 0:0:49  time: 50.7512  inter_cls_loss: 0.0181 inner_cls_loss: 0.3442
2023-12-04 23:31:44,111 - INFO - Epoch(train)[40/40][60/79]lr: 5.4384e-04  eta: 0:0:23  time: 73.7244  inter_cls_loss: 0.0155 inner_cls_loss: 0.3168
2023-12-04 23:32:06,932 - INFO - Epoch(test) test/all:
2023-12-04 23:32:33,060 - INFO - Epoch(test) : [20/32]
2023-12-04 23:32:53,779 - INFO - Metrics for ship: Accuracy: 0.9863, Precision: 0.8323, Recall: 0.7685, F1_score: 0.7992, Average_Precision: 0.8825
2023-12-04 23:32:53,849 - INFO - Epoch(test) test/offshore:
2023-12-04 23:33:18,900 - INFO - Epoch(test) : [20/29]
2023-12-04 23:33:35,169 - INFO - Metrics for ship: Accuracy: 0.9887, Precision: 0.8475, Recall: 0.8195, F1_score: 0.8332, Average_Precision: 0.9097
2023-12-04 23:33:35,200 - INFO - Epoch(test) test/inshore:
2023-12-04 23:33:43,731 - INFO - Metrics for ship: Accuracy: 0.9635, Precision: 0.6067, Recall: 0.4723, F1_score: 0.5311, Average_Precision: 0.5716
2023-12-04 23:33:48,501 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_train.png:
2023-12-04 23:33:48,559 - INFO - Best model saved to  work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 1b19fa0f9373033caf6fbce412bbb143, with test/inshore image AP 0.5716
2023-12-04 23:33:48,573 - INFO - Last model saved :work_dirs/rsdd_ORB+Boost-B-attlay3_100_last_model_weight.pth
2023-12-04 23:33:48,641 - INFO - model weights saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 1b19fa0f9373033caf6fbce412bbb143!
2023-12-04 23:33:48,673 - INFO - model weights loaded from work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch.pth with MD5 1b19fa0f9373033caf6fbce412bbb143!
2023-12-04 23:33:48,674 - INFO - Epoch(test) test/all:
2023-12-04 23:34:14,849 - INFO - Epoch(test) : [20/32]
2023-12-04 23:34:35,301 - INFO - Metrics for ship: Accuracy: 0.9863, Precision: 0.8320, Recall: 0.7686, F1_score: 0.7990, Average_Precision: 0.8825
2023-12-04 23:34:35,357 - INFO - Epoch(test) test/offshore:
2023-12-04 23:35:00,717 - INFO - Epoch(test) : [20/29]
2023-12-04 23:35:17,181 - INFO - Metrics for ship: Accuracy: 0.9887, Precision: 0.8467, Recall: 0.8204, F1_score: 0.8333, Average_Precision: 0.9096
2023-12-04 23:35:17,225 - INFO - Epoch(test) test/inshore:
2023-12-04 23:35:25,907 - INFO - Metrics for ship: Accuracy: 0.9635, Precision: 0.6067, Recall: 0.4769, F1_score: 0.5340, Average_Precision: 0.5743
2023-12-04 23:35:30,672 - INFO - PR_curve has been saved to work_dirs/rsdd_ORB+Boost-B-attlay3_100_bs64_best_model_weights_scratch_PR_curve_eval_1b19f.png!
