nohup: ignoring input
Namespace(batch_size=128, checkpoint='', descriptor='SIFT+Boost-B-attlay9', eval_interval=5, expand_piexl=5, lr=0.001, multiprocessing_context=None, num_epochs=100, num_workers=4, print_interval=5, random_seed=0, save_interval=10, save_path='work_dirs/$des\\_best_model_weights_scratch_decay.pth', test=False, test_image='', test_threshold=None, test_threshold_mul=1, train_ratio=1.0, warmup_step=20)
>>> device: cuda!
>>> {'descriptor_dim': 128, 'keypoint_encoder': [32, 64, 128, 128], 'Attentional_layers': 9, 'last_activation': 'tanh', 'l2_normalization': False, 'output_dim': 256, 'keypoint_dim': 4, 'descriptor_encoder': [256, 128]}
from torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, LinearLR, MultiStepLR, ChainedScheduler
from extract_features import normalize_keypoints, extractor_build, extract_img_feature
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, average_precision_score, precision_recall_curve
from FeatureBooster.featurebooster import FeatureBooster, MLP
from mmengine.analysis import get_model_complexity_info
from torch.utils.data import DataLoader, Dataset
from torch.nn.utils.rnn import pad_sequence
from torch.nn.utils import clip_grad_norm_
from mmdet.models.losses import FocalLoss
from mmengine.dataset import Compose
from sklearn.cluster import DBSCAN
import multiprocessing as mp
from os import path as osp
from pathlib import Path
from torch import nn
import numpy as np
import matplotlib
matplotlib.use('Agg')  # 设置Agg为后端
import matplotlib.pyplot as plt
import warnings
import argparse
import shutil
import hashlib
import random
import torch
import time
import glob
import yaml
import cv2
import os
warnings.filterwarnings('ignore')

def parse_arguments():
    parser = argparse.ArgumentParser(description="Extract feature and refine descriptor using neural network to find ship keypoint.")
    
    parser.add_argument(
        '--descriptor', type=str, default='SuperPoint+Boost-B',
        help='descriptor to extract' )
    
    parser.add_argument(
        '--num_epochs', type=int, default=100,)
    
    parser.add_argument(
        '--train_ratio', type=float, default=1.0,
        help='The ratio of data used for training out of the training set' )    

    parser.add_argument(
        '--batch_size', type=int, default=128,)
    
    parser.add_argument(
        '--num_workers', type=int, default=4,)

    parser.add_argument(
        '--print_interval', type=int, default=5,)

    parser.add_argument(
        '--eval_interval', type=int, default=5,)
    
    parser.add_argument(
        '--save_interval', type=int, default=10,)

    parser.add_argument(
        '--lr', type=float, default=1e-3,)

    parser.add_argument(
        '--warmup_step', type=int, default=20,)

    parser.add_argument(
        '--random_seed', type=int, default=0,)

    parser.add_argument(
        '--expand_piexl', type=int, default=5,)

    parser.add_argument(
        '--test_threshold_mul', type=float, default=1,)
    
    parser.add_argument(
        '--test_threshold', type=float, default=None,)
           
    parser.add_argument(
        '--test_image', type=str, default='' ,)
    
    parser.add_argument(
        '--test', action='store_true',)
    
    parser.add_argument(
        '--save_path', type=str, default='',)
    
    parser.add_argument(
        '--checkpoint', type=str, default='',)

    parser.add_argument(
        '--multiprocessing_context', type=str, default=None,)
        
    args = parser.parse_args()
    return args

def calculate_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        # 以块的方式读取文件，以防文件太大
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

# 定义舰船目标关键点检测模型（示例）
class ShipKeyPointsModel(nn.Module):
    def __init__(self, descriptor, device='cpu', pretrained =''):
        super().__init__() 
        self.device = device       
        # load json config file
        config_file = Path(__file__).parent / "config.yaml"
        with open(str(config_file), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[descriptor]
        self.k = nn.Parameter(torch.tensor(1.0))
        # Model
        self.feature_booster = FeatureBooster(self.config)
        # load the model
        if os.path.isfile(pretrained):
            self.feature_booster.load_state_dict(torch.load(pretrained))
            print(f">>> feature_booster weights loaded from {pretrained}!")
        self.fc_out = MLP([self.config['output_dim'], self.config['output_dim']//2,1])
        self.fc_thed = MLP([self.config['output_dim'], self.config['output_dim']//2,1])
        self.to(self.device)
        
    def forward(self, x):
        x = self.feature_booster(x[...,self.config['keypoint_dim']:], x[...,:self.config['keypoint_dim']])
        x = (self.fc_out(x)-self.fc_thed(torch.mean(x,dim=-2,keepdim=True))).squeeze(-1)
        return torch.sigmoid(self.k* x)
    
# 定义数据集（示例）
class ShipKeyPointsDataset(Dataset):
    def __init__(self, data_root, descriptor, expand_piexl = 5, pipeline = [], img_suffix = 'png', debug = False, device = torch.device('cpu'), **kwargs):
        super(ShipKeyPointsDataset, self).__init__()
        self.transform = Compose(pipeline)  
        self.expand_piexl = expand_piexl
        self.debug = debug
        self.img_suffix = img_suffix
        self.descriptor = descriptor
        self.device = device
        config_file = Path(__file__).parent / "config.yaml"
        with open(str(config_file), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[descriptor]
        self.extractor = extractor_build(self.descriptor, device = self.device)
        if 'ann_file' in kwargs and kwargs['ann_file'] !='': 
            # train case  
            ann_dir = kwargs['ann_file']
            if isinstance(ann_dir, str):
                ann_dir = [ann_dir]
        else:
            ann_dir = []
        self.txt_files = []
        for path in ann_dir:
            self.txt_files.extend(glob.glob(osp.join(data_root, path, "**/*.txt"), recursive=True))

        if 'train_ratio' in kwargs:
            self.txt_files = random.sample(self.txt_files, int(np.ceil(len(self.txt_files)*kwargs['train_ratio'])))

    def __len__(self):
        return len(self.txt_files)

    def load_data_info(self, idx):
        data_info = {}
        txt_file = self.txt_files[idx]
        img_id = osp.split(txt_file)[1][:-4]
        data_info['img_id'] = img_id
        img_name = img_id + f'.{self.img_suffix}'
        data_info['file_name'] = img_name
        
        img_path = txt_file.replace('.txt','.png').replace('labelTxt','images')
        data_info['img_path'] = img_path
        
        instances = []
        with open(txt_file) as f:
            s = f.readlines()
            for si in s:
                instance = {}
                bbox_info = si.split()
                instance['bbox_label'] = 0                       
                instance['ignore_flag'] = 0
                instance['bbox'] = [float(i) for i in bbox_info[:8]]
                instances.append(instance)
        data_info['instances'] = instances
        return data_info
                
    def __getitem__(self, idx):
        data_info = self.load_data_info(idx)
        bboxes = []
        if len(self.transform.transforms):       
            data = self.transform(data_info)
            image = data['inputs'].cpu().numpy().transpose(1, 2, 0)
            box = data['data_samples'].gt_instances.bboxes.tensor
            for box_id in range(box.shape[0]):
                instances = box[box_id]
                bboxes.append(np.array([(instances[i], instances[i + 1]) for i in range(0, len(instances), 2)], dtype=np.int32)) 
            del data
        else:
            image = cv2.cvtColor(cv2.imread(data_info['img_path']), cv2.COLOR_BGR2RGB)
            for instances in data_info['instances']:
               bboxes.append(np.array([(instances['bbox'][i], instances['bbox'][i + 1]) for i in range(0, len(instances['bbox']), 2)], dtype=np.int32)) 
        keypoints, descriptors, image = extract_img_feature(self.descriptor, image, self.extractor)    
        if len(keypoints) <= 0:
            print(f">>> {data_info['img_path']} has no keypoint founded with {self.descriptor}")
            return torch.zeros([2, self.config['keypoint_dim'] + self.config['descriptor_dim'] + 2], dtype = torch.float32, requires_grad = False), data_info['img_path']
        else:     
            tmp = np.zeros(image.shape[:2], dtype=np.uint8)
            if len(bboxes) > 0 :
                cv2.fillPoly(tmp, bboxes, 1)
            target = np.array([np.any(tmp[max(0,int(kp[1]-self.expand_piexl)):min(int(kp[1]+self.expand_piexl),image.shape[0]),
                                        max(0,int(kp[0]-self.expand_piexl)):min(int(kp[0]+self.expand_piexl),image.shape[1])]) 
                            for kp in keypoints ]) 
            # visualization
            if self.debug:
                print(f">>> VISUALIZATION: {data_info['img_path']}")
                kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])
                image = cv2.drawKeypoints(image, kps[target], None, color=(255,0,0,)) 
                image = cv2.drawKeypoints(image, kps[~target], None, color=(0,0,255)) 
                image = cv2.polylines(image, bboxes, isClosed=True, color=(0, 255, 0), thickness=2)
                cv2.imwrite('test_2.jpg', cv2.cvtColor(image, cv2.COLOR_RGB2BGR)) 

            # boosted the descriptor using trained model
            keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
            if 'orb' in self.descriptor.lower():
                descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
                descriptors = descriptors * 2.0 - 1.0
            # 最后的全一是为了区分对齐batch的padding数据              
            result = torch.from_numpy(np.concatenate([keypoints, descriptors, target.reshape(-1, 1), np.ones([len(target),1])], axis=-1))  
            result.requires_grad = False                 
            return result, data_info['img_path']

def get_metric(all_labels, all_output, all_thred):
    
    if isinstance(all_output, torch.Tensor):
        if all_output.requires_grad:
            all_output = all_output.detach()
        all_output = all_output.cpu().numpy()    
    if isinstance(all_labels, torch.Tensor):
        all_labels = all_labels.cpu().numpy()
    if isinstance(all_thred, torch.Tensor):
        all_thred = all_thred.cpu().numpy()
        
    all_predict = (all_output>all_thred) 
    all_labels = all_labels   
    all_output = all_output        
    accuracy = accuracy_score(all_labels, all_predict)
    precision = precision_score(all_labels, all_predict)
    recall = recall_score(all_labels, all_predict)
    F1_score = f1_score(all_labels, all_predict)
    AP_score = average_precision_score(all_labels, all_output)
    metric_dict = dict(Accuracy=accuracy, Precision=precision, Recall=recall, F1_score=F1_score, Average_Precision = AP_score)
    metric_str = "Accuracy: {Accuracy:.2f}、Precision: {Precision:.2f}、Recall: {Recall:.2f}、F1-score: {F1_score:.2f}、Average_Precision: {Average_Precision:.2f}".format(**metric_dict)
    print(metric_str)
    precisions, recalls, _ = precision_recall_curve(all_labels, all_output)
    PR_dict = dict(Precision=precisions, Recall=recalls)
    return metric_dict, PR_dict

def test(model, args): 
    model.eval()
    device = model.device
    extractor = extractor_build(args.descriptor)
    keypoints, descriptors, image = extract_img_feature(args.descriptor, cv2.cvtColor(cv2.imread(args.test_image), cv2.COLOR_BGR2RGB), extractor)
            
    boxes = []
    with open(args.test_image.replace('.png','.txt').replace('images','labelTxt'), 'r') as file:
        for line in file:
            coordinates = [float(coord) for coord in line.strip().split()[:8]]
            boxes.append(np.array([(coordinates[i], coordinates[i + 1]) for i in range(0, len(coordinates), 2)], dtype=np.int32))
    tmp = np.zeros(image.shape[:2], dtype=np.uint8)
    if len(boxes) > 0 :
        cv2.fillPoly(tmp, boxes, 1) 
    labels = np.array([np.any(tmp[max(0,int(kp[1]-args.expand_piexl)):min(int(kp[1]+args.expand_piexl),image.shape[0]),
                                max(0,int(kp[0]-args.expand_piexl)):min(int(kp[0]+args.expand_piexl),image.shape[1])]) 
                    for kp in keypoints ]) 
    
    kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])

    # boosted the descriptor using trained model
    keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
    if 'orb' in args.descriptor.lower():
        descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
        descriptors = descriptors * 2.0 - 1.0
    with torch.no_grad():                  
        output = model(torch.from_numpy(np.concatenate([keypoints, descriptors,], axis=-1)).to(device).float()).cpu().numpy()  
    if args.test_threshold is None:
        threshold, _  = cv2.threshold((output * 255).astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)  
        threshold = min(threshold/255.0 * args.test_threshold_mul, 0.95) 
        print(f"Threshold is drived from OTSU algorithm :{threshold}.")   
    else:
        print(f"Threshold is a constant value {args.test_threshold}.") 
        threshold = args.test_threshold
    predict = (output > threshold)

    metric_dict, PR_dict = get_metric(labels, output, threshold)
    
    image = cv2.drawKeypoints(image, kps[predict], None, color=(0, 255, 0),) # 红色 虚警 
    # image = cv2.drawKeypoints(image, kps[(~predict)&(labels)], None, color=(0,0,255)) # Aqua蓝色 漏检 
    # image = cv2.drawKeypoints(image, kps[predict&labels], None, color=(0,0,255,),) # 黄色 正确预测(正样本)
    # image = cv2.drawKeypoints(image, kps[(~predict)&(~labels)], None, color= (0, 255, 0) ) # 绿色 正确预测(负样本)
    # image = cv2.drawKeypoints(image, kps[(label)], None, color=(255,0,0,))
    # image = cv2.drawKeypoints(image, kps[(~label)], None, color=(0,0,255))
    image = cv2.polylines(image, boxes, isClosed=True, color=(255, 255, 0), thickness=2)
    cv2.imwrite('test.jpg', cv2.cvtColor(image, cv2.COLOR_RGB2BGR))  
    return metric_dict, PR_dict

def evaluate(model, data_root, ann_file, args):
    model.eval() 
    device = model.device
    eva_dataset = ShipKeyPointsDataset(data_root, args.descriptor, expand_piexl = args.expand_piexl, ann_file = ann_file, device = device)
    eva_loader = DataLoader(eva_dataset, batch_size=args.batch_size, shuffle=False, num_workers=args.num_workers, collate_fn=custom_collate_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)

    all_output = torch.tensor([], device=device)
    all_labels = torch.tensor([], device=device)
    all_thred = torch.tensor([], device=device)     
    if args.test_threshold is None:
        print(f"Threshold is drived from OTSU algorithm.")
    else:
        print(f"Threshold is a constant value {args.test_threshold}.") 
        all_thred = args.test_threshold
    
    with torch.no_grad():
        for i, (data, img_paths) in enumerate(eva_loader):
            data = data.to(device).float()  # 将测试数据移动到GPU
            outputs = model(data[:,:,:-2])
            
            if args.test_threshold is None:
                for k in range(outputs.shape[0]):
                    thred, _  = cv2.threshold((outputs[k] * 255).cpu().numpy().astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                    all_thred = torch.cat([all_thred, torch.tensor([min(thred/255.0 * args.test_threshold_mul, 0.95)]*(int(data[k,:,-1].sum())), device=device) ])            
                    
            all_output = torch.cat([all_output, outputs[data[:,:,-1].bool()]])    
            all_labels = torch.cat([all_labels, data[:,:,-2].bool()[data[:,:,-1].bool()]]) 

            if (i + 1) % args.print_interval == 0:
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) : [{i + 1}/{len(eva_loader)}]")

    return get_metric(all_labels, all_output, all_thred)
 

def train(model, args):
    device = model.device
    
    train_pipeline = [
        dict(type='mmdet.LoadImageFromFile', backend_args=None),
        dict(type='mmdet.LoadAnnotations', with_bbox=True, box_type='qbox'),
        dict(
            type='mmrotate.ConvertBoxType',
            box_type_mapping=dict(gt_bboxes='rbox')),
        dict(type='mmdet.RandomCrop', crop_size=(800,800)),
        dict(
            type='mmrotate.RandomRotate',
            prob=0.5,
            angle_range=180,
            rotate_type='mmrotate.Rotate'),
        dict(
            type='mmdet.RandomFlip',
            prob=0.75,
            direction=['horizontal', 'vertical', 'diagonal']),
        dict(
            type='mmdet.RandomAffine',),    
        dict(
            type='mmdet.PhotoMetricDistortion',),    

        dict(
            type='mmrotate.ConvertBoxType',
            box_type_mapping=dict(gt_bboxes='qbox')),
        dict(type='mmdet.PackDetInputs', meta_keys=())]
    train_pipeline = [] 
    train_dataset = ShipKeyPointsDataset("data/hrsid/", args.descriptor, expand_piexl = args.expand_piexl, ann_file = ['trainsplit/','valplit/'], pipeline = train_pipeline, device = device, train_ratio = args.train_ratio)
    train_loader = DataLoader(train_dataset, batch_size=args.batch_size, shuffle=True, num_workers=args.num_workers, collate_fn=custom_collate_fn, worker_init_fn=worker_init_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)
    
    outputs = get_model_complexity_info(
        model,
        input_shape=None,
        inputs=train_dataset.__getitem__(0)[0][:,:-2].float().to(device),  # the input tensor of the model
        show_table=True,  # show the complexity table
        show_arch=False)  # show the complexity arch
    for k, v in outputs.items():
        print(f"{k}: {v}")
    
    # 定义损失函数和优化器
    criterion = nn.BCELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=1e-5)
    total_steps = len(train_loader) * args.num_epochs
    scheduler = ChainedScheduler([LinearLR(optimizer, start_factor=1.0 / 20, end_factor=1.0, total_iters=args.warmup_step, last_epoch=-1, verbose=False),
                                CosineAnnealingWarmRestarts(optimizer, T_0 = (total_steps - args.warmup_step)//8, T_mult=1, eta_min=5e-7, verbose=False)])
    
    start_epoch = 0
    best_AP = 0.0
    if len(args.checkpoint):
        checkpoint = torch.load(args.checkpoint)
        model.load_state_dict(checkpoint['model_state_dict'])
        optimizer.load_state_dict(checkpoint['optimizer_state_dict']),
        scheduler.load_state_dict(checkpoint['scheduler_state_dict'])
        start_epoch = checkpoint['epoch']+1
        best_AP = checkpoint['best_AP']
        print(f'>>> Continue training from epoch [{start_epoch}] !')
    
    for epoch in range(start_epoch, args.num_epochs):       
        start_time = time.time()
        model.train()
        for i, (data, img_paths)  in enumerate(train_loader):
            optimizer.zero_grad()
            data = data.to(device).float()
            outputs = model(data[:,:,:-2])
            vaild = data[:,:,-1].reshape(-1).bool()
            loss = criterion(outputs.reshape(-1)[vaild], data[:,:,-2].reshape(-1)[vaild])
            loss.backward()

            clip_grad_norm_(model.parameters(), 35, 2)
            optimizer.step()
            scheduler.step()
            if (i + 1) % args.print_interval == 0:
                current_time = time.time()
                eta_seconds = (current_time - start_time) / (i+1) * ( (args.num_epochs - epoch ) * len(train_loader) - (i + 1))
                eta_str = str(int(eta_seconds // 3600)) + ':' + str(int((eta_seconds % 3600) // 60)) + ':' + str(int(eta_seconds % 60))
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Epoch(train)  [{epoch + 1}/{args.num_epochs}][{i + 1}/{len(train_loader)}]  lr: {optimizer.param_groups[0]['lr']:.4e}  eta: {eta_str}  time: {current_time - start_time:.4f}   loss: {loss:.4f}")
            
        if ((epoch+1) % args.eval_interval == 0) or (epoch == 0) or (epoch == args.num_epochs-1):
            print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - all: [{epoch+1}/{args.num_epochs}]:") 
            metric_dict_all, _ = evaluate(model, "data/hrsid/", ['testsplit/all/'], args)
            
            # print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - offshore: [{epoch+1}/{args.num_epochs}]:")  
            # metric_dict, _ = evaluate(model, "data/hrsid/", ['testsplit/offshore/'], args)
              
            print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - inshore: [{epoch+1}/{args.num_epochs}]:") 
            _, _ = evaluate(model, "data/hrsid/", ['testsplit/inshore/'], args)
            
            # 检查是否有更好的模型，如果有，则保存权重
            if metric_dict_all['Average_Precision'] > best_AP:
                best_AP = metric_dict_all['Average_Precision']
                # 保存当前模型的权重
                torch.save(model.state_dict(), args.save_path)
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Best model achieved at epoch {epoch + 1}, with all test image AP {best_AP:.4f}")
            if (epoch >= args.num_epochs-1):
                last_save_path = 'work_dirs/' + args.descriptor + '_last_model_weight.pth'
                torch.save(model.state_dict(), last_save_path)
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Last model saved :{last_save_path}") 

        if ((epoch+1) % args.save_interval == 0):
            for file_path in glob.glob(args.save_path[:-4] + '*_epoch.pth'):
                os.remove(file_path)
            torch.save({
                'model_state_dict': model.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
                'scheduler_state_dict': scheduler.state_dict(),
                'epoch': epoch,
                'best_AP': best_AP,
                }, args.save_path[:-4] + f'_{epoch+1}_epoch.pth') 
    
def worker_init_fn(worker_id):
    # torch.cuda.set_device(worker_id) 指定数加载设备
    torch.cuda.manual_seed_all(worker_id)   

def custom_collate_fn(batch):
    results = [item[0] for item in batch]  # 提取每个样本的result
    img_paths = [item[1] for item in batch]  # 提取每个样本的img_path
    padded_results = pad_sequence(results, batch_first=True, padding_value=0)
    return padded_results, img_paths
    
if __name__ == '__main__': 

    args = parse_arguments()

    random.seed(args.random_seed)
    np.random.seed(args.random_seed)
    torch.manual_seed(args.random_seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed_all(args.random_seed)  

    if ('alike' in args.descriptor.lower()) or ('superpoint' in args.descriptor.lower()) or ('hardnet' in args.descriptor.lower()) or ('sosnet' in args.descriptor.lower()):
        args.multiprocessing_context = 'spawn'
        
    pretrained = '' # Path(__file__).parent / str("FeatureBooster/models/" + args.descriptor + ".pth")
    pretrained_str = 'finetune' if os.path.isfile(pretrained) else 'scratch'
    args.save_path = args.save_path if len(args.save_path) else 'work_dirs/' + args.descriptor + f'{args.train_ratio*100:.0f}_' + f'_best_model_weights_{pretrained_str}.pth'
    
    print(args)

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu") 
    print(f">>> device: {device}!")          
    model = ShipKeyPointsModel(args.descriptor, device=device, pretrained = pretrained)

    if not args.test:
        with open(__file__, 'r') as file:
            lines = file.readlines() 
        for line in lines:
            print(line[:-1])
        print('\n')   
        train(model, args)
        
    model.load_state_dict(torch.load(args.save_path), strict=False)
    model_weights_md5 = calculate_md5(args.save_path)
    print(f">>> model weights loaded from {args.save_path} with MD5 {model_weights_md5}!")

    if not len(args.test_image):        
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - all:") 
        metric_dict, PR_dict_all = evaluate(model, "data/hrsid/", ['testsplit/all/'], args)
            
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - offshore:")  
        metric_dict, PR_dict_offshore = evaluate(model, "data/hrsid/", ['testsplit/offshore/'], args)
            
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - inshore:") 
        metric_dict, PR_dict_inshore = evaluate(model, "data/hrsid/", ['testsplit/inshore/'], args)

        plt.figure()
        plt.plot(PR_dict_all['Recall'], PR_dict_all['Precision'], label='PR curve for all')
        plt.plot(PR_dict_offshore['Recall'], PR_dict_offshore['Precision'], label='PR curve for offshore')
        plt.plot(PR_dict_inshore['Recall'], PR_dict_inshore['Precision'], label='PR curve for inshore')
        plt.xlabel('Recall')
        plt.ylabel('Precision')
        # plt.title('Precision-Recall Curve')
        plt.legend()
        PR_curve_path = 'work_dirs/' + f'PR_curve_{args.save_path.split("/")[-1][:-4]}_{model_weights_md5[:5]}.png'
        plt.savefig(PR_curve_path, bbox_inches='tight', dpi=300)  
        print(f">>> PR_cruve saved: {PR_curve_path}")
        
        shutil.copy(args.save_path,'/keypoint_results/')
        shutil.copy(PR_curve_path,'/keypoint_results/')
    else:
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - {args.test_image}:")            
        metric_dict, PR_dict = test(model, args


11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::add encountered 2 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::sigmoid encountered 10 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::softmax encountered 9 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::mul encountered 19 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::sum encountered 9 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::add_ encountered 18 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::tanh encountered 1 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::mean encountered 1 time(s)
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::sub encountered 1 time(s)
11/08 03:22:41 - mmengine - WARNING - The following submodules of the model were never called during the trace of the graph. They may be unused, or they were accessed by direct calls to .forward() or via other python methods. In the latter case they will have zeros for statistics, though their statistics will still contribute to their parent calling module.
feature_booster.attn_proj.layers.0.attn.dropout, feature_booster.attn_proj.layers.0.ffn.dropout, feature_booster.attn_proj.layers.1.attn.dropout, feature_booster.attn_proj.layers.1.ffn.dropout, feature_booster.attn_proj.layers.2.attn.dropout, feature_booster.attn_proj.layers.2.ffn.dropout, feature_booster.attn_proj.layers.3.attn.dropout, feature_booster.attn_proj.layers.3.ffn.dropout, feature_booster.attn_proj.layers.4.attn.dropout, feature_booster.attn_proj.layers.4.ffn.dropout, feature_booster.attn_proj.layers.5.attn.dropout, feature_booster.attn_proj.layers.5.ffn.dropout, feature_booster.attn_proj.layers.6.attn.dropout, feature_booster.attn_proj.layers.6.ffn.dropout, feature_booster.attn_proj.layers.7.attn.dropout, feature_booster.attn_proj.layers.7.ffn.dropout, feature_booster.attn_proj.layers.8.attn.dropout, feature_booster.attn_proj.layers.8.ffn.dropout, feature_booster.denc.dropout, feature_booster.dropout, feature_booster.kenc.dropout
11/08 03:22:41 - mmengine - WARNING - Unsupported operator aten::layer_norm encountered 19 time(s)
flops: 15240704
flops_str: 15.241M
activations: 103980
activations_str: 0.104M
params: 1417699
params_str: 1.418M
out_table: 
+---------------------------+----------------------+------------+--------------+
| module                    | #parameters or shape | #flops     | #activations |
+---------------------------+----------------------+------------+--------------+
| model                     | 1.418M               | 15.241M    | 0.104M       |
|  k                        |  ()                  |            |              |
|  feature_booster          |  1.352M              |  14.846M   |  0.102M      |
|   feature_booster.kenc.e… |   43.616K            |   0.474M   |   5.28K      |
|    feature_booster.kenc.… |    0.16K             |    1.408K  |    0.352K    |
|    feature_booster.kenc.… |    2.112K            |    22.528K |    0.704K    |
|    feature_booster.kenc.… |    8.32K             |    90.112K |    1.408K    |
|    feature_booster.kenc.… |    16.512K           |    0.18M   |    1.408K    |
|    feature_booster.kenc.… |    16.512K           |    0.18M   |    1.408K    |
|   feature_booster.denc.e… |   82.432K            |   0.901M   |   5.632K     |
|    feature_booster.denc.… |    33.024K           |    0.36M   |    2.816K    |
|    feature_booster.denc.… |    32.896K           |    0.36M   |    1.408K    |
|    feature_booster.denc.… |    16.512K           |    0.18M   |    1.408K    |
|   feature_booster.attn_p… |   1.192M             |   13.103M  |   88.704K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|    feature_booster.attn_… |    0.132M            |    1.456M  |    9.856K    |
|   feature_booster.final_… |   33.024K            |   0.36M    |   2.816K     |
|    feature_booster.final… |    (256, 128)        |            |              |
|    feature_booster.final… |    (256,)            |            |              |
|   feature_booster.layer_… |   0.256K             |   7.04K    |   0          |
|    feature_booster.layer… |    (128,)            |            |              |
|    feature_booster.layer… |    (128,)            |            |              |
|  fc_out                   |  33.025K             |  0.362M    |  1.419K      |
|   fc_out.0                |   32.896K            |   0.36M    |   1.408K     |
|    fc_out.0.weight        |    (128, 256)        |            |              |
|    fc_out.0.bias          |    (128,)            |            |              |
|   fc_out.2                |   0.129K             |   1.408K   |   11         |
|    fc_out.2.weight        |    (1, 128)          |            |              |
|    fc_out.2.bias          |    (1,)              |            |              |
|  fc_thed                  |  33.025K             |  32.896K   |  0.129K      |
|   fc_thed.0               |   32.896K            |   32.768K  |   0.128K     |
|    fc_thed.0.weight       |    (128, 256)        |            |              |
|    fc_thed.0.bias         |    (128,)            |            |              |
|   fc_thed.2               |   0.129K             |   0.128K   |   1          |
|    fc_thed.2.weight       |    (1, 128)          |            |              |
|    fc_thed.2.bias         |    (1,)              |            |              |
+---------------------------+----------------------+------------+--------------+

out_arch: 
11/08 03:23:28 - Epoch(train)  [1/100][5/29]  lr: 9.9952e-04  eta: 7:30:23  time: 46.6724   loss: 0.4902
11/08 03:23:50 - Epoch(train)  [1/100][10/29]  lr: 9.9810e-04  eta: 5:32:59  time: 69.1324   loss: 0.3862
11/08 03:24:12 - Epoch(train)  [1/100][15/29]  lr: 9.9572e-04  eta: 4:51:26  time: 90.9157   loss: 0.3162
11/08 03:24:37 - Epoch(train)  [1/100][20/29]  lr: 9.9241e-04  eta: 4:38:40  time: 116.1121   loss: 0.3356
11/08 03:25:15 - Epoch(train)  [1/100][25/29]  lr: 9.8815e-04  eta: 4:56:16  time: 154.5775   loss: 0.4150

11/08 03:25:23 - Epoch(test) - all: [1/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 03:26:15 - Epoch(test) : [5/16]
11/08 03:26:40 - Epoch(test) : [10/16]
11/08 03:27:05 - Epoch(test) : [15/16]
Accuracy: 0.84、Precision: 0.39、Recall: 0.56、F1-score: 0.46、Average_Precision: 0.54

11/08 03:27:06 - Epoch(test) - inshore: [1/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.84、Precision: 0.19、Recall: 0.31、F1-score: 0.23、Average_Precision: 0.13
11/08 03:27:47 - Best model achieved at epoch 1, with all test image AP 0.5431
11/08 03:28:33 - Epoch(train)  [2/100][5/29]  lr: 9.7816e-04  eta: 7:20:17  time: 46.0876   loss: 0.3014
11/08 03:28:55 - Epoch(train)  [2/100][10/29]  lr: 9.7134e-04  eta: 5:24:50  time: 68.1232   loss: 0.2663
11/08 03:29:18 - Epoch(train)  [2/100][15/29]  lr: 9.6361e-04  eta: 4:50:59  time: 91.6972   loss: 0.2634
11/08 03:29:41 - Epoch(train)  [2/100][20/29]  lr: 9.5500e-04  eta: 4:31:39  time: 114.3442   loss: 0.3020
11/08 03:30:25 - Epoch(train)  [2/100][25/29]  lr: 9.4553e-04  eta: 4:59:29  time: 157.8476   loss: 0.1655
11/08 03:31:17 - Epoch(train)  [3/100][5/29]  lr: 9.2636e-04  eta: 7:15:30  time: 46.0527   loss: 0.2844
11/08 03:31:43 - Epoch(train)  [3/100][10/29]  lr: 9.1456e-04  eta: 5:37:48  time: 71.5693   loss: 0.2085
11/08 03:32:05 - Epoch(train)  [3/100][15/29]  lr: 9.0198e-04  eta: 4:55:39  time: 94.1230   loss: 0.2027
11/08 03:32:28 - Epoch(train)  [3/100][20/29]  lr: 8.8863e-04  eta: 4:34:27  time: 116.7072   loss: 0.1725
11/08 03:33:11 - Epoch(train)  [3/100][25/29]  lr: 8.7454e-04  eta: 4:59:47  time: 159.6303   loss: 0.2518
11/08 03:34:03 - Epoch(train)  [4/100][5/29]  lr: 8.4741e-04  eta: 7:2:52  time: 45.1784   loss: 0.2662
11/08 03:34:28 - Epoch(train)  [4/100][10/29]  lr: 8.3139e-04  eta: 5:25:24  time: 69.6551   loss: 0.2254
11/08 03:34:51 - Epoch(train)  [4/100][15/29]  lr: 8.1475e-04  eta: 4:49:17  time: 93.0531   loss: 0.2176
11/08 03:35:12 - Epoch(train)  [4/100][20/29]  lr: 7.9751e-04  eta: 4:26:27  time: 114.4796   loss: 0.2397
11/08 03:36:26 - Epoch(train)  [4/100][25/29]  lr: 7.7971e-04  eta: 5:49:36  time: 188.0978   loss: 0.1563
11/08 03:37:52 - Epoch(train)  [5/100][5/29]  lr: 7.4634e-04  eta: 7:15:36  time: 47.0248   loss: 0.1786
11/08 03:38:19 - Epoch(train)  [5/100][10/29]  lr: 7.2713e-04  eta: 5:37:55  time: 73.0919   loss: 0.1548
11/08 03:38:42 - Epoch(train)  [5/100][15/29]  lr: 7.0749e-04  eta: 4:58:36  time: 97.0572   loss: 0.2103
11/08 03:39:04 - Epoch(train)  [5/100][20/29]  lr: 6.8746e-04  eta: 4:33:3  time: 118.5476   loss: 0.1804
11/08 03:39:44 - Epoch(train)  [5/100][25/29]  lr: 6.6707e-04  eta: 4:51:57  time: 158.7261   loss: 0.2133

11/08 03:39:53 - Epoch(test) - all: [5/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 03:40:45 - Epoch(test) : [5/16]
11/08 03:41:08 - Epoch(test) : [10/16]
11/08 03:41:35 - Epoch(test) : [15/16]
Accuracy: 0.89、Precision: 0.55、Recall: 0.64、F1-score: 0.59、Average_Precision: 0.71

11/08 03:41:36 - Epoch(test) - inshore: [5/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.89、Precision: 0.35、Recall: 0.40、F1-score: 0.37、Average_Precision: 0.32
11/08 03:42:15 - Best model achieved at epoch 5, with all test image AP 0.7146
11/08 03:43:02 - Epoch(train)  [6/100][5/29]  lr: 6.2959e-04  eta: 7:3:30  time: 46.2004   loss: 0.1790
11/08 03:43:25 - Epoch(train)  [6/100][10/29]  lr: 6.0842e-04  eta: 5:18:40  time: 69.6556   loss: 0.2222
11/08 03:43:50 - Epoch(train)  [6/100][15/29]  lr: 5.8703e-04  eta: 4:47:0  time: 94.2739   loss: 0.1622
11/08 03:44:10 - Epoch(train)  [6/100][20/29]  lr: 5.6548e-04  eta: 4:21:57  time: 114.9384   loss: 0.1830
11/08 03:44:58 - Epoch(train)  [6/100][25/29]  lr: 5.4381e-04  eta: 4:56:10  time: 162.7370   loss: 0.2169
11/08 03:45:51 - Epoch(train)  [7/100][5/29]  lr: 5.0461e-04  eta: 7:10:29  time: 47.4625   loss: 0.1736
11/08 03:46:12 - Epoch(train)  [7/100][10/29]  lr: 4.8281e-04  eta: 5:12:14  time: 68.9783   loss: 0.1569
11/08 03:46:36 - Epoch(train)  [7/100][15/29]  lr: 4.6104e-04  eta: 4:39:34  time: 92.8126   loss: 0.3147
11/08 03:47:00 - Epoch(train)  [7/100][20/29]  lr: 4.3935e-04  eta: 4:24:10  time: 117.1531   loss: 0.1639
11/08 03:47:42 - Epoch(train)  [7/100][25/29]  lr: 4.1777e-04  eta: 4:45:45  time: 158.6960   loss: 0.1403
11/08 03:48:37 - Epoch(train)  [8/100][5/29]  lr: 3.7935e-04  eta: 6:59:55  time: 46.7968   loss: 0.1894
11/08 03:49:02 - Epoch(train)  [8/100][10/29]  lr: 3.5831e-04  eta: 5:24:14  time: 72.4025   loss: 0.1925
11/08 03:49:24 - Epoch(train)  [8/100][15/29]  lr: 3.3755e-04  eta: 4:40:1  time: 93.9684   loss: 0.1204
11/08 03:49:46 - Epoch(train)  [8/100][20/29]  lr: 3.1709e-04  eta: 4:19:48  time: 116.4624   loss: 0.1846
11/08 03:50:26 - Epoch(train)  [8/100][25/29]  lr: 2.9698e-04  eta: 4:37:49  time: 155.9675   loss: 0.2082
11/08 03:51:19 - Epoch(train)  [9/100][5/29]  lr: 2.6179e-04  eta: 6:52:44  time: 46.4973   loss: 0.1397
11/08 03:51:43 - Epoch(train)  [9/100][10/29]  lr: 2.4286e-04  eta: 5:12:59  time: 70.6542   loss: 0.2261
11/08 03:52:07 - Epoch(train)  [9/100][15/29]  lr: 2.2442e-04  eta: 4:39:56  time: 94.9647   loss: 0.1784
11/08 03:52:32 - Epoch(train)  [9/100][20/29]  lr: 2.0650e-04  eta: 4:24:54  time: 120.0499   loss: 0.2356
11/08 03:53:15 - Epoch(train)  [9/100][25/29]  lr: 1.8915e-04  eta: 4:46:27  time: 162.5727   loss: 0.2183
11/08 03:54:08 - Epoch(train)  [10/100][5/29]  lr: 1.5942e-04  eta: 6:55:15  time: 47.2967   loss: 0.2026
11/08 03:54:28 - Epoch(train)  [10/100][10/29]  lr: 1.4380e-04  eta: 4:52:50  time: 66.8333   loss: 0.1733
11/08 03:54:53 - Epoch(train)  [10/100][15/29]  lr: 1.2886e-04  eta: 4:29:26  time: 92.4150   loss: 0.3337
11/08 03:55:20 - Epoch(train)  [10/100][20/29]  lr: 1.1463e-04  eta: 4:19:57  time: 119.1130   loss: 0.2138
11/08 03:55:56 - Epoch(train)  [10/100][25/29]  lr: 1.0113e-04  eta: 4:29:37  time: 154.7176   loss: 0.2522

11/08 03:56:03 - Epoch(test) - all: [10/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 03:56:48 - Epoch(test) : [5/16]
11/08 03:57:15 - Epoch(test) : [10/16]
11/08 03:57:35 - Epoch(test) : [15/16]
Accuracy: 0.89、Precision: 0.54、Recall: 0.68、F1-score: 0.60、Average_Precision: 0.75

11/08 03:57:36 - Epoch(test) - inshore: [10/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.89、Precision: 0.34、Recall: 0.47、F1-score: 0.40、Average_Precision: 0.37
11/08 03:58:20 - Best model achieved at epoch 10, with all test image AP 0.7480
11/08 03:59:05 - Epoch(train)  [11/100][5/29]  lr: 7.8765e-05  eta: 6:27:20  time: 44.6079   loss: 0.2532
11/08 03:59:28 - Epoch(train)  [11/100][10/29]  lr: 6.7454e-05  eta: 4:56:20  time: 68.3872   loss: 0.1855
11/08 03:59:50 - Epoch(train)  [11/100][15/29]  lr: 5.6966e-05  eta: 4:18:48  time: 89.7587   loss: 0.1218
11/08 04:00:16 - Epoch(train)  [11/100][20/29]  lr: 4.7323e-05  eta: 4:10:14  time: 115.9448   loss: 0.1224
11/08 04:00:58 - Epoch(train)  [11/100][25/29]  lr: 3.8541e-05  eta: 4:31:24  time: 157.4939   loss: 0.1588
11/08 04:01:48 - Epoch(train)  [12/100][5/29]  lr: 2.4960e-05  eta: 6:14:44  time: 43.6416   loss: 0.1707
11/08 04:02:15 - Epoch(train)  [12/100][10/29]  lr: 1.8676e-05  eta: 5:1:54  time: 70.4581   loss: 0.2052
11/08 04:02:37 - Epoch(train)  [12/100][15/29]  lr: 1.3309e-05  eta: 4:22:42  time: 92.1452   loss: 0.1489
11/08 04:02:58 - Epoch(train)  [12/100][20/29]  lr: 8.8684e-06  eta: 4:1:59  time: 113.3866   loss: 0.1725
11/08 04:03:40 - Epoch(train)  [12/100][25/29]  lr: 5.3635e-06  eta: 4:25:15  time: 155.6657   loss: 0.1874
11/08 04:04:35 - Epoch(train)  [13/100][5/29]  lr: 1.4321e-06  eta: 7:2:5  time: 49.7173   loss: 0.1383
11/08 04:04:55 - Epoch(train)  [13/100][10/29]  lr: 5.7611e-07  eta: 4:57:28  time: 70.2133   loss: 0.2059
11/08 04:05:20 - Epoch(train)  [13/100][15/29]  lr: 9.9983e-04  eta: 4:28:32  time: 95.2648   loss: 0.1724
11/08 04:05:44 - Epoch(train)  [13/100][20/29]  lr: 9.9878e-04  eta: 4:11:28  time: 119.1854   loss: 0.1392
11/08 04:06:22 - Epoch(train)  [13/100][25/29]  lr: 9.9679e-04  eta: 4:24:13  time: 156.8389   loss: 0.1572
11/08 04:07:14 - Epoch(train)  [14/100][5/29]  lr: 9.9082e-04  eta: 6:12:53  time: 44.4262   loss: 0.2815
11/08 04:07:40 - Epoch(train)  [14/100][10/29]  lr: 9.8619e-04  eta: 4:54:16  time: 70.2603   loss: 0.1942
11/08 04:08:01 - Epoch(train)  [14/100][15/29]  lr: 9.8064e-04  eta: 4:14:1  time: 91.1573   loss: 0.1830
11/08 04:08:24 - Epoch(train)  [14/100][20/29]  lr: 9.7417e-04  eta: 3:57:42  time: 113.9603   loss: 0.1391
11/08 04:09:01 - Epoch(train)  [14/100][25/29]  lr: 9.6681e-04  eta: 4:12:51  time: 151.8384   loss: 0.1286
11/08 04:09:52 - Epoch(train)  [15/100][5/29]  lr: 9.5132e-04  eta: 6:11:47  time: 44.8112   loss: 0.2352
11/08 04:10:17 - Epoch(train)  [15/100][10/29]  lr: 9.4150e-04  eta: 4:46:8  time: 69.1169   loss: 0.1946
11/08 04:10:42 - Epoch(train)  [15/100][15/29]  lr: 9.3085e-04  eta: 4:20:34  time: 94.5991   loss: 0.1710
11/08 04:11:03 - Epoch(train)  [15/100][20/29]  lr: 9.1938e-04  eta: 3:58:34  time: 115.7188   loss: 0.1886
11/08 04:11:48 - Epoch(train)  [15/100][25/29]  lr: 9.0710e-04  eta: 4:23:37  time: 160.1623   loss: 0.1460

11/08 04:11:54 - Epoch(test) - all: [15/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 04:12:47 - Epoch(test) : [5/16]
11/08 04:13:08 - Epoch(test) : [10/16]
11/08 04:13:35 - Epoch(test) : [15/16]
Accuracy: 0.90、Precision: 0.58、Recall: 0.67、F1-score: 0.62、Average_Precision: 0.75

11/08 04:13:36 - Epoch(test) - inshore: [15/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.89、Precision: 0.36、Recall: 0.45、F1-score: 0.40、Average_Precision: 0.38
11/08 04:14:13 - Best model achieved at epoch 15, with all test image AP 0.7544
11/08 04:15:01 - Epoch(train)  [16/100][5/29]  lr: 8.8308e-04  eta: 6:27:26  time: 47.2489   loss: 0.1902
11/08 04:15:24 - Epoch(train)  [16/100][10/29]  lr: 8.6870e-04  eta: 4:47:7  time: 70.1716   loss: 0.1701
11/08 04:15:48 - Epoch(train)  [16/100][15/29]  lr: 8.5363e-04  eta: 4:17:35  time: 94.6280   loss: 0.1986
11/08 04:16:11 - Epoch(train)  [16/100][20/29]  lr: 8.3788e-04  eta: 3:59:44  time: 117.6629   loss: 0.1176
11/08 04:16:57 - Epoch(train)  [16/100][25/29]  lr: 8.2148e-04  eta: 4:26:10  time: 163.6337   loss: 0.1602
11/08 04:17:49 - Epoch(train)  [17/100][5/29]  lr: 7.9046e-04  eta: 6:4:34  time: 44.9899   loss: 0.1259
11/08 04:18:11 - Epoch(train)  [17/100][10/29]  lr: 7.7243e-04  eta: 4:30:45  time: 66.9651   loss: 0.1771
11/08 04:18:34 - Epoch(train)  [17/100][15/29]  lr: 7.5389e-04  eta: 4:2:46  time: 90.2539   loss: 0.1649
11/08 04:18:58 - Epoch(train)  [17/100][20/29]  lr: 7.3487e-04  eta: 3:50:36  time: 114.5367   loss: 0.1335
11/08 04:19:39 - Epoch(train)  [17/100][25/29]  lr: 7.1540e-04  eta: 4:9:58  time: 155.5255   loss: 0.1355
11/08 04:20:32 - Epoch(train)  [18/100][5/29]  lr: 6.7934e-04  eta: 6:7:8  time: 45.8552   loss: 0.1284
11/08 04:20:54 - Epoch(train)  [18/100][10/29]  lr: 6.5882e-04  eta: 4:32:35  time: 68.2323   loss: 0.1300
11/08 04:21:15 - Epoch(train)  [18/100][15/29]  lr: 6.3800e-04  eta: 3:56:7  time: 88.8458   loss: 0.1915
11/08 04:21:40 - Epoch(train)  [18/100][20/29]  lr: 6.1691e-04  eta: 3:46:41  time: 113.9665   loss: 0.1293
11/08 04:22:20 - Epoch(train)  [18/100][25/29]  lr: 5.9561e-04  eta: 4:3:30  time: 153.3379   loss: 0.1415
11/08 04:23:14 - Epoch(train)  [19/100][5/29]  lr: 5.5682e-04  eta: 6:8:47  time: 46.6229   loss: 0.1720
11/08 04:23:35 - Epoch(train)  [19/100][10/29]  lr: 5.3511e-04  eta: 4:30:12  time: 68.4632   loss: 0.1589
11/08 04:23:59 - Epoch(train)  [19/100][15/29]  lr: 5.1333e-04  eta: 4:2:16  time: 92.2731   loss: 0.1753
11/08 04:24:22 - Epoch(train)  [19/100][20/29]  lr: 4.9153e-04  eta: 3:45:53  time: 114.9618   loss: 0.1356
11/08 04:25:06 - Epoch(train)  [19/100][25/29]  lr: 4.6974e-04  eta: 4:10:13  time: 159.5177   loss: 0.1475
11/08 04:25:57 - Epoch(train)  [20/100][5/29]  lr: 4.3070e-04  eta: 5:41:1  time: 43.6467   loss: 0.1596
11/08 04:26:22 - Epoch(train)  [20/100][10/29]  lr: 4.0918e-04  eta: 4:27:10  time: 68.5364   loss: 0.1662
11/08 04:26:44 - Epoch(train)  [20/100][15/29]  lr: 3.8783e-04  eta: 3:55:35  time: 90.8432   loss: 0.2053
11/08 04:27:07 - Epoch(train)  [20/100][20/29]  lr: 3.6670e-04  eta: 3:40:16  time: 113.4921   loss: 0.1201
11/08 04:27:48 - Epoch(train)  [20/100][25/29]  lr: 3.4582e-04  eta: 3:59:6  time: 154.3257   loss: 0.1247

11/08 04:27:55 - Epoch(test) - all: [20/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 04:28:45 - Epoch(test) : [5/16]
11/08 04:29:13 - Epoch(test) : [10/16]
11/08 04:29:35 - Epoch(test) : [15/16]
Accuracy: 0.91、Precision: 0.63、Recall: 0.69、F1-score: 0.66、Average_Precision: 0.79

11/08 04:29:36 - Epoch(test) - inshore: [20/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.43、Recall: 0.48、F1-score: 0.45、Average_Precision: 0.46
11/08 04:30:20 - Best model achieved at epoch 20, with all test image AP 0.7946
11/08 04:31:06 - Epoch(train)  [21/100][5/29]  lr: 3.0900e-04  eta: 5:54:5  time: 45.8876   loss: 0.1549
11/08 04:31:30 - Epoch(train)  [21/100][10/29]  lr: 2.8905e-04  eta: 4:29:29  time: 69.9964   loss: 0.1497
11/08 04:31:52 - Epoch(train)  [21/100][15/29]  lr: 2.6949e-04  eta: 3:54:5  time: 91.4001   loss: 0.1427
11/08 04:32:17 - Epoch(train)  [21/100][20/29]  lr: 2.5038e-04  eta: 3:43:34  time: 116.6471   loss: 0.1044
11/08 04:33:00 - Epoch(train)  [21/100][25/29]  lr: 2.3173e-04  eta: 4:4:32  time: 159.8264   loss: 0.2113
11/08 04:33:51 - Epoch(train)  [22/100][5/29]  lr: 1.9949e-04  eta: 5:32:27  time: 43.6305   loss: 0.1373
11/08 04:34:15 - Epoch(train)  [22/100][10/29]  lr: 1.8237e-04  eta: 4:18:19  time: 67.9524   loss: 0.1452
11/08 04:34:37 - Epoch(train)  [22/100][15/29]  lr: 1.6585e-04  eta: 3:47:49  time: 90.0861   loss: 0.1063
11/08 04:35:01 - Epoch(train)  [22/100][20/29]  lr: 1.4997e-04  eta: 3:35:56  time: 114.1023   loss: 0.1235
11/08 04:35:43 - Epoch(train)  [22/100][25/29]  lr: 1.3476e-04  eta: 3:55:47  time: 156.0798   loss: 0.1601
11/08 04:36:38 - Epoch(train)  [23/100][5/29]  lr: 1.0914e-04  eta: 6:0:56  time: 47.9765   loss: 0.2014
11/08 04:36:59 - Epoch(train)  [23/100][10/29]  lr: 9.5944e-05  eta: 4:19:52  time: 69.2391   loss: 0.1342
11/08 04:37:25 - Epoch(train)  [23/100][15/29]  lr: 8.3516e-05  eta: 3:56:16  time: 94.6387   loss: 0.0931
11/08 04:37:45 - Epoch(train)  [23/100][20/29]  lr: 7.1881e-05  eta: 3:35:23  time: 115.2854   loss: 0.1570
11/08 04:38:29 - Epoch(train)  [23/100][25/29]  lr: 6.1061e-05  eta: 3:56:33  time: 158.6261   loss: 0.1516
11/08 04:39:18 - Epoch(train)  [24/100][5/29]  lr: 4.3706e-05  eta: 5:27:4  time: 44.0413   loss: 0.1185
11/08 04:39:42 - Epoch(train)  [24/100][10/29]  lr: 3.5274e-05  eta: 4:10:0  time: 67.4782   loss: 0.2361
11/08 04:40:05 - Epoch(train)  [24/100][15/29]  lr: 2.7727e-05  eta: 3:42:31  time: 90.2936   loss: 0.1386
11/08 04:40:31 - Epoch(train)  [24/100][20/29]  lr: 2.1080e-05  eta: 3:35:30  time: 116.8615   loss: 0.1412
11/08 04:41:10 - Epoch(train)  [24/100][25/29]  lr: 1.5345e-05  eta: 3:48:53  time: 155.5023   loss: 0.1352
11/08 04:41:58 - Epoch(train)  [25/100][5/29]  lr: 7.3538e-06  eta: 5:5:41  time: 41.7031   loss: 0.0926
11/08 04:42:24 - Epoch(train)  [25/100][10/29]  lr: 4.2251e-06  eta: 4:8:38  time: 67.9963   loss: 0.1655
11/08 04:42:47 - Epoch(train)  [25/100][15/29]  lr: 2.0406e-06  eta: 3:41:48  time: 91.1967   loss: 0.1526
11/08 04:43:11 - Epoch(train)  [25/100][20/29]  lr: 8.0443e-07  eta: 3:29:52  time: 115.3183   loss: 0.1257
11/08 04:43:52 - Epoch(train)  [25/100][25/29]  lr: 9.9998e-04  eta: 3:47:10  time: 156.3805   loss: 0.1663

11/08 04:43:58 - Epoch(test) - all: [25/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 04:44:52 - Epoch(test) : [5/16]
11/08 04:45:14 - Epoch(test) : [10/16]
11/08 04:45:41 - Epoch(test) : [15/16]
Accuracy: 0.91、Precision: 0.62、Recall: 0.70、F1-score: 0.65、Average_Precision: 0.78

11/08 04:45:42 - Epoch(test) - inshore: [25/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.90、Precision: 0.40、Recall: 0.48、F1-score: 0.43、Average_Precision: 0.42
11/08 04:47:08 - Epoch(train)  [26/100][5/29]  lr: 9.9810e-04  eta: 5:48:17  time: 48.1507   loss: 0.1505
11/08 04:47:34 - Epoch(train)  [26/100][10/29]  lr: 9.9572e-04  eta: 4:27:41  time: 74.1874   loss: 0.1357
11/08 04:48:00 - Epoch(train)  [26/100][15/29]  lr: 9.9241e-04  eta: 4:1:38  time: 100.6836   loss: 0.1226
11/08 04:48:22 - Epoch(train)  [26/100][20/29]  lr: 9.8815e-04  eta: 3:40:22  time: 122.7165   loss: 0.1596
11/08 04:49:03 - Epoch(train)  [26/100][25/29]  lr: 9.8297e-04  eta: 3:53:14  time: 162.7308   loss: 0.1659
11/08 04:50:02 - Epoch(train)  [27/100][5/29]  lr: 9.7134e-04  eta: 5:47:16  time: 48.6597   loss: 0.1224
11/08 04:50:25 - Epoch(train)  [27/100][10/29]  lr: 9.6361e-04  eta: 4:15:0  time: 71.6335   loss: 0.0940
11/08 04:50:53 - Epoch(train)  [27/100][15/29]  lr: 9.5500e-04  eta: 3:55:34  time: 99.4895   loss: 0.1198
11/08 04:51:18 - Epoch(train)  [27/100][20/29]  lr: 9.4553e-04  eta: 3:40:33  time: 124.4894   loss: 0.2320
11/08 04:51:58 - Epoch(train)  [27/100][25/29]  lr: 9.3521e-04  eta: 3:53:17  time: 164.9850   loss: 0.1448
11/08 04:52:51 - Epoch(train)  [28/100][5/29]  lr: 9.1456e-04  eta: 5:21:43  time: 45.6988   loss: 0.1672
11/08 04:53:17 - Epoch(train)  [28/100][10/29]  lr: 9.0198e-04  eta: 4:9:34  time: 71.0711   loss: 0.1375
11/08 04:53:40 - Epoch(train)  [28/100][15/29]  lr: 8.8863e-04  eta: 3:40:39  time: 94.4791   loss: 0.1988
11/08 04:54:01 - Epoch(train)  [28/100][20/29]  lr: 8.7454e-04  eta: 3:22:32  time: 115.8999   loss: 0.1415
11/08 04:54:49 - Epoch(train)  [28/100][25/29]  lr: 8.5974e-04  eta: 3:48:5  time: 163.5445   loss: 0.1316
11/08 04:55:50 - Epoch(train)  [29/100][5/29]  lr: 8.3139e-04  eta: 6:25:53  time: 55.5777   loss: 0.1733
11/08 04:56:15 - Epoch(train)  [29/100][10/29]  lr: 8.1475e-04  eta: 4:37:51  time: 80.2262   loss: 0.1204
11/08 04:56:36 - Epoch(train)  [29/100][15/29]  lr: 7.9751e-04  eta: 3:53:45  time: 101.4883   loss: 0.1707
11/08 04:57:03 - Epoch(train)  [29/100][20/29]  lr: 7.7971e-04  eta: 3:41:24  time: 128.4812   loss: 0.1743
11/08 04:57:51 - Epoch(train)  [29/100][25/29]  lr: 7.6137e-04  eta: 4:2:43  time: 176.4879   loss: 0.1227
11/08 04:58:47 - Epoch(train)  [30/100][5/29]  lr: 7.2713e-04  eta: 5:39:47  time: 49.6282   loss: 0.1947
11/08 04:59:10 - Epoch(train)  [30/100][10/29]  lr: 7.0749e-04  eta: 4:7:30  time: 72.4776   loss: 0.1752
11/08 04:59:35 - Epoch(train)  [30/100][15/29]  lr: 6.8746e-04  eta: 3:41:54  time: 97.7088   loss: 0.0884
11/08 04:59:58 - Epoch(train)  [30/100][20/29]  lr: 6.6707e-04  eta: 3:24:30  time: 120.3603   loss: 0.1272
11/08 05:00:42 - Epoch(train)  [30/100][25/29]  lr: 6.4636e-04  eta: 3:43:44  time: 165.0054   loss: 0.1312

11/08 05:00:49 - Epoch(test) - all: [30/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 05:01:40 - Epoch(test) : [5/16]
11/08 05:02:06 - Epoch(test) : [10/16]
11/08 05:02:27 - Epoch(test) : [15/16]
Accuracy: 0.91、Precision: 0.61、Recall: 0.74、F1-score: 0.67、Average_Precision: 0.81

11/08 05:02:27 - Epoch(test) - inshore: [30/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.42、Recall: 0.56、F1-score: 0.48、Average_Precision: 0.50
11/08 05:03:09 - Best model achieved at epoch 30, with all test image AP 0.8124
11/08 05:03:58 - Epoch(train)  [31/100][5/29]  lr: 6.0842e-04  eta: 5:32:2  time: 49.1925   loss: 0.1989
11/08 05:04:23 - Epoch(train)  [31/100][10/29]  lr: 5.8703e-04  eta: 4:9:31  time: 74.1143   loss: 0.1427
11/08 05:04:44 - Epoch(train)  [31/100][15/29]  lr: 5.6548e-04  eta: 3:33:15  time: 95.2514   loss: 0.1245
11/08 05:05:10 - Epoch(train)  [31/100][20/29]  lr: 5.4381e-04  eta: 3:22:22  time: 120.8191   loss: 0.1305
11/08 05:05:55 - Epoch(train)  [31/100][25/29]  lr: 5.2205e-04  eta: 3:42:0  time: 166.0900   loss: 0.1465
11/08 05:06:48 - Epoch(train)  [32/100][5/29]  lr: 4.8281e-04  eta: 5:13:34  time: 47.1313   loss: 0.1447
11/08 05:07:12 - Epoch(train)  [32/100][10/29]  lr: 4.6104e-04  eta: 3:53:47  time: 70.4566   loss: 0.1710
11/08 05:07:37 - Epoch(train)  [32/100][15/29]  lr: 4.3935e-04  eta: 3:32:8  time: 96.1369   loss: 0.1226
11/08 05:08:01 - Epoch(train)  [32/100][20/29]  lr: 4.1777e-04  eta: 3:18:27  time: 120.2206   loss: 0.1183
11/08 05:08:48 - Epoch(train)  [32/100][25/29]  lr: 3.9635e-04  eta: 3:39:4  time: 166.3051   loss: 0.0990
11/08 05:09:42 - Epoch(train)  [33/100][5/29]  lr: 3.5831e-04  eta: 5:13:43  time: 47.8480   loss: 0.1757
11/08 05:10:07 - Epoch(train)  [33/100][10/29]  lr: 3.3755e-04  eta: 3:56:47  time: 72.4134   loss: 0.1130
11/08 05:10:29 - Epoch(train)  [33/100][15/29]  lr: 3.1709e-04  eta: 3:26:27  time: 94.9509   loss: 0.1260
11/08 05:10:54 - Epoch(train)  [33/100][20/29]  lr: 2.9698e-04  eta: 3:15:10  time: 119.9856   loss: 0.1722
11/08 05:11:38 - Epoch(train)  [33/100][25/29]  lr: 2.7726e-04  eta: 3:32:27  time: 163.6824   loss: 0.1721
11/08 05:12:32 - Epoch(train)  [34/100][5/29]  lr: 2.4286e-04  eta: 5:4:58  time: 47.2094   loss: 0.1173
11/08 05:12:54 - Epoch(train)  [34/100][10/29]  lr: 2.2442e-04  eta: 3:44:10  time: 69.5849   loss: 0.0953
11/08 05:13:19 - Epoch(train)  [34/100][15/29]  lr: 2.0650e-04  eta: 3:20:56  time: 93.7995   loss: 0.1492
11/08 05:13:41 - Epoch(train)  [34/100][20/29]  lr: 1.8915e-04  eta: 3:5:42  time: 115.8883   loss: 0.1247
11/08 05:14:27 - Epoch(train)  [34/100][25/29]  lr: 1.7238e-04  eta: 3:26:53  time: 161.8050   loss: 0.1119
11/08 05:15:21 - Epoch(train)  [35/100][5/29]  lr: 1.4380e-04  eta: 5:4:36  time: 47.8685   loss: 0.0936
11/08 05:15:47 - Epoch(train)  [35/100][10/29]  lr: 1.2886e-04  eta: 3:53:20  time: 73.5295   loss: 0.1056
11/08 05:16:09 - Epoch(train)  [35/100][15/29]  lr: 1.1463e-04  eta: 3:20:37  time: 95.0801   loss: 0.0957
11/08 05:16:34 - Epoch(train)  [35/100][20/29]  lr: 1.0113e-04  eta: 3:9:53  time: 120.3070   loss: 0.1447
11/08 05:17:18 - Epoch(train)  [35/100][25/29]  lr: 8.8393e-05  eta: 3:27:42  time: 164.9300   loss: 0.1505

11/08 05:17:26 - Epoch(test) - all: [35/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 05:18:18 - Epoch(test) : [5/16]
11/08 05:18:45 - Epoch(test) : [10/16]
11/08 05:19:12 - Epoch(test) : [15/16]
Accuracy: 0.91、Precision: 0.62、Recall: 0.78、F1-score: 0.69、Average_Precision: 0.83

11/08 05:19:12 - Epoch(test) - inshore: [35/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.44、Recall: 0.63、F1-score: 0.52、Average_Precision: 0.54
11/08 05:19:54 - Best model achieved at epoch 35, with all test image AP 0.8296
11/08 05:20:38 - Epoch(train)  [36/100][5/29]  lr: 6.7454e-05  eta: 4:38:29  time: 44.4412   loss: 0.1574
11/08 05:21:03 - Epoch(train)  [36/100][10/29]  lr: 5.6966e-05  eta: 3:37:12  time: 69.5056   loss: 0.0922
11/08 05:21:28 - Epoch(train)  [36/100][15/29]  lr: 4.7323e-05  eta: 3:17:10  time: 94.8969   loss: 0.1031
11/08 05:21:49 - Epoch(train)  [36/100][20/29]  lr: 3.8541e-05  eta: 2:59:21  time: 115.4015   loss: 0.1329
11/08 05:22:36 - Epoch(train)  [36/100][25/29]  lr: 3.0639e-05  eta: 3:21:52  time: 162.7966   loss: 0.1281
11/08 05:23:31 - Epoch(train)  [37/100][5/29]  lr: 1.8676e-05  eta: 5:5:1  time: 49.4355   loss: 0.1124
11/08 05:23:54 - Epoch(train)  [37/100][10/29]  lr: 1.3309e-05  eta: 3:44:28  time: 72.9601   loss: 0.1293
11/08 05:24:18 - Epoch(train)  [37/100][15/29]  lr: 8.8684e-06  eta: 3:17:34  time: 96.5915   loss: 0.1109
11/08 05:24:42 - Epoch(train)  [37/100][20/29]  lr: 5.3635e-06  eta: 3:4:12  time: 120.3990   loss: 0.1248
11/08 05:25:24 - Epoch(train)  [37/100][25/29]  lr: 2.8007e-06  eta: 3:18:29  time: 162.6160   loss: 0.1320
11/08 05:26:19 - Epoch(train)  [38/100][5/29]  lr: 5.7611e-07  eta: 4:50:16  time: 47.7950   loss: 0.1048
11/08 05:26:44 - Epoch(train)  [38/100][10/29]  lr: 9.9983e-04  eta: 3:39:57  time: 72.6316   loss: 0.1305
11/08 05:27:06 - Epoch(train)  [38/100][15/29]  lr: 9.9878e-04  eta: 3:11:20  time: 95.0389   loss: 0.1080
11/08 05:27:28 - Epoch(train)  [38/100][20/29]  lr: 9.9679e-04  eta: 2:55:6  time: 116.2846   loss: 0.1621
11/08 05:28:15 - Epoch(train)  [38/100][25/29]  lr: 9.9385e-04  eta: 3:15:56  time: 163.1021   loss: 0.1285
11/08 05:29:11 - Epoch(train)  [39/100][5/29]  lr: 9.8619e-04  eta: 4:55:51  time: 49.5036   loss: 0.1441
11/08 05:29:35 - Epoch(train)  [39/100][10/29]  lr: 9.8064e-04  eta: 3:39:0  time: 73.4927   loss: 0.1890
11/08 05:29:58 - Epoch(train)  [39/100][15/29]  lr: 9.7417e-04  eta: 3:10:31  time: 96.1699   loss: 0.1136
11/08 05:30:22 - Epoch(train)  [39/100][20/29]  lr: 9.6681e-04  eta: 2:57:44  time: 119.9577   loss: 0.0772
11/08 05:31:05 - Epoch(train)  [39/100][25/29]  lr: 9.5855e-04  eta: 3:13:32  time: 163.7394   loss: 0.1783
11/08 05:31:58 - Epoch(train)  [40/100][5/29]  lr: 9.4150e-04  eta: 4:35:15  time: 46.8135   loss: 0.1217
11/08 05:32:21 - Epoch(train)  [40/100][10/29]  lr: 9.3085e-04  eta: 3:25:11  time: 69.9889   loss: 0.0985
11/08 05:32:46 - Epoch(train)  [40/100][15/29]  lr: 9.1938e-04  eta: 3:3:34  time: 94.1923   loss: 0.1446
11/08 05:33:10 - Epoch(train)  [40/100][20/29]  lr: 9.0710e-04  eta: 2:52:24  time: 118.2928   loss: 0.1543
11/08 05:33:52 - Epoch(train)  [40/100][25/29]  lr: 8.9406e-04  eta: 3:6:35  time: 160.4855   loss: 0.1448

11/08 05:33:58 - Epoch(test) - all: [40/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 05:34:40 - Epoch(test) : [5/16]
11/08 05:35:05 - Epoch(test) : [10/16]
11/08 05:35:26 - Epoch(test) : [15/16]
Accuracy: 0.90、Precision: 0.57、Recall: 0.77、F1-score: 0.65、Average_Precision: 0.81

11/08 05:35:27 - Epoch(test) - inshore: [40/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.89、Precision: 0.38、Recall: 0.63、F1-score: 0.47、Average_Precision: 0.51
11/08 05:36:42 - Epoch(train)  [41/100][5/29]  lr: 8.6870e-04  eta: 3:52:23  time: 40.1826   loss: 0.1157
11/08 05:37:02 - Epoch(train)  [41/100][10/29]  lr: 8.5363e-04  eta: 2:53:38  time: 60.2248   loss: 0.1102
11/08 05:37:30 - Epoch(train)  [41/100][15/29]  lr: 8.3788e-04  eta: 2:49:21  time: 88.3612   loss: 0.1592
11/08 05:37:51 - Epoch(train)  [41/100][20/29]  lr: 8.2148e-04  eta: 2:36:42  time: 109.3274   loss: 0.1227
11/08 05:38:22 - Epoch(train)  [41/100][25/29]  lr: 8.0448e-04  eta: 2:40:25  time: 140.3188   loss: 0.1920
11/08 05:39:14 - Epoch(train)  [42/100][5/29]  lr: 7.7243e-04  eta: 4:1:42  time: 42.5047   loss: 0.1029
11/08 05:39:34 - Epoch(train)  [42/100][10/29]  lr: 7.5389e-04  eta: 2:59:18  time: 63.2487   loss: 0.1234
11/08 05:39:55 - Epoch(train)  [42/100][15/29]  lr: 7.3487e-04  eta: 2:38:31  time: 84.1198   loss: 0.2162
11/08 05:40:16 - Epoch(train)  [42/100][20/29]  lr: 7.1540e-04  eta: 2:27:24  time: 104.6039   loss: 0.0866
11/08 05:40:53 - Epoch(train)  [42/100][25/29]  lr: 6.9552e-04  eta: 2:39:5  time: 141.5462   loss: 0.0880
11/08 05:41:39 - Epoch(train)  [43/100][5/29]  lr: 6.5882e-04  eta: 3:49:57  time: 41.1388   loss: 0.1068
11/08 05:42:01 - Epoch(train)  [43/100][10/29]  lr: 6.3800e-04  eta: 2:54:51  time: 62.7478   loss: 0.1618
11/08 05:42:21 - Epoch(train)  [43/100][15/29]  lr: 6.1691e-04  eta: 2:32:44  time: 82.4628   loss: 0.1187
11/08 05:42:42 - Epoch(train)  [43/100][20/29]  lr: 5.9561e-04  eta: 2:23:38  time: 103.7113   loss: 0.0862
11/08 05:43:21 - Epoch(train)  [43/100][25/29]  lr: 5.7412e-04  eta: 2:37:38  time: 142.7013   loss: 0.1583
11/08 05:44:07 - Epoch(train)  [44/100][5/29]  lr: 5.3511e-04  eta: 3:43:3  time: 40.6054   loss: 0.0885
11/08 05:44:28 - Epoch(train)  [44/100][10/29]  lr: 5.1333e-04  eta: 2:50:9  time: 62.1423   loss: 0.1174
11/08 05:44:50 - Epoch(train)  [44/100][15/29]  lr: 4.9153e-04  eta: 2:32:22  time: 83.7235   loss: 0.1464
11/08 05:45:10 - Epoch(train)  [44/100][20/29]  lr: 4.6974e-04  eta: 2:21:56  time: 104.3065   loss: 0.1083
11/08 05:45:50 - Epoch(train)  [44/100][25/29]  lr: 4.4801e-04  eta: 2:36:47  time: 144.4575   loss: 0.1112
11/08 05:46:39 - Epoch(train)  [45/100][5/29]  lr: 4.0918e-04  eta: 3:50:29  time: 42.7089   loss: 0.0953
11/08 05:47:02 - Epoch(train)  [45/100][10/29]  lr: 3.8783e-04  eta: 2:57:34  time: 66.0125   loss: 0.1425
11/08 05:47:25 - Epoch(train)  [45/100][15/29]  lr: 3.6670e-04  eta: 2:38:58  time: 88.9188   loss: 0.1126
11/08 05:47:46 - Epoch(train)  [45/100][20/29]  lr: 3.4582e-04  eta: 2:25:55  time: 109.1728   loss: 0.0723
11/08 05:48:27 - Epoch(train)  [45/100][25/29]  lr: 3.2523e-04  eta: 2:40:25  time: 150.4911   loss: 0.1095

11/08 05:48:32 - Epoch(test) - all: [45/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 05:49:19 - Epoch(test) : [5/16]
11/08 05:49:41 - Epoch(test) : [10/16]
11/08 05:50:03 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.66、Recall: 0.77、F1-score: 0.71、Average_Precision: 0.84

11/08 05:50:04 - Epoch(test) - inshore: [45/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.49、Recall: 0.61、F1-score: 0.55、Average_Precision: 0.58
11/08 05:50:41 - Best model achieved at epoch 45, with all test image AP 0.8422
11/08 05:51:27 - Epoch(train)  [46/100][5/29]  lr: 2.8905e-04  eta: 4:0:54  time: 45.4544   loss: 0.1278
11/08 05:51:49 - Epoch(train)  [46/100][10/29]  lr: 2.6949e-04  eta: 2:58:49  time: 67.6931   loss: 0.0534
11/08 05:52:10 - Epoch(train)  [46/100][15/29]  lr: 2.5038e-04  eta: 2:35:44  time: 88.7098   loss: 0.0935
11/08 05:52:33 - Epoch(train)  [46/100][20/29]  lr: 2.3173e-04  eta: 2:27:10  time: 112.1382   loss: 0.1009
11/08 05:53:16 - Epoch(train)  [46/100][25/29]  lr: 2.1361e-04  eta: 2:42:11  time: 154.9569   loss: 0.1037
11/08 05:54:07 - Epoch(train)  [47/100][5/29]  lr: 1.8237e-04  eta: 3:52:48  time: 44.7432   loss: 0.1144
11/08 05:54:30 - Epoch(train)  [47/100][10/29]  lr: 1.6585e-04  eta: 2:55:54  time: 67.8289   loss: 0.0747
11/08 05:54:53 - Epoch(train)  [47/100][15/29]  lr: 1.4997e-04  eta: 2:35:22  time: 90.1629   loss: 0.1076
11/08 05:55:16 - Epoch(train)  [47/100][20/29]  lr: 1.3476e-04  eta: 2:26:10  time: 113.4563   loss: 0.0889
11/08 05:55:59 - Epoch(train)  [47/100][25/29]  lr: 1.2024e-04  eta: 2:40:43  time: 156.4472   loss: 0.1211
11/08 05:56:50 - Epoch(train)  [48/100][5/29]  lr: 9.5944e-05  eta: 3:54:47  time: 45.9767   loss: 0.0805
11/08 05:57:11 - Epoch(train)  [48/100][10/29]  lr: 8.3516e-05  eta: 2:50:28  time: 66.9868   loss: 0.0862
11/08 05:57:34 - Epoch(train)  [48/100][15/29]  lr: 7.1881e-05  eta: 2:31:22  time: 89.5132   loss: 0.0939
11/08 05:57:58 - Epoch(train)  [48/100][20/29]  lr: 6.1061e-05  eta: 2:23:4  time: 113.1805   loss: 0.0747
11/08 05:58:36 - Epoch(train)  [48/100][25/29]  lr: 5.1078e-05  eta: 2:32:29  time: 151.2875   loss: 0.0702
11/08 05:59:27 - Epoch(train)  [49/100][5/29]  lr: 3.5274e-05  eta: 3:45:5  time: 44.9282   loss: 0.0687
11/08 05:59:49 - Epoch(train)  [49/100][10/29]  lr: 2.7727e-05  eta: 2:46:23  time: 66.6425   loss: 0.0770
11/08 06:00:11 - Epoch(train)  [49/100][15/29]  lr: 2.1080e-05  eta: 2:27:4  time: 88.6593   loss: 0.1173
11/08 06:00:34 - Epoch(train)  [49/100][20/29]  lr: 1.5345e-05  eta: 2:18:42  time: 111.8653   loss: 0.0968
11/08 06:01:16 - Epoch(train)  [49/100][25/29]  lr: 1.0533e-05  eta: 2:32:3  time: 153.8021   loss: 0.1020
11/08 06:02:05 - Epoch(train)  [50/100][5/29]  lr: 4.2251e-06  eta: 3:39:12  time: 44.6148   loss: 0.0627
11/08 06:02:27 - Epoch(train)  [50/100][10/29]  lr: 2.0406e-06  eta: 2:43:32  time: 66.7990   loss: 0.1005
11/08 06:02:51 - Epoch(train)  [50/100][15/29]  lr: 8.0443e-07  eta: 2:27:35  time: 90.7330   loss: 0.1183
11/08 06:03:14 - Epoch(train)  [50/100][20/29]  lr: 9.9998e-04  eta: 2:18:9  time: 113.6368   loss: 0.1002
11/08 06:03:53 - Epoch(train)  [50/100][25/29]  lr: 9.9932e-04  eta: 2:27:35  time: 152.2640   loss: 0.1125

11/08 06:03:59 - Epoch(test) - all: [50/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 06:04:48 - Epoch(test) : [5/16]
11/08 06:05:11 - Epoch(test) : [10/16]
11/08 06:05:34 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.66、Recall: 0.75、F1-score: 0.70、Average_Precision: 0.83

11/08 06:05:35 - Epoch(test) - inshore: [50/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.49、Recall: 0.57、F1-score: 0.53、Average_Precision: 0.56
11/08 06:06:57 - Epoch(train)  [51/100][5/29]  lr: 9.9572e-04  eta: 3:34:21  time: 44.5049   loss: 0.0860
11/08 06:07:21 - Epoch(train)  [51/100][10/29]  lr: 9.9241e-04  eta: 2:42:28  time: 67.6992   loss: 0.1257
11/08 06:07:40 - Epoch(train)  [51/100][15/29]  lr: 9.8815e-04  eta: 2:19:31  time: 87.5051   loss: 0.1318
11/08 06:08:03 - Epoch(train)  [51/100][20/29]  lr: 9.8297e-04  eta: 2:11:2  time: 109.9696   loss: 0.1618
11/08 06:08:46 - Epoch(train)  [51/100][25/29]  lr: 9.7687e-04  eta: 2:25:4  time: 152.7080   loss: 0.1037
11/08 06:09:38 - Epoch(train)  [52/100][5/29]  lr: 9.6361e-04  eta: 3:38:20  time: 46.2584   loss: 0.1130
11/08 06:10:00 - Epoch(train)  [52/100][10/29]  lr: 9.5500e-04  eta: 2:40:26  time: 68.2239   loss: 0.2003
11/08 06:10:24 - Epoch(train)  [52/100][15/29]  lr: 9.4553e-04  eta: 2:23:44  time: 92.0139   loss: 0.0818
11/08 06:10:46 - Epoch(train)  [52/100][20/29]  lr: 9.3521e-04  eta: 2:13:31  time: 114.3649   loss: 0.0955
11/08 06:11:31 - Epoch(train)  [52/100][25/29]  lr: 9.2406e-04  eta: 2:28:6  time: 159.1403   loss: 0.1269
11/08 06:12:22 - Epoch(train)  [53/100][5/29]  lr: 9.0198e-04  eta: 3:26:14  time: 44.6086   loss: 0.1267
11/08 06:12:43 - Epoch(train)  [53/100][10/29]  lr: 8.8863e-04  eta: 2:29:50  time: 65.0553   loss: 0.1086
11/08 06:13:05 - Epoch(train)  [53/100][15/29]  lr: 8.7454e-04  eta: 2:14:24  time: 87.8514   loss: 0.0607
11/08 06:13:28 - Epoch(train)  [53/100][20/29]  lr: 8.5974e-04  eta: 2:5:59  time: 110.1904   loss: 0.0969
11/08 06:14:08 - Epoch(train)  [53/100][25/29]  lr: 8.4426e-04  eta: 2:17:32  time: 150.9291   loss: 0.1422
11/08 06:14:58 - Epoch(train)  [54/100][5/29]  lr: 8.1475e-04  eta: 3:17:41  time: 43.6726   loss: 0.0819
11/08 06:15:22 - Epoch(train)  [54/100][10/29]  lr: 7.9751e-04  eta: 2:31:16  time: 67.0869   loss: 0.1591
11/08 06:15:45 - Epoch(train)  [54/100][15/29]  lr: 7.7971e-04  eta: 2:15:27  time: 90.4363   loss: 0.0648
11/08 06:16:07 - Epoch(train)  [54/100][20/29]  lr: 7.6137e-04  eta: 2:5:42  time: 112.3298   loss: 0.1162
11/08 06:16:47 - Epoch(train)  [54/100][25/29]  lr: 7.4253e-04  eta: 2:16:7  time: 152.6117   loss: 0.0678
11/08 06:17:39 - Epoch(train)  [55/100][5/29]  lr: 7.0749e-04  eta: 3:21:53  time: 45.5751   loss: 0.1173
11/08 06:18:03 - Epoch(train)  [55/100][10/29]  lr: 6.8746e-04  eta: 2:32:42  time: 69.1996   loss: 0.0930
11/08 06:18:23 - Epoch(train)  [55/100][15/29]  lr: 6.6707e-04  eta: 2:11:54  time: 90.0085   loss: 0.0806
11/08 06:18:45 - Epoch(train)  [55/100][20/29]  lr: 6.4636e-04  eta: 2:2:27  time: 111.8358   loss: 0.1018
11/08 06:19:26 - Epoch(train)  [55/100][25/29]  lr: 6.2538e-04  eta: 2:12:58  time: 152.3774   loss: 0.0613

11/08 06:19:32 - Epoch(test) - all: [55/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 06:20:20 - Epoch(test) : [5/16]
11/08 06:20:44 - Epoch(test) : [10/16]
11/08 06:21:08 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.67、Recall: 0.78、F1-score: 0.72、Average_Precision: 0.85

11/08 06:21:09 - Epoch(test) - inshore: [55/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.51、Recall: 0.61、F1-score: 0.55、Average_Precision: 0.60
11/08 06:21:49 - Best model achieved at epoch 55, with all test image AP 0.8501
11/08 06:22:33 - Epoch(train)  [56/100][5/29]  lr: 5.8703e-04  eta: 3:10:32  time: 43.9728   loss: 0.1792
11/08 06:22:57 - Epoch(train)  [56/100][10/29]  lr: 5.6548e-04  eta: 2:27:12  time: 68.2033   loss: 0.0720
11/08 06:23:21 - Epoch(train)  [56/100][15/29]  lr: 5.4381e-04  eta: 2:12:22  time: 92.3539   loss: 0.1172
11/08 06:23:43 - Epoch(train)  [56/100][20/29]  lr: 5.2205e-04  eta: 2:2:1  time: 113.9582   loss: 0.0634
11/08 06:24:26 - Epoch(train)  [56/100][25/29]  lr: 5.0025e-04  eta: 2:13:47  time: 156.7905   loss: 0.0886
11/08 06:25:15 - Epoch(train)  [57/100][5/29]  lr: 4.6104e-04  eta: 3:6:21  time: 43.9861   loss: 0.0929
11/08 06:25:36 - Epoch(train)  [57/100][10/29]  lr: 4.3935e-04  eta: 2:17:20  time: 65.0929   loss: 0.1188
11/08 06:25:59 - Epoch(train)  [57/100][15/29]  lr: 4.1777e-04  eta: 2:2:53  time: 87.7119   loss: 0.0680
11/08 06:26:24 - Epoch(train)  [57/100][20/29]  lr: 3.9635e-04  eta: 1:57:39  time: 112.4155   loss: 0.1005
11/08 06:27:05 - Epoch(train)  [57/100][25/29]  lr: 3.7512e-04  eta: 2:8:1  time: 153.5039   loss: 0.0756
11/08 06:27:52 - Epoch(train)  [58/100][5/29]  lr: 3.3755e-04  eta: 2:51:26  time: 41.4115   loss: 0.0614
11/08 06:28:17 - Epoch(train)  [58/100][10/29]  lr: 3.1709e-04  eta: 2:15:47  time: 65.8647   loss: 0.1104
11/08 06:28:39 - Epoch(train)  [58/100][15/29]  lr: 2.9698e-04  eta: 2:0:32  time: 88.0523   loss: 0.1001
11/08 06:28:58 - Epoch(train)  [58/100][20/29]  lr: 2.7726e-04  eta: 1:49:51  time: 107.4347   loss: 0.1042
11/08 06:29:39 - Epoch(train)  [58/100][25/29]  lr: 2.5797e-04  eta: 2:0:35  time: 148.0344   loss: 0.0689
11/08 06:30:32 - Epoch(train)  [59/100][5/29]  lr: 2.2442e-04  eta: 3:11:42  time: 47.4131   loss: 0.0726
11/08 06:30:53 - Epoch(train)  [59/100][10/29]  lr: 2.0650e-04  eta: 2:17:7  time: 68.1050   loss: 0.0719
11/08 06:31:15 - Epoch(train)  [59/100][15/29]  lr: 1.8915e-04  eta: 2:0:0  time: 89.7784   loss: 0.0903
11/08 06:31:36 - Epoch(train)  [59/100][20/29]  lr: 1.7238e-04  eta: 1:51:4  time: 111.2600   loss: 0.0756
11/08 06:32:17 - Epoch(train)  [59/100][25/29]  lr: 1.5624e-04  eta: 2:1:1  time: 152.1669   loss: 0.0464
11/08 06:33:06 - Epoch(train)  [60/100][5/29]  lr: 1.2886e-04  eta: 2:46:10  time: 42.1063   loss: 0.0688
11/08 06:33:29 - Epoch(train)  [60/100][10/29]  lr: 1.1463e-04  eta: 2:8:39  time: 65.4765   loss: 0.0719
11/08 06:33:49 - Epoch(train)  [60/100][15/29]  lr: 1.0113e-04  eta: 1:51:48  time: 85.7177   loss: 0.0529
11/08 06:34:10 - Epoch(train)  [60/100][20/29]  lr: 8.8393e-05  eta: 1:43:58  time: 106.7326   loss: 0.0716
11/08 06:34:50 - Epoch(train)  [60/100][25/29]  lr: 7.6438e-05  eta: 1:53:29  time: 146.2523   loss: 0.0672

11/08 06:34:55 - Epoch(test) - all: [60/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 06:35:42 - Epoch(test) : [5/16]
11/08 06:36:01 - Epoch(test) : [10/16]
11/08 06:36:27 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.70、Recall: 0.75、F1-score: 0.73、Average_Precision: 0.85

11/08 06:36:28 - Epoch(test) - inshore: [60/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.56、Recall: 0.57、F1-score: 0.57、Average_Precision: 0.61
11/08 06:37:03 - Best model achieved at epoch 60, with all test image AP 0.8536
11/08 06:37:46 - Epoch(train)  [61/100][5/29]  lr: 5.6966e-05  eta: 2:46:5  time: 43.1423   loss: 0.0557
11/08 06:38:07 - Epoch(train)  [61/100][10/29]  lr: 4.7323e-05  eta: 2:2:59  time: 64.1736   loss: 0.0610
11/08 06:38:31 - Epoch(train)  [61/100][15/29]  lr: 3.8541e-05  eta: 1:51:18  time: 87.4975   loss: 0.0549
11/08 06:38:52 - Epoch(train)  [61/100][20/29]  lr: 3.0639e-05  eta: 1:43:49  time: 109.2818   loss: 0.0667
11/08 06:39:34 - Epoch(train)  [61/100][25/29]  lr: 2.3630e-05  eta: 1:53:50  time: 150.4578   loss: 0.0557
11/08 06:40:20 - Epoch(train)  [62/100][5/29]  lr: 1.3309e-05  eta: 2:27:28  time: 39.2938   loss: 0.0688
11/08 06:40:46 - Epoch(train)  [62/100][10/29]  lr: 8.8684e-06  eta: 2:1:52  time: 65.2284   loss: 0.0701
11/08 06:41:05 - Epoch(train)  [62/100][15/29]  lr: 5.3635e-06  eta: 1:45:22  time: 84.9850   loss: 0.0945
11/08 06:41:28 - Epoch(train)  [62/100][20/29]  lr: 2.8007e-06  eta: 1:40:2  time: 108.0636   loss: 0.0991
11/08 06:42:04 - Epoch(train)  [62/100][25/29]  lr: 1.1849e-06  eta: 1:45:57  time: 143.7113   loss: 0.1019
11/08 06:42:52 - Epoch(train)  [63/100][5/29]  lr: 9.9983e-04  eta: 2:37:59  time: 43.2087   loss: 0.0517
11/08 06:43:12 - Epoch(train)  [63/100][10/29]  lr: 9.9878e-04  eta: 1:54:13  time: 62.7653   loss: 0.0964
11/08 06:43:34 - Epoch(train)  [63/100][15/29]  lr: 9.9679e-04  eta: 1:42:29  time: 84.8590   loss: 0.0642
11/08 06:43:54 - Epoch(train)  [63/100][20/29]  lr: 9.9385e-04  eta: 1:34:57  time: 105.3223   loss: 0.1154
11/08 06:44:37 - Epoch(train)  [63/100][25/29]  lr: 9.8997e-04  eta: 1:45:53  time: 147.4853   loss: 0.1365
11/08 06:45:24 - Epoch(train)  [64/100][5/29]  lr: 9.8064e-04  eta: 2:25:21  time: 40.8303   loss: 0.1595
11/08 06:45:46 - Epoch(train)  [64/100][10/29]  lr: 9.7417e-04  eta: 1:50:53  time: 62.5881   loss: 0.1061
11/08 06:46:08 - Epoch(train)  [64/100][15/29]  lr: 9.6681e-04  eta: 1:39:39  time: 84.7718   loss: 0.1025
11/08 06:46:32 - Epoch(train)  [64/100][20/29]  lr: 9.5855e-04  eta: 1:34:42  time: 107.9277   loss: 0.0894
11/08 06:47:10 - Epoch(train)  [64/100][25/29]  lr: 9.4942e-04  eta: 1:41:58  time: 145.9450   loss: 0.0789
11/08 06:48:01 - Epoch(train)  [65/100][5/29]  lr: 9.3085e-04  eta: 2:36:57  time: 45.3217   loss: 0.0600
11/08 06:48:21 - Epoch(train)  [65/100][10/29]  lr: 9.1938e-04  eta: 1:53:3  time: 65.6007   loss: 0.0531
11/08 06:48:43 - Epoch(train)  [65/100][15/29]  lr: 9.0710e-04  eta: 1:40:14  time: 87.6736   loss: 0.0896
11/08 06:49:04 - Epoch(train)  [65/100][20/29]  lr: 8.9406e-04  eta: 1:33:5  time: 109.0835   loss: 0.0776
11/08 06:49:42 - Epoch(train)  [65/100][25/29]  lr: 8.8026e-04  eta: 1:39:38  time: 146.6672   loss: 0.0768

11/08 06:49:48 - Epoch(test) - all: [65/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 06:50:30 - Epoch(test) : [5/16]
11/08 06:50:52 - Epoch(test) : [10/16]
11/08 06:51:13 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.69、Recall: 0.75、F1-score: 0.72、Average_Precision: 0.84

11/08 06:51:14 - Epoch(test) - inshore: [65/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.53、Recall: 0.59、F1-score: 0.56、Average_Precision: 0.60
11/08 06:52:33 - Epoch(train)  [66/100][5/29]  lr: 8.5363e-04  eta: 2:24:57  time: 43.0555   loss: 0.0894
11/08 06:52:56 - Epoch(train)  [66/100][10/29]  lr: 8.3788e-04  eta: 1:49:51  time: 65.5827   loss: 0.0793
11/08 06:53:20 - Epoch(train)  [66/100][15/29]  lr: 8.2148e-04  eta: 1:39:22  time: 89.4375   loss: 0.0954
11/08 06:53:41 - Epoch(train)  [66/100][20/29]  lr: 8.0448e-04  eta: 1:31:53  time: 110.8157   loss: 0.0988
11/08 06:54:21 - Epoch(train)  [66/100][25/29]  lr: 7.8689e-04  eta: 1:39:27  time: 150.6999   loss: 0.0614
11/08 06:55:12 - Epoch(train)  [67/100][5/29]  lr: 7.5389e-04  eta: 2:26:55  time: 44.9298   loss: 0.1011
11/08 06:55:31 - Epoch(train)  [67/100][10/29]  lr: 7.3487e-04  eta: 1:44:10  time: 64.0447   loss: 0.0932
11/08 06:55:53 - Epoch(train)  [67/100][15/29]  lr: 7.1540e-04  eta: 1:32:54  time: 86.1093   loss: 0.0637
11/08 06:56:15 - Epoch(train)  [67/100][20/29]  lr: 6.9552e-04  eta: 1:26:56  time: 107.9921   loss: 0.1036
11/08 06:56:54 - Epoch(train)  [67/100][25/29]  lr: 6.7527e-04  eta: 1:34:10  time: 146.9856   loss: 0.0710
11/08 06:57:44 - Epoch(train)  [68/100][5/29]  lr: 6.3800e-04  eta: 2:15:58  time: 42.8497   loss: 0.0700
11/08 06:58:07 - Epoch(train)  [68/100][10/29]  lr: 6.1691e-04  eta: 1:44:19  time: 66.0941   loss: 0.0879
11/08 06:58:28 - Epoch(train)  [68/100][15/29]  lr: 5.9561e-04  eta: 1:31:9  time: 87.0945   loss: 0.0658
11/08 06:58:48 - Epoch(train)  [68/100][20/29]  lr: 5.7412e-04  eta: 1:23:38  time: 107.1184   loss: 0.0924
11/08 06:59:30 - Epoch(train)  [68/100][25/29]  lr: 5.5249e-04  eta: 1:32:32  time: 148.9434   loss: 0.0743
11/08 07:00:18 - Epoch(train)  [69/100][5/29]  lr: 5.1333e-04  eta: 2:13:11  time: 43.2901   loss: 0.0562
11/08 07:00:38 - Epoch(train)  [69/100][10/29]  lr: 4.9153e-04  eta: 1:37:23  time: 63.6586   loss: 0.0871
11/08 07:01:01 - Epoch(train)  [69/100][15/29]  lr: 4.6974e-04  eta: 1:27:38  time: 86.3894   loss: 0.1098
11/08 07:01:22 - Epoch(train)  [69/100][20/29]  lr: 4.4801e-04  eta: 1:21:43  time: 108.0043   loss: 0.0858
11/08 07:02:00 - Epoch(train)  [69/100][25/29]  lr: 4.2638e-04  eta: 1:27:38  time: 145.5918   loss: 0.0801
11/08 07:02:45 - Epoch(train)  [70/100][5/29]  lr: 3.8783e-04  eta: 1:58:18  time: 39.7008   loss: 0.0521
11/08 07:03:10 - Epoch(train)  [70/100][10/29]  lr: 3.6670e-04  eta: 1:35:43  time: 64.6031   loss: 0.0573
11/08 07:03:32 - Epoch(train)  [70/100][15/29]  lr: 3.4582e-04  eta: 1:25:34  time: 87.1295   loss: 0.1054
11/08 07:03:51 - Epoch(train)  [70/100][20/29]  lr: 3.2523e-04  eta: 1:17:30  time: 105.8231   loss: 0.0369
11/08 07:04:32 - Epoch(train)  [70/100][25/29]  lr: 3.0498e-04  eta: 1:25:50  time: 147.3257   loss: 0.0515

11/08 07:04:37 - Epoch(test) - all: [70/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 07:05:25 - Epoch(test) : [5/16]
11/08 07:05:49 - Epoch(test) : [10/16]
11/08 07:06:13 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.68、Recall: 0.79、F1-score: 0.73、Average_Precision: 0.86

11/08 07:06:14 - Epoch(test) - inshore: [70/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.54、Recall: 0.62、F1-score: 0.58、Average_Precision: 0.61
11/08 07:06:51 - Best model achieved at epoch 70, with all test image AP 0.8552
11/08 07:07:38 - Epoch(train)  [71/100][5/29]  lr: 2.6949e-04  eta: 2:14:11  time: 46.5430   loss: 0.0411
11/08 07:07:57 - Epoch(train)  [71/100][10/29]  lr: 2.5038e-04  eta: 1:33:24  time: 65.1712   loss: 0.0705
11/08 07:08:17 - Epoch(train)  [71/100][15/29]  lr: 2.3173e-04  eta: 1:21:33  time: 85.8568   loss: 0.0492
11/08 07:08:40 - Epoch(train)  [71/100][20/29]  lr: 2.1361e-04  eta: 1:17:8  time: 108.8963   loss: 0.0438
11/08 07:09:17 - Epoch(train)  [71/100][25/29]  lr: 1.9602e-04  eta: 1:21:56  time: 145.4557   loss: 0.0486
11/08 07:10:07 - Epoch(train)  [72/100][5/29]  lr: 1.6585e-04  eta: 1:58:49  time: 42.6434   loss: 0.0480
11/08 07:10:29 - Epoch(train)  [72/100][10/29]  lr: 1.4997e-04  eta: 1:30:12  time: 65.1268   loss: 0.0970
11/08 07:10:50 - Epoch(train)  [72/100][15/29]  lr: 1.3476e-04  eta: 1:18:58  time: 86.0564   loss: 0.0368
11/08 07:11:10 - Epoch(train)  [72/100][20/29]  lr: 1.2024e-04  eta: 1:12:30  time: 105.9804   loss: 0.0266
11/08 07:11:53 - Epoch(train)  [72/100][25/29]  lr: 1.0644e-04  eta: 1:20:39  time: 148.2648   loss: 0.0442
11/08 07:12:42 - Epoch(train)  [73/100][5/29]  lr: 8.3516e-05  eta: 2:1:21  time: 45.1156   loss: 0.0981
11/08 07:13:02 - Epoch(train)  [73/100][10/29]  lr: 7.1881e-05  eta: 1:27:1  time: 65.1076   loss: 0.0218
11/08 07:13:25 - Epoch(train)  [73/100][15/29]  lr: 6.1061e-05  eta: 1:17:32  time: 87.5690   loss: 0.0424
11/08 07:13:48 - Epoch(train)  [73/100][20/29]  lr: 5.1078e-05  eta: 1:12:43  time: 110.1985   loss: 0.0622
11/08 07:14:27 - Epoch(train)  [73/100][25/29]  lr: 4.1949e-05  eta: 1:18:44  time: 150.0751   loss: 0.0560
11/08 07:15:17 - Epoch(train)  [74/100][5/29]  lr: 2.7727e-05  eta: 1:52:52  time: 43.5222   loss: 0.0225
11/08 07:15:42 - Epoch(train)  [74/100][10/29]  lr: 2.1080e-05  eta: 1:27:37  time: 68.0185   loss: 0.0352
11/08 07:16:02 - Epoch(train)  [74/100][15/29]  lr: 1.5345e-05  eta: 1:15:45  time: 88.7820   loss: 0.0257
11/08 07:16:23 - Epoch(train)  [74/100][20/29]  lr: 1.0533e-05  eta: 1:9:22  time: 109.1004   loss: 0.0637
11/08 07:17:03 - Epoch(train)  [74/100][25/29]  lr: 6.6528e-06  eta: 1:15:35  time: 149.5831   loss: 0.0247
11/08 07:17:53 - Epoch(train)  [75/100][5/29]  lr: 2.0406e-06  eta: 1:51:22  time: 44.6112   loss: 0.0401
11/08 07:18:14 - Epoch(train)  [75/100][10/29]  lr: 8.0443e-07  eta: 1:20:59  time: 65.3178   loss: 0.0559
11/08 07:18:37 - Epoch(train)  [75/100][15/29]  lr: 9.9998e-04  eta: 1:12:46  time: 88.6359   loss: 0.0523
11/08 07:18:59 - Epoch(train)  [75/100][20/29]  lr: 9.9932e-04  eta: 1:7:37  time: 110.5625   loss: 0.0433
11/08 07:19:34 - Epoch(train)  [75/100][25/29]  lr: 9.9770e-04  eta: 1:10:59  time: 146.0830   loss: 0.0744

11/08 07:19:42 - Epoch(test) - all: [75/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 07:20:28 - Epoch(test) : [5/16]
11/08 07:20:50 - Epoch(test) : [10/16]
11/08 07:21:10 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.68、Recall: 0.75、F1-score: 0.72、Average_Precision: 0.84

11/08 07:21:10 - Epoch(test) - inshore: [75/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.53、Recall: 0.57、F1-score: 0.55、Average_Precision: 0.58
11/08 07:22:29 - Epoch(train)  [76/100][5/29]  lr: 9.9241e-04  eta: 1:41:40  time: 42.3666   loss: 0.0700
11/08 07:22:53 - Epoch(train)  [76/100][10/29]  lr: 9.8815e-04  eta: 1:19:9  time: 66.4313   loss: 0.0849
11/08 07:23:14 - Epoch(train)  [76/100][15/29]  lr: 9.8297e-04  eta: 1:9:14  time: 87.7775   loss: 0.0946
11/08 07:23:35 - Epoch(train)  [76/100][20/29]  lr: 9.7687e-04  eta: 1:3:42  time: 108.4396   loss: 0.0970
11/08 07:24:15 - Epoch(train)  [76/100][25/29]  lr: 9.6986e-04  eta: 1:9:14  time: 148.3810   loss: 0.1389
11/08 07:25:03 - Epoch(train)  [77/100][5/29]  lr: 9.5500e-04  eta: 1:39:30  time: 43.2034   loss: 0.0884
11/08 07:25:25 - Epoch(train)  [77/100][10/29]  lr: 9.4553e-04  eta: 1:14:20  time: 65.0254   loss: 0.0762
11/08 07:25:46 - Epoch(train)  [77/100][15/29]  lr: 9.3521e-04  eta: 1:5:13  time: 86.1980   loss: 0.0649
11/08 07:26:08 - Epoch(train)  [77/100][20/29]  lr: 9.2406e-04  eta: 1:0:33  time: 107.5097   loss: 0.0969
11/08 07:26:45 - Epoch(train)  [77/100][25/29]  lr: 9.1211e-04  eta: 1:4:44  time: 144.7114   loss: 0.0951
11/08 07:27:33 - Epoch(train)  [78/100][5/29]  lr: 8.8863e-04  eta: 1:32:19  time: 41.8363   loss: 0.0700
11/08 07:27:57 - Epoch(train)  [78/100][10/29]  lr: 8.7454e-04  eta: 1:12:42  time: 66.3979   loss: 0.0571
11/08 07:28:19 - Epoch(train)  [78/100][15/29]  lr: 8.5974e-04  eta: 1:3:37  time: 87.8293   loss: 0.0417
11/08 07:28:39 - Epoch(train)  [78/100][20/29]  lr: 8.4426e-04  eta: 0:58:3  time: 107.6970   loss: 0.0648
11/08 07:29:20 - Epoch(train)  [78/100][25/29]  lr: 8.2812e-04  eta: 1:3:38  time: 148.6842   loss: 0.0670
11/08 07:30:08 - Epoch(train)  [79/100][5/29]  lr: 7.9751e-04  eta: 1:31:28  time: 43.3569   loss: 0.0770
11/08 07:30:28 - Epoch(train)  [79/100][10/29]  lr: 7.7971e-04  eta: 1:6:53  time: 63.9048   loss: 0.0519
11/08 07:30:48 - Epoch(train)  [79/100][15/29]  lr: 7.6137e-04  eta: 0:58:7  time: 83.9773   loss: 0.0656
11/08 07:31:11 - Epoch(train)  [79/100][20/29]  lr: 7.4253e-04  eta: 0:54:55  time: 106.6616   loss: 0.0430
11/08 07:31:50 - Epoch(train)  [79/100][25/29]  lr: 7.2324e-04  eta: 0:59:21  time: 145.2646   loss: 0.0462
11/08 07:32:38 - Epoch(train)  [80/100][5/29]  lr: 6.8746e-04  eta: 1:23:30  time: 41.4736   loss: 0.0865
11/08 07:33:02 - Epoch(train)  [80/100][10/29]  lr: 6.6707e-04  eta: 1:4:43  time: 64.8369   loss: 0.0800
11/08 07:33:22 - Epoch(train)  [80/100][15/29]  lr: 6.4636e-04  eta: 0:56:20  time: 85.3689   loss: 0.0398
11/08 07:33:45 - Epoch(train)  [80/100][20/29]  lr: 6.2538e-04  eta: 0:52:58  time: 107.9426   loss: 0.0679
11/08 07:34:27 - Epoch(train)  [80/100][25/29]  lr: 6.0415e-04  eta: 0:58:32  time: 150.3732   loss: 0.0552

11/08 07:34:33 - Epoch(test) - all: [80/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 07:35:22 - Epoch(test) : [5/16]
11/08 07:35:43 - Epoch(test) : [10/16]
11/08 07:36:08 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.71、Recall: 0.75、F1-score: 0.73、Average_Precision: 0.86

11/08 07:36:09 - Epoch(test) - inshore: [80/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.58、Recall: 0.57、F1-score: 0.57、Average_Precision: 0.62
11/08 07:36:44 - Best model achieved at epoch 80, with all test image AP 0.8593
11/08 07:37:29 - Epoch(train)  [81/100][5/29]  lr: 5.6548e-04  eta: 1:25:27  time: 44.5847   loss: 0.0627
11/08 07:37:49 - Epoch(train)  [81/100][10/29]  lr: 5.4381e-04  eta: 1:0:59  time: 64.1973   loss: 0.0380
11/08 07:38:12 - Epoch(train)  [81/100][15/29]  lr: 5.2205e-04  eta: 0:54:53  time: 87.4490   loss: 0.0696
11/08 07:38:34 - Epoch(train)  [81/100][20/29]  lr: 5.0025e-04  eta: 0:51:5  time: 109.4665   loss: 0.0233
11/08 07:39:13 - Epoch(train)  [81/100][25/29]  lr: 4.7845e-04  eta: 0:54:41  time: 147.8155   loss: 0.0668
11/08 07:40:00 - Epoch(train)  [82/100][5/29]  lr: 4.3935e-04  eta: 1:15:59  time: 41.7558   loss: 0.0374
11/08 07:40:24 - Epoch(train)  [82/100][10/29]  lr: 4.1777e-04  eta: 0:59:28  time: 65.9655   loss: 0.0253
11/08 07:40:46 - Epoch(train)  [82/100][15/29]  lr: 3.9635e-04  eta: 0:52:42  time: 88.4982   loss: 0.0534
11/08 07:41:08 - Epoch(train)  [82/100][20/29]  lr: 3.7512e-04  eta: 0:48:56  time: 110.5997   loss: 0.0297
11/08 07:41:49 - Epoch(train)  [82/100][25/29]  lr: 3.5414e-04  eta: 0:52:56  time: 150.9817   loss: 0.0358
11/08 07:42:40 - Epoch(train)  [83/100][5/29]  lr: 3.1709e-04  eta: 1:17:34  time: 45.0125   loss: 0.0291
11/08 07:43:00 - Epoch(train)  [83/100][10/29]  lr: 2.9698e-04  eta: 0:55:34  time: 65.1319   loss: 0.0292
11/08 07:43:22 - Epoch(train)  [83/100][15/29]  lr: 2.7726e-04  eta: 0:49:6  time: 87.1874   loss: 0.0517
11/08 07:43:43 - Epoch(train)  [83/100][20/29]  lr: 2.5797e-04  eta: 0:45:19  time: 108.3644   loss: 0.0261
11/08 07:44:23 - Epoch(train)  [83/100][25/29]  lr: 2.3913e-04  eta: 0:49:11  time: 148.4667   loss: 0.0230
11/08 07:45:13 - Epoch(train)  [84/100][5/29]  lr: 2.0650e-04  eta: 1:9:31  time: 42.7420   loss: 0.0196
11/08 07:45:35 - Epoch(train)  [84/100][10/29]  lr: 1.8915e-04  eta: 0:52:29  time: 65.2085   loss: 0.0378
11/08 07:45:55 - Epoch(train)  [84/100][15/29]  lr: 1.7238e-04  eta: 0:45:5  time: 84.8938   loss: 0.0242
11/08 07:46:18 - Epoch(train)  [84/100][20/29]  lr: 1.5624e-04  eta: 0:42:29  time: 107.8024   loss: 0.0471
11/08 07:46:58 - Epoch(train)  [84/100][25/29]  lr: 1.4076e-04  eta: 0:46:4  time: 147.6771   loss: 0.0459
11/08 07:47:48 - Epoch(train)  [85/100][5/29]  lr: 1.1463e-04  eta: 1:8:10  time: 44.5607   loss: 0.0351
11/08 07:48:08 - Epoch(train)  [85/100][10/29]  lr: 1.0113e-04  eta: 0:49:6  time: 64.9109   loss: 0.0204
11/08 07:48:30 - Epoch(train)  [85/100][15/29]  lr: 8.8393e-05  eta: 0:43:28  time: 87.1444   loss: 0.0128
11/08 07:48:52 - Epoch(train)  [85/100][20/29]  lr: 7.6438e-05  eta: 0:40:17  time: 108.8989   loss: 0.0228
11/08 07:49:33 - Epoch(train)  [85/100][25/29]  lr: 6.5290e-05  eta: 0:43:47  time: 149.6040   loss: 0.0158

11/08 07:49:39 - Epoch(test) - all: [85/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 07:50:27 - Epoch(test) : [5/16]
11/08 07:50:51 - Epoch(test) : [10/16]
11/08 07:51:11 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.71、Recall: 0.75、F1-score: 0.73、Average_Precision: 0.86

11/08 07:51:12 - Epoch(test) - inshore: [85/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.59、Recall: 0.56、F1-score: 0.57、Average_Precision: 0.62
11/08 07:52:33 - Epoch(train)  [86/100][5/29]  lr: 4.7323e-05  eta: 1:2:42  time: 43.7462   loss: 0.0099
11/08 07:52:55 - Epoch(train)  [86/100][10/29]  lr: 3.8541e-05  eta: 0:46:18  time: 65.3854   loss: 0.0290
11/08 07:53:17 - Epoch(train)  [86/100][15/29]  lr: 3.0639e-05  eta: 0:41:1  time: 87.9120   loss: 0.0159
11/08 07:53:36 - Epoch(train)  [86/100][20/29]  lr: 2.3630e-05  eta: 0:36:50  time: 106.5137   loss: 0.0109
11/08 07:54:14 - Epoch(train)  [86/100][25/29]  lr: 1.7529e-05  eta: 0:39:24  time: 144.1629   loss: 0.0181
11/08 07:54:59 - Epoch(train)  [87/100][5/29]  lr: 8.8684e-06  eta: 0:54:3  time: 40.4449   loss: 0.0140
11/08 07:55:19 - Epoch(train)  [87/100][10/29]  lr: 5.3635e-06  eta: 0:39:43  time: 60.1820   loss: 0.0392
11/08 07:55:37 - Epoch(train)  [87/100][15/29]  lr: 2.8007e-06  eta: 0:34:0  time: 78.2617   loss: 0.0201
11/08 07:55:56 - Epoch(train)  [87/100][20/29]  lr: 1.1849e-06  eta: 0:31:15  time: 97.1722   loss: 0.0109
11/08 07:56:32 - Epoch(train)  [87/100][25/29]  lr: 5.1903e-07  eta: 0:33:48  time: 133.1065   loss: 0.0202
11/08 07:57:14 - Epoch(train)  [88/100][5/29]  lr: 9.9878e-04  eta: 0:46:30  time: 37.5056   loss: 0.0942
11/08 07:57:35 - Epoch(train)  [88/100][10/29]  lr: 9.9679e-04  eta: 0:35:45  time: 58.4642   loss: 0.0798
11/08 07:57:55 - Epoch(train)  [88/100][15/29]  lr: 9.9385e-04  eta: 0:31:31  time: 78.3862   loss: 0.1258
11/08 07:58:14 - Epoch(train)  [88/100][20/29]  lr: 9.8997e-04  eta: 0:28:51  time: 97.0031   loss: 0.0962
11/08 07:58:50 - Epoch(train)  [88/100][25/29]  lr: 9.8516e-04  eta: 0:31:14  time: 133.1347   loss: 0.1292
11/08 07:59:32 - Epoch(train)  [89/100][5/29]  lr: 9.7417e-04  eta: 0:42:26  time: 37.1274   loss: 0.0841
11/08 07:59:52 - Epoch(train)  [89/100][10/29]  lr: 9.6681e-04  eta: 0:32:4  time: 56.9512   loss: 0.0844
11/08 08:00:12 - Epoch(train)  [89/100][15/29]  lr: 9.5855e-04  eta: 0:28:31  time: 77.0993   loss: 0.0783
11/08 08:00:31 - Epoch(train)  [89/100][20/29]  lr: 9.4942e-04  eta: 0:26:24  time: 96.6060   loss: 0.0579
11/08 08:01:06 - Epoch(train)  [89/100][25/29]  lr: 9.3944e-04  eta: 0:28:18  time: 131.4751   loss: 0.0428
11/08 08:01:50 - Epoch(train)  [90/100][5/29]  lr: 9.1938e-04  eta: 0:39:29  time: 37.7358   loss: 0.1383
11/08 08:02:08 - Epoch(train)  [90/100][10/29]  lr: 9.0710e-04  eta: 0:28:52  time: 56.0565   loss: 0.0486
11/08 08:02:29 - Epoch(train)  [90/100][15/29]  lr: 8.9406e-04  eta: 0:25:53  time: 76.6504   loss: 0.0781
11/08 08:02:48 - Epoch(train)  [90/100][20/29]  lr: 8.8026e-04  eta: 0:23:56  time: 96.1053   loss: 0.0358
11/08 08:03:23 - Epoch(train)  [90/100][25/29]  lr: 8.6574e-04  eta: 0:25:41  time: 131.1214   loss: 0.0863

11/08 08:03:28 - Epoch(test) - all: [90/100]:
Threshold is drived from OTSU algorithm.
>>> data/hrsid/testsplit/all/images/647_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
>>> data/hrsid/testsplit/all/images/260_0_0.png has no keypoint founded with SIFT+Boost-B-attlay9
11/08 08:04:09 - Epoch(test) : [5/16]
11/08 08:04:28 - Epoch(test) : [10/16]
11/08 08:04:47 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.69、Recall: 0.79、F1-score: 0.74、Average_Precision: 0.86

11/08 08:04:48 - Epoch(test) - inshore: [90/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.56、Recall: 0.63、F1-score: 0.59、Average_Precision: 0.62
11/08 08:05:59 - Epoch(train)  [91/100][5/29]  lr: 8.3788e-04  eta: 0:36:2  time: 37.9345   loss: 0.0479
11/08 08:06:19 - Epoch(train)  [91/100][10/29]  lr: 8.2148e-04  eta: 0:27:17  time: 58.4854   loss: 0.0319
11/08 08:06:38 - Epoch(train)  [91/100][15/29]  lr: 8.0448e-04  eta: 0:23:41  time: 77.5189   loss: 0.0429
11/08 08:06:58 - Epoch(train)  [91/100][20/29]  lr: 7.8689e-04  eta: 0:21:51  time: 97.1748   loss: 0.0397
11/08 08:07:33 - Epoch(train)  [91/100][25/29]  lr: 7.6877e-04  eta: 0:23:22  time: 132.3535   loss: 0.0487
11/08 08:08:16 - Epoch(train)  [92/100][5/29]  lr: 7.3487e-04  eta: 0:32:33  time: 38.1629   loss: 0.0332
11/08 08:08:36 - Epoch(train)  [92/100][10/29]  lr: 7.1540e-04  eta: 0:24:2  time: 57.4850   loss: 0.0371
11/08 08:08:54 - Epoch(train)  [92/100][15/29]  lr: 6.9552e-04  eta: 0:20:42  time: 75.7769   loss: 0.0208
11/08 08:09:14 - Epoch(train)  [92/100][20/29]  lr: 6.7527e-04  eta: 0:19:10  time: 95.5002   loss: 0.0444
11/08 08:09:49 - Epoch(train)  [92/100][25/29]  lr: 6.5468e-04  eta: 0:20:31  time: 130.4595   loss: 0.0324
11/08 08:10:31 - Epoch(train)  [93/100][5/29]  lr: 6.1691e-04  eta: 0:28:21  time: 37.4718   loss: 0.0221
11/08 08:10:51 - Epoch(train)  [93/100][10/29]  lr: 5.9561e-04  eta: 0:21:14  time: 57.3875   loss: 0.0401
11/08 08:11:10 - Epoch(train)  [93/100][15/29]  lr: 5.7412e-04  eta: 0:18:23  time: 76.2628   loss: 0.0260
11/08 08:11:29 - Epoch(train)  [93/100][20/29]  lr: 5.5249e-04  eta: 0:16:54  time: 95.6632   loss: 0.0202
11/08 08:12:05 - Epoch(train)  [93/100][25/29]  lr: 5.3076e-04  eta: 0:18:7  time: 131.3171   loss: 0.0458
