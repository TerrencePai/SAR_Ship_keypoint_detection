nohup: ignoring input
Namespace(batch_size=128, descriptor='SuperPoint+Boost-B', eval_interval=5, expand_piexl=5, lr=0.001, multiprocessing_context='spawn', num_epochs=100, num_workers=4, print_interval=5, random_seed=0, save_path='', test=False, test_image='data/hrsid/testsplit/all/images/1_0_0.png', test_threshold=None, test_threshold_mul=1, warmup_step=20)
>>> device: cuda!
>>> feature_booster weights loaded from XrayDet/models/FeatureBooster/models/SuperPoint+Boost-B.pth!
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::add encountered 2 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::sigmoid encountered 10 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::softmax encountered 9 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::mul encountered 19 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::sum encountered 9 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::add_ encountered 18 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::tanh encountered 1 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::mean encountered 1 time(s)
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::sub encountered 1 time(s)
11/07 04:19:36 - mmengine - WARNING - The following submodules of the model were never called during the trace of the graph. They may be unused, or they were accessed by direct calls to .forward() or via other python methods. In the latter case they will have zeros for statistics, though their statistics will still contribute to their parent calling module.
feature_booster.attn_proj.layers.0.attn.dropout, feature_booster.attn_proj.layers.0.ffn.dropout, feature_booster.attn_proj.layers.1.attn.dropout, feature_booster.attn_proj.layers.1.ffn.dropout, feature_booster.attn_proj.layers.2.attn.dropout, feature_booster.attn_proj.layers.2.ffn.dropout, feature_booster.attn_proj.layers.3.attn.dropout, feature_booster.attn_proj.layers.3.ffn.dropout, feature_booster.attn_proj.layers.4.attn.dropout, feature_booster.attn_proj.layers.4.ffn.dropout, feature_booster.attn_proj.layers.5.attn.dropout, feature_booster.attn_proj.layers.5.ffn.dropout, feature_booster.attn_proj.layers.6.attn.dropout, feature_booster.attn_proj.layers.6.ffn.dropout, feature_booster.attn_proj.layers.7.attn.dropout, feature_booster.attn_proj.layers.7.ffn.dropout, feature_booster.attn_proj.layers.8.attn.dropout, feature_booster.attn_proj.layers.8.ffn.dropout, feature_booster.denc.dropout, feature_booster.dropout, feature_booster.kenc.dropout
11/07 04:19:36 - mmengine - WARNING - Unsupported operator aten::layer_norm encountered 19 time(s)
flops: 252215904
flops_str: 0.252G
activations: 882962
activations_str: 0.883M
params: 5183043
params_str: 5.183M
out_table: 
+---------------------------+----------------------+------------+--------------+
| module                    | #parameters or shape | #flops     | #activations |
+---------------------------+----------------------+------------+--------------+
| model                     | 5.183M               | 0.252G     | 0.883M       |
|  k                        |  ()                  |            |              |
|  feature_booster          |  5.117M              |  0.251G    |  0.877M      |
|   feature_booster.kenc.e… |   0.109M             |   5.323M   |   36.064K    |
|    feature_booster.kenc.… |    0.128K            |    4.704K  |    1.568K    |
|    feature_booster.kenc.… |    2.112K            |    0.1M    |    3.136K    |
|    feature_booster.kenc.… |    8.32K             |    0.401M  |    6.272K    |
|    feature_booster.kenc.… |    33.024K           |    1.606M  |    12.544K   |
|    feature_booster.kenc.… |    65.792K           |    3.211M  |    12.544K   |
|   feature_booster.denc.e… |   0.197M             |   9.634M   |   37.632K    |
|    feature_booster.denc.… |    65.792K           |    3.211M  |    12.544K   |
|    feature_booster.denc.… |    65.792K           |    3.211M  |    12.544K   |
|    feature_booster.denc.… |    65.792K           |    3.211M  |    12.544K   |
|   feature_booster.attn_p… |   4.744M             |   0.232G   |   0.79M      |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|    feature_booster.attn_… |    0.527M            |    25.816M |    87.808K   |
|   feature_booster.final_… |   65.792K            |   3.211M   |   12.544K    |
|    feature_booster.final… |    (256, 256)        |            |              |
|    feature_booster.final… |    (256,)            |            |              |
|   feature_booster.layer_… |   0.512K             |   62.72K   |   0          |
|    feature_booster.layer… |    (256,)            |            |              |
|    feature_booster.layer… |    (256,)            |            |              |
|  fc_out                   |  33.025K             |  1.612M    |  6.321K      |
|   fc_out.0                |   32.896K            |   1.606M   |   6.272K     |
|    fc_out.0.weight        |    (128, 256)        |            |              |
|    fc_out.0.bias          |    (128,)            |            |              |
|   fc_out.2                |   0.129K             |   6.272K   |   49         |
|    fc_out.2.weight        |    (1, 128)          |            |              |
|    fc_out.2.bias          |    (1,)              |            |              |
|  fc_thed                  |  33.025K             |  32.896K   |  0.129K      |
|   fc_thed.0               |   32.896K            |   32.768K  |   0.128K     |
|    fc_thed.0.weight       |    (128, 256)        |            |              |
|    fc_thed.0.bias         |    (128,)            |            |              |
|   fc_thed.2               |   0.129K             |   0.128K   |   1          |
|    fc_thed.2.weight       |    (1, 128)          |            |              |
|    fc_thed.2.bias         |    (1,)              |            |              |
+---------------------------+----------------------+------------+--------------+

out_arch: 
from torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, LinearLR, MultiStepLR, ChainedScheduler
from extract_features import normalize_keypoints, extractor_build, extract_img_feature
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, average_precision_score, precision_recall_curve
from FeatureBooster.featurebooster import FeatureBooster, MLP
from mmengine.analysis import get_model_complexity_info
from torch.utils.data import DataLoader, Dataset
from torch.nn.utils.rnn import pad_sequence
from torch.nn.utils import clip_grad_norm_
from mmdet.models.losses import FocalLoss
from mmengine.dataset import Compose
from sklearn.cluster import DBSCAN
import multiprocessing as mp
from os import path as osp
from pathlib import Path
from torch import nn
import numpy as np
import matplotlib
matplotlib.use('Agg')  # 设置Agg为后端
import matplotlib.pyplot as plt
import warnings
import argparse
import hashlib
import random
import torch
import time
import glob
import yaml
import cv2
import os
warnings.filterwarnings('ignore')

def parse_arguments():
    parser = argparse.ArgumentParser(description="Extract feature and refine descriptor using neural network to find ship keypoint.")
    
    parser.add_argument(
        '--descriptor', type=str, default='ORB+Boost-B',
        help='descriptor to extract' )
    
    parser.add_argument(
        '--num_epochs', type=int, default=100,)

    parser.add_argument(
        '--batch_size', type=int, default=256,)
    
    parser.add_argument(
        '--num_workers', type=int, default=16,)

    parser.add_argument(
        '--print_interval', type=int, default=5,)

    parser.add_argument(
        '--eval_interval', type=int, default=5,)

    parser.add_argument(
        '--lr', type=float, default=1e-3,)

    parser.add_argument(
        '--warmup_step', type=int, default=20,)

    parser.add_argument(
        '--random_seed', type=int, default=0,)

    parser.add_argument(
        '--expand_piexl', type=int, default=5,)

    parser.add_argument(
        '--test_threshold_mul', type=float, default=1,)
    
    parser.add_argument(
        '--test_threshold', type=float, default=None,)
           
    parser.add_argument(
        '--test_image', type=str, default='data/hrsid/testsplit/all/images/1_0_0.png' ,)
    
    parser.add_argument(
        '--test', action='store_true',)
    
    parser.add_argument(
        '--save_path', type=str, default='',)

    parser.add_argument(
        '--multiprocessing_context', type=str, default=None,)
        
    args = parser.parse_args()
    return args

def calculate_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        # 以块的方式读取文件，以防文件太大
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

# 定义舰船目标关键点检测模型（示例）
class ShipKeyPointsModel(nn.Module):
    def __init__(self, descriptor, device='cpu', pretrained =''):
        super().__init__() 
        self.device = device       
        # load json config file
        config_file = Path(__file__).parent / "FeatureBooster/config.yaml"
        with open(str(config_file), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[descriptor]
        self.k = nn.Parameter(torch.tensor(1.0))
        # Model
        self.feature_booster = FeatureBooster(self.config)
        # load the model
        if os.path.isfile(pretrained) and 'scratch' not in save_path:
            self.feature_booster.load_state_dict(torch.load(pretrained))
            print(f">>> feature_booster weights loaded from {pretrained}!")
        self.fc_out = MLP([self.config['output_dim'], self.config['output_dim']//2,1])
        self.fc_thed = MLP([self.config['output_dim'], self.config['output_dim']//2,1])
        self.to(self.device)
        
    def forward(self, x):
        x = self.feature_booster(x[...,self.config['keypoint_dim']:], x[...,:self.config['keypoint_dim']])
        x = (self.fc_out(x)-self.fc_thed(torch.mean(x,dim=-2,keepdim=True))).squeeze(-1)
        return torch.sigmoid(self.k* x)
    
# 定义数据集（示例）
class ShipKeyPointsDataset(Dataset):
    def __init__(self, data_root, descriptor, expand_piexl = 5, pipeline = [], img_suffix = 'png', debug = False, device = torch.device('cpu'), **kwargs):
        super(ShipKeyPointsDataset, self).__init__()
        self.transform = Compose(pipeline)  
        self.expand_piexl = expand_piexl
        self.debug = debug
        self.img_suffix = img_suffix
        self.descriptor = descriptor
        self.device = device
        config_file = Path(__file__).parent / "FeatureBooster/config.yaml"
        with open(str(config_file), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[descriptor]
        self.extractor = extractor_build(self.descriptor, device = self.device)
        if 'ann_file' in kwargs and kwargs['ann_file'] !='': 
            # train case  
            ann_dir = kwargs['ann_file']
            if isinstance(ann_dir, str):
                ann_dir = [ann_dir]
        else:
            ann_dir = []
        self.txt_files = []
        for path in ann_dir:
            self.txt_files.extend(glob.glob(osp.join(data_root, path, "**/*.txt"), recursive=True))

    def __len__(self):
        return len(self.txt_files)

    def load_data_info(self, idx):
        data_info = {}
        txt_file = self.txt_files[idx]
        img_id = osp.split(txt_file)[1][:-4]
        data_info['img_id'] = img_id
        img_name = img_id + f'.{self.img_suffix}'
        data_info['file_name'] = img_name
        
        img_path = txt_file.replace('.txt','.png').replace('labelTxt','images')
        data_info['img_path'] = img_path
        
        instances = []
        with open(txt_file) as f:
            s = f.readlines()
            for si in s:
                instance = {}
                bbox_info = si.split()
                instance['bbox_label'] = 0                       
                instance['ignore_flag'] = 0
                instance['bbox'] = [float(i) for i in bbox_info[:8]]
                instances.append(instance)
        data_info['instances'] = instances
        return data_info
                
    def __getitem__(self, idx):
        data_info = self.load_data_info(idx)
        bboxes = []
        if len(self.transform.transforms):       
            data = self.transform(data_info)
            image = data['inputs'].cpu().numpy().transpose(1, 2, 0)
            box = data['data_samples'].gt_instances.bboxes.tensor
            for box_id in range(box.shape[0]):
                instances = box[box_id]
                bboxes.append(np.array([(instances[i], instances[i + 1]) for i in range(0, len(instances), 2)], dtype=np.int32)) 
            del data
        else:
            image = cv2.cvtColor(cv2.imread(data_info['img_path']), cv2.COLOR_BGR2RGB)
            for instances in data_info['instances']:
               bboxes.append(np.array([(instances['bbox'][i], instances['bbox'][i + 1]) for i in range(0, len(instances['bbox']), 2)], dtype=np.int32)) 
        keypoints, descriptors, image = extract_img_feature(self.descriptor, image, self.extractor)    
        if len(keypoints) <= 0:
            print(f">>> {data_info['img_path']} has no keypoint founded with {self.descriptor}")
            return torch.zeros([2, self.config['keypoint_dim'] + self.config['descriptor_dim'] + 2], dtype = torch.float32, requires_grad = False), data_info['img_path']
        else:     
            tmp = np.zeros(image.shape[:2], dtype=np.uint8)
            if len(bboxes) > 0 :
                cv2.fillPoly(tmp, bboxes, 1)
            target = np.array([np.any(tmp[max(0,int(kp[1]-self.expand_piexl)):min(int(kp[1]+self.expand_piexl),image.shape[0]),
                                        max(0,int(kp[0]-self.expand_piexl)):min(int(kp[0]+self.expand_piexl),image.shape[1])]) 
                            for kp in keypoints ]) 
            # visualization
            if self.debug:
                print(f">>> VISUALIZATION: {data_info['img_path']}")
                kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])
                image = cv2.drawKeypoints(image, kps[target], None, color=(255,0,0,)) 
                image = cv2.drawKeypoints(image, kps[~target], None, color=(0,0,255)) 
                image = cv2.polylines(image, bboxes, isClosed=True, color=(0, 255, 0), thickness=2)
                cv2.imwrite('test_2.jpg', cv2.cvtColor(image, cv2.COLOR_RGB2BGR)) 
            if "+Boost-" in self.descriptor:
                # boosted the descriptor using trained model
                keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
                if 'orb' in self.descriptor.lower():
                    descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
                    descriptors = descriptors * 2.0 - 1.0
            # 最后的全一是为了区分对齐batch的padding数据              
            result = torch.from_numpy(np.concatenate([keypoints, descriptors, target.reshape(-1, 1), np.ones([len(target),1])], axis=-1))  
            result.requires_grad = False                 
            return result, data_info['img_path']

def get_metric(all_labels, all_output, all_thred):
    
    if isinstance(all_output, torch.Tensor):
        if all_output.requires_grad:
            all_output = all_output.detach()
        all_output = all_output.cpu().numpy()    
    if isinstance(all_labels, torch.Tensor):
        all_labels = all_labels.cpu().numpy()
    if isinstance(all_thred, torch.Tensor):
        all_thred = all_thred.cpu().numpy()
        
    all_predict = (all_output>all_thred) 
    all_labels = all_labels   
    all_output = all_output        
    accuracy = accuracy_score(all_labels, all_predict)
    precision = precision_score(all_labels, all_predict)
    recall = recall_score(all_labels, all_predict)
    F1_score = f1_score(all_labels, all_predict)
    AP_score = average_precision_score(all_labels, all_output)
    metric_dict = dict(Accuracy=accuracy, Precision=precision, Recall=recall, F1_score=F1_score, Average_Precision = AP_score)
    metric_str = "Accuracy: {Accuracy:.2f}、Precision: {Precision:.2f}、Recall: {Recall:.2f}、F1-score: {F1_score:.2f}、Average_Precision: {Average_Precision:.2f}".format(**metric_dict)
    print(metric_str)
    precisions, recalls, _ = precision_recall_curve(all_labels, all_output)
    PR_dict = dict(Precision=precisions, Recall=recalls)
    return metric_dict, PR_dict

def test(model, test_image, threshold = None, threshold_mul = 1): 
    model.eval()
    device = model.device
    extractor = extractor_build(descriptor)
    keypoints, descriptors, image = extract_img_feature(descriptor, cv2.cvtColor(cv2.imread(test_image), cv2.COLOR_BGR2RGB), extractor)
            
    boxes = []
    with open(test_image.replace('.png','.txt').replace('images','labelTxt'), 'r') as file:
        for line in file:
            coordinates = [float(coord) for coord in line.strip().split()[:8]]
            boxes.append(np.array([(coordinates[i], coordinates[i + 1]) for i in range(0, len(coordinates), 2)], dtype=np.int32))
    tmp = np.zeros(image.shape[:2], dtype=np.uint8)
    if len(boxes) > 0 :
        cv2.fillPoly(tmp, boxes, 1) 
    labels = np.array([np.any(tmp[max(0,int(kp[1]-expand_piexl)):min(int(kp[1]+expand_piexl),image.shape[0]),
                                max(0,int(kp[0]-expand_piexl)):min(int(kp[0]+expand_piexl),image.shape[1])]) 
                    for kp in keypoints ]) 
    
    kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])
    if "+Boost-" in descriptor:
        # boosted the descriptor using trained model
        keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
        if 'orb' in descriptor.lower():
            descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
            descriptors = descriptors * 2.0 - 1.0
    with torch.no_grad():                  
        output = model(torch.from_numpy(np.concatenate([keypoints, descriptors,], axis=-1)).to(device).float()).cpu().numpy()  
    if threshold is None:
        threshold, _  = cv2.threshold((output * 255).astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)  
        threshold = min(threshold/255.0 * threshold_mul, 0.95) 
        print(f"Threshold is drived from OTSU algorithm :{threshold}.")   
    else:
        print(f"Threshold is a constant value {threshold}.")     
    predict = (output > threshold)

    metric_dict, PR_dict = get_metric(labels, output, threshold)
    
    image = cv2.drawKeypoints(image, kps[predict], None, color=(0, 255, 0),) # 红色 虚警 
    # image = cv2.drawKeypoints(image, kps[(~predict)&(labels)], None, color=(0,0,255)) # Aqua蓝色 漏检 
    # image = cv2.drawKeypoints(image, kps[predict&labels], None, color=(0,0,255,),) # 黄色 正确预测(正样本)
    # image = cv2.drawKeypoints(image, kps[(~predict)&(~labels)], None, color= (0, 255, 0) ) # 绿色 正确预测(负样本)
    # image = cv2.drawKeypoints(image, kps[(label)], None, color=(255,0,0,))
    # image = cv2.drawKeypoints(image, kps[(~label)], None, color=(0,0,255))
    image = cv2.polylines(image, boxes, isClosed=True, color=(255, 255, 0), thickness=2)
    cv2.imwrite('test.jpg', cv2.cvtColor(image, cv2.COLOR_RGB2BGR))  
    return metric_dict, PR_dict

def evaluate(model, eva_loader, threshold = None, threshold_mul = 1):
    model.eval() 
    device = model.device

    all_output = torch.tensor([], device=device)
    all_labels = torch.tensor([], device=device)
    all_thred = torch.tensor([], device=device)     
    if threshold is None:
        print(f"Threshold is drived from OTSU algorithm.")
    else:
        print(f"Threshold is a constant value {threshold}.") 
        all_thred = threshold
    
    with torch.no_grad():
        for i, (data, img_paths) in enumerate(eva_loader):
            data = data.to(device).float()  # 将测试数据移动到GPU
            outputs = model(data[:,:,:-2])
            
            if threshold is None:
                for k in range(outputs.shape[0]):
                    thred, _  = cv2.threshold((outputs[k] * 255).cpu().numpy().astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                    all_thred = torch.cat([all_thred, torch.tensor([min(thred/255.0 * threshold_mul, 0.95)]*(int(data[k,:,-1].sum())), device=device)  ])            
                    
            all_output = torch.cat([all_output, outputs[data[:,:,-1].bool()]])    
            all_labels = torch.cat([all_labels, data[:,:,-2].bool()[data[:,:,-1].bool()]]) 

            if (i + 1) % print_interval == 0:
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) : [{i + 1}/{len(eva_loader)}]")

    return get_metric(all_labels, all_output, all_thred)
 

def train(model, train_loader):
    device = model.device
    # 定义损失函数和优化器
    criterion = nn.BCELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
    total_steps = len(train_loader) * num_epochs
    scheduler = ChainedScheduler([LinearLR(optimizer, start_factor=1.0 / 20, end_factor=1.0, total_iters=warmup_step, last_epoch=-1, verbose=False),
                                CosineAnnealingWarmRestarts(optimizer, T_0 = (total_steps - warmup_step)//8, T_mult=1, eta_min=5e-7, verbose=False)])
    
    best_AP = 0.0
    for epoch in range(num_epochs):       
        start_time = time.time()
        model.train()
        for i, (data, img_paths)  in enumerate(train_loader):
            optimizer.zero_grad()
            data = data.to(device).float()
            outputs = model(data[:,:,:-2])
            vaild = data[:,:,-1].reshape(-1).bool()
            loss = criterion(outputs.reshape(-1)[vaild], data[:,:,-2].reshape(-1)[vaild])
            loss.backward()

            clip_grad_norm_(model.parameters(), 35, 2)
            optimizer.step()
            scheduler.step()
            if (i + 1) % print_interval == 0:
                current_time = time.time()
                eta_seconds = (current_time - start_time) / (i+1) * ( (num_epochs - epoch ) * len(train_loader) - (i + 1))
                eta_str = str(int(eta_seconds // 3600)) + ':' + str(int((eta_seconds % 3600) // 60)) + ':' + str(int(eta_seconds % 60))
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Epoch(train)  [{epoch + 1}/{num_epochs}][{i + 1}/{len(train_loader)}]  lr: {optimizer.param_groups[0]['lr']:.4e}  eta: {eta_str}  time: {current_time - start_time:.4f}   loss: {loss:.4f}")

        if ((epoch+1) % eval_interval == 0) or (epoch == 0) or (epoch == num_epochs-1):
            # print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - all: [{epoch+1}/{num_epochs}]:") 
            # metric_dict, _ = evaluate(model, test_loader_all, test_threshold, test_threshold_mul)
            
            print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - offshore: [{epoch+1}/{num_epochs}]:")  
            metric_dict, _ = evaluate(model, test_loader_offshore, test_threshold, test_threshold_mul)
              
            print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - inshore: [{epoch+1}/{num_epochs}]:") 
            metric_dict, _ = evaluate(model, test_loader_inshore, test_threshold, test_threshold_mul)
            
            # print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - {test_image}:")                          
            # test(model,test_image, test_threshold, test_threshold_mul)
            
            # 检查是否有更好的模型，如果有，则保存权重
            if metric_dict['Average_Precision'] > best_AP:
                best_AP = metric_dict['Average_Precision']
                # 保存当前模型的权重
                torch.save(model.state_dict(), save_path)
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Best model achieved at epoch {epoch + 1}, with inshore AP {best_AP:.4f}")
            if (epoch >= num_epochs-1):
                last_save_path = 'work_dirs/' + descriptor+'_last_model_weight.pth'
                torch.save(model.state_dict(), last_save_path)
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Last model saved :{last_save_path}")  
    
def worker_init_fn(worker_id):
    # torch.cuda.set_device(worker_id) 指定数加载设备
    torch.cuda.manual_seed_all(worker_id)   

def custom_collate_fn(batch):
    results = [item[0] for item in batch]  # 提取每个样本的result
    img_paths = [item[1] for item in batch]  # 提取每个样本的img_path
    padded_results = pad_sequence(results, batch_first=True, padding_value=0)
    return padded_results, img_paths
    
if __name__ == '__main__': 

    args = parse_arguments()
    print(args)
    num_epochs = args.num_epochs
    batch_size = args.batch_size
    num_workers = args.num_workers
    print_interval = args.print_interval
    eval_interval = args.eval_interval
    lr = args.lr
    warmup_step = args.warmup_step
    random_seed = args.random_seed
    expand_piexl = args.expand_piexl
    test_threshold_mul = 2
    test_threshold = args.test_threshold
    descriptor = args.descriptor
    save_path = 'work_dirs/' + args.descriptor + '_best_model_weights_finetune.pth'
    model_weights = model_weights = args.save_path if len(args.save_path) else 'work_dirs/' + args.descriptor + '_best_model_weights_finetune.pth'
    test_image = args.test_image 
    multiprocessing_context = args.multiprocessing_context

    random.seed(args.random_seed)
    np.random.seed(args.random_seed)
    torch.manual_seed(args.random_seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed_all(args.random_seed)  

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu") 
    print(f">>> device: {device}!")          
    model = ShipKeyPointsModel(args.descriptor, device=device, pretrained = Path(__file__).parent / str("FeatureBooster/models/" + descriptor + ".pth"))

    train_pipeline = [
        dict(type='mmdet.LoadImageFromFile', backend_args=None),
        dict(type='mmdet.LoadAnnotations', with_bbox=True, box_type='qbox'),
        dict(
            type='mmrotate.ConvertBoxType',
            box_type_mapping=dict(gt_bboxes='rbox')),
        dict(type='mmdet.RandomCrop', crop_size=(800,800)),
        dict(
            type='mmrotate.RandomRotate',
            prob=0.5,
            angle_range=180,
            rotate_type='mmrotate.Rotate'),
        dict(
            type='mmdet.RandomFlip',
            prob=0.75,
            direction=['horizontal', 'vertical', 'diagonal']),
        dict(
            type='mmdet.RandomAffine',),    
        dict(
            type='mmdet.PhotoMetricDistortion',),    

        dict(
            type='mmrotate.ConvertBoxType',
            box_type_mapping=dict(gt_bboxes='qbox')),
        dict(type='mmdet.PackDetInputs', meta_keys=())
    ]
    
    train_pipeline =[]
    train_dataset = ShipKeyPointsDataset("data/hrsid/", args.descriptor, expand_piexl = args.expand_piexl, ann_file = ['trainsplit/','valplit/'], pipeline = train_pipeline, device = device)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=num_workers, collate_fn=custom_collate_fn, worker_init_fn=worker_init_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)
    test_dataset_offshore = ShipKeyPointsDataset("data/hrsid/", args.descriptor, expand_piexl = args.expand_piexl, ann_file = ['testsplit/offshore/'], device = device)
    test_loader_offshore = DataLoader(test_dataset_offshore, batch_size=batch_size, shuffle=False, num_workers=num_workers, collate_fn=custom_collate_fn, worker_init_fn=worker_init_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)
    test_dataset_inshore = ShipKeyPointsDataset("data/hrsid/", args.descriptor, expand_piexl = args.expand_piexl, ann_file = ['testsplit/inshore/'], device = device)
    test_loader_inshore = DataLoader(test_dataset_inshore, batch_size=batch_size, shuffle=False, num_workers=num_workers, collate_fn=custom_collate_fn, worker_init_fn=worker_init_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)
    test_dataset_all = ShipKeyPointsDataset("data/hrsid/", args.descriptor, expand_piexl = args.expand_piexl, ann_file = ['testsplit/all/'], device = device)
    test_loader_all = DataLoader(test_dataset_all, batch_size=batch_size, shuffle=False, num_workers=num_workers, collate_fn=custom_collate_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)

    outputs = get_model_complexity_info(
        model,
        input_shape=None,
        inputs=train_dataset.__getitem__(0)[0][:,:-2].float().to(device),  # the input tensor of the model
        show_table=True,  # show the complexity table
        show_arch=False)  # show the complexity arch
    for k, v in outputs.items():
        print(f"{k}: {v}")

    if not args.test:
        with open(__file__, 'r') as file:
            lines = file.readlines() 
        for line in lines:
            print(line[:-1])
        print('\n\n')
        train(model, train_loader)
        
    model.load_state_dict(torch.load(model_weights), strict=False)
    model_weights_md5 = calculate_md5(model_weights)
    print(f">>> model weights loaded from {model_weights} with MD5 {model_weights_md5}!")

    print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - all:") 
    metric_dict, PR_dict_all = evaluate(model, test_loader_all, args.test_threshold, args.test_threshold_mul)
        
    print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - offshore:")  
    metric_dict, PR_dict_offshore = evaluate(model, test_loader_offshore, args.test_threshold, args.test_threshold_mul)
        
    print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - inshore:") 
    metric_dict, PR_dict_inshore = evaluate(model, test_loader_inshore, args.test_threshold, args.test_threshold_mul)

    plt.figure()
    plt.plot(PR_dict_all['Recall'], PR_dict_all['Precision'], label='PR curve for all')
    plt.plot(PR_dict_offshore['Recall'], PR_dict_offshore['Precision'], label='PR curve for offshore')
    plt.plot(PR_dict_inshore['Recall'], PR_dict_inshore['Precision'], label='PR curve for inshore')
    plt.xlabel('Recall')
    plt.ylabel('Precision')
    # plt.title('Precision-Recall Curve')
    plt.legend()
    PR_curve_path = 'work_dirs/' + f'PR_curve_{save_path.split("/")[-1][:-4]}_{model_weights_md5[:5]}.png'
    plt.savefig(PR_curve_path, bbox_inches='tight', dpi=300)  
    print(f">>> PR_cruve saved: {PR_curve_path}")

    print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - {args.test_image}:")            
    metric_dict, PR_dict = test(model, args.test_image, args.test_threshold, args.test_threshold_mul



11/07 04:20:23 - Epoch(train)  [1/100][5/29]  lr: 9.9952e-04  eta: 7:32:14  time: 46.8638   loss: 0.4099
11/07 04:20:28 - Epoch(train)  [1/100][10/29]  lr: 9.9810e-04  eta: 4:10:46  time: 52.0653   loss: 0.2463
11/07 04:20:36 - Epoch(train)  [1/100][15/29]  lr: 9.9572e-04  eta: 3:11:46  time: 59.8256   loss: 0.1896
11/07 04:20:45 - Epoch(train)  [1/100][20/29]  lr: 9.9241e-04  eta: 2:44:15  time: 68.4423   loss: 0.1537
11/07 04:20:55 - Epoch(train)  [1/100][25/29]  lr: 9.8815e-04  eta: 2:32:5  time: 79.3564   loss: 0.2594

11/07 04:21:05 - Epoch(test) - offshore: [1/100]:
Threshold is drived from OTSU algorithm.
11/07 04:22:15 - Epoch(test) : [5/13]
11/07 04:22:21 - Epoch(test) : [10/13]
Accuracy: 0.88、Precision: 0.98、Recall: 0.69、F1-score: 0.81、Average_Precision: 0.98

11/07 04:22:30 - Epoch(test) - inshore: [1/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.88、Precision: 0.52、Recall: 0.31、F1-score: 0.39、Average_Precision: 0.51
11/07 04:23:22 - Best model achieved at epoch 1, with inshore AP 0.5106
11/07 04:24:10 - Epoch(train)  [2/100][5/29]  lr: 9.7816e-04  eta: 7:42:7  time: 48.3740   loss: 0.2136
11/07 04:24:17 - Epoch(train)  [2/100][10/29]  lr: 9.7134e-04  eta: 4:22:58  time: 55.1500   loss: 0.1990
11/07 04:24:24 - Epoch(train)  [2/100][15/29]  lr: 9.6361e-04  eta: 3:18:55  time: 62.6875   loss: 0.1706
11/07 04:24:32 - Epoch(train)  [2/100][20/29]  lr: 9.5500e-04  eta: 2:47:34  time: 70.5345   loss: 0.2030
11/07 04:24:45 - Epoch(train)  [2/100][25/29]  lr: 9.4553e-04  eta: 2:38:46  time: 83.6791   loss: 0.1635
11/07 04:25:40 - Epoch(train)  [3/100][5/29]  lr: 9.2636e-04  eta: 7:21:28  time: 46.6833   loss: 0.2438
11/07 04:25:45 - Epoch(train)  [3/100][10/29]  lr: 9.1456e-04  eta: 4:5:49  time: 52.0809   loss: 0.1494
11/07 04:25:53 - Epoch(train)  [3/100][15/29]  lr: 9.0198e-04  eta: 3:7:19  time: 59.6348   loss: 0.1608
11/07 04:26:00 - Epoch(train)  [3/100][20/29]  lr: 8.8863e-04  eta: 2:38:55  time: 67.5773   loss: 0.1342
11/07 04:26:12 - Epoch(train)  [3/100][25/29]  lr: 8.7454e-04  eta: 2:29:2  time: 79.3619   loss: 0.1289
11/07 04:27:07 - Epoch(train)  [4/100][5/29]  lr: 8.4741e-04  eta: 7:17:23  time: 46.7304   loss: 0.1389
11/07 04:27:15 - Epoch(train)  [4/100][10/29]  lr: 8.3139e-04  eta: 4:16:1  time: 54.8040   loss: 0.1554
11/07 04:27:23 - Epoch(train)  [4/100][15/29]  lr: 8.1475e-04  eta: 3:14:58  time: 62.7167   loss: 0.1389
11/07 04:27:32 - Epoch(train)  [4/100][20/29]  lr: 7.9751e-04  eta: 2:45:10  time: 70.9637   loss: 0.1799
11/07 04:27:43 - Epoch(train)  [4/100][25/29]  lr: 7.7971e-04  eta: 2:33:32  time: 82.6066   loss: 0.1710
11/07 04:28:46 - Epoch(train)  [5/100][5/29]  lr: 7.4634e-04  eta: 8:35:2  time: 55.6007   loss: 0.1384
11/07 04:28:54 - Epoch(train)  [5/100][10/29]  lr: 7.2713e-04  eta: 4:54:29  time: 63.6958   loss: 0.0937
11/07 04:29:01 - Epoch(train)  [5/100][15/29]  lr: 7.0749e-04  eta: 3:37:30  time: 70.6985   loss: 0.1248
11/07 04:29:09 - Epoch(train)  [5/100][20/29]  lr: 6.8746e-04  eta: 3:1:10  time: 78.6549   loss: 0.1196
11/07 04:29:20 - Epoch(train)  [5/100][25/29]  lr: 6.6707e-04  eta: 2:45:49  time: 90.1588   loss: 0.1297

11/07 04:29:27 - Epoch(test) - offshore: [5/100]:
Threshold is drived from OTSU algorithm.
11/07 04:30:16 - Epoch(test) : [5/13]
11/07 04:30:23 - Epoch(test) : [10/13]
Accuracy: 0.93、Precision: 0.94、Recall: 0.87、F1-score: 0.91、Average_Precision: 0.99

11/07 04:30:31 - Epoch(test) - inshore: [5/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.74、Recall: 0.41、F1-score: 0.53、Average_Precision: 0.72
11/07 04:31:25 - Best model achieved at epoch 5, with inshore AP 0.7153
11/07 04:32:09 - Epoch(train)  [6/100][5/29]  lr: 6.2959e-04  eta: 6:49:10  time: 44.6368   loss: 0.1785
11/07 04:32:16 - Epoch(train)  [6/100][10/29]  lr: 6.0842e-04  eta: 3:55:14  time: 51.4173   loss: 0.0928
11/07 04:32:24 - Epoch(train)  [6/100][15/29]  lr: 5.8703e-04  eta: 3:1:44  time: 59.6977   loss: 0.0956
11/07 04:32:33 - Epoch(train)  [6/100][20/29]  lr: 5.6548e-04  eta: 2:36:19  time: 68.5919   loss: 0.1348
11/07 04:32:45 - Epoch(train)  [6/100][25/29]  lr: 5.4381e-04  eta: 2:26:14  time: 80.3493   loss: 0.1374
11/07 04:33:46 - Epoch(train)  [7/100][5/29]  lr: 5.0461e-04  eta: 8:3:23  time: 53.2950   loss: 0.0989
11/07 04:33:54 - Epoch(train)  [7/100][10/29]  lr: 4.8281e-04  eta: 4:39:11  time: 61.6770   loss: 0.0640
11/07 04:34:02 - Epoch(train)  [7/100][15/29]  lr: 4.6104e-04  eta: 3:30:33  time: 69.9037   loss: 0.0903
11/07 04:34:10 - Epoch(train)  [7/100][20/29]  lr: 4.3935e-04  eta: 2:54:32  time: 77.4015   loss: 0.0689
11/07 04:34:21 - Epoch(train)  [7/100][25/29]  lr: 4.1777e-04  eta: 2:39:49  time: 88.7580   loss: 0.1271
11/07 04:35:13 - Epoch(train)  [8/100][5/29]  lr: 3.7935e-04  eta: 6:40:25  time: 44.6245   loss: 0.0850
11/07 04:35:22 - Epoch(train)  [8/100][10/29]  lr: 3.5831e-04  eta: 4:2:38  time: 54.1830   loss: 0.1309
11/07 04:35:29 - Epoch(train)  [8/100][15/29]  lr: 3.3755e-04  eta: 3:1:39  time: 60.9595   loss: 0.1110
11/07 04:35:37 - Epoch(train)  [8/100][20/29]  lr: 3.1709e-04  eta: 2:33:29  time: 68.8011   loss: 0.0851
11/07 04:35:47 - Epoch(train)  [8/100][25/29]  lr: 2.9698e-04  eta: 2:21:35  time: 79.4886   loss: 0.1075
11/07 04:36:46 - Epoch(train)  [9/100][5/29]  lr: 2.6179e-04  eta: 7:35:56  time: 51.3633   loss: 0.1067
11/07 04:36:53 - Epoch(train)  [9/100][10/29]  lr: 2.4286e-04  eta: 4:21:47  time: 59.0953   loss: 0.0807
11/07 04:37:01 - Epoch(train)  [9/100][15/29]  lr: 2.2442e-04  eta: 3:17:29  time: 66.9946   loss: 0.0741
11/07 04:37:08 - Epoch(train)  [9/100][20/29]  lr: 2.0650e-04  eta: 2:42:43  time: 73.7417   loss: 0.0823
11/07 04:37:19 - Epoch(train)  [9/100][25/29]  lr: 1.8915e-04  eta: 2:28:54  time: 84.5082   loss: 0.0923
11/07 04:38:12 - Epoch(train)  [10/100][5/29]  lr: 1.5942e-04  eta: 6:56:8  time: 47.3958   loss: 0.0648
11/07 04:38:20 - Epoch(train)  [10/100][10/29]  lr: 1.4380e-04  eta: 4:1:8  time: 55.0349   loss: 0.0691
11/07 04:38:31 - Epoch(train)  [10/100][15/29]  lr: 1.2886e-04  eta: 3:12:46  time: 66.1170   loss: 0.0709
11/07 04:38:38 - Epoch(train)  [10/100][20/29]  lr: 1.1463e-04  eta: 2:40:24  time: 73.4953   loss: 0.1160
11/07 04:38:46 - Epoch(train)  [10/100][25/29]  lr: 1.0113e-04  eta: 2:21:44  time: 81.3336   loss: 0.0601

11/07 04:38:56 - Epoch(test) - offshore: [10/100]:
Threshold is drived from OTSU algorithm.
11/07 04:39:44 - Epoch(test) : [5/13]
11/07 04:39:50 - Epoch(test) : [10/13]
Accuracy: 0.95、Precision: 0.96、Recall: 0.90、F1-score: 0.93、Average_Precision: 0.99

11/07 04:39:58 - Epoch(test) - inshore: [10/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.76、Recall: 0.53、F1-score: 0.63、Average_Precision: 0.77
11/07 04:40:44 - Best model achieved at epoch 10, with inshore AP 0.7659
11/07 04:41:39 - Epoch(train)  [11/100][5/29]  lr: 7.8765e-05  eta: 7:56:27  time: 54.8698   loss: 0.0735
11/07 04:41:47 - Epoch(train)  [11/100][10/29]  lr: 6.7454e-05  eta: 4:32:25  time: 62.8682   loss: 0.0796
11/07 04:41:55 - Epoch(train)  [11/100][15/29]  lr: 5.6966e-05  eta: 3:23:40  time: 70.6359   loss: 0.0958
11/07 04:42:02 - Epoch(train)  [11/100][20/29]  lr: 4.7323e-05  eta: 2:48:53  time: 78.2543   loss: 0.0603
11/07 04:42:15 - Epoch(train)  [11/100][25/29]  lr: 3.8541e-05  eta: 2:36:48  time: 90.9913   loss: 0.0652
11/07 04:43:08 - Epoch(train)  [12/100][5/29]  lr: 2.4960e-05  eta: 6:45:40  time: 47.2446   loss: 0.0809
11/07 04:43:16 - Epoch(train)  [12/100][10/29]  lr: 1.8676e-05  eta: 3:59:16  time: 55.8411   loss: 0.0876
11/07 04:43:23 - Epoch(train)  [12/100][15/29]  lr: 1.3309e-05  eta: 2:58:59  time: 62.7788   loss: 0.0651
11/07 04:43:31 - Epoch(train)  [12/100][20/29]  lr: 8.8684e-06  eta: 2:30:33  time: 70.5498   loss: 0.0667
11/07 04:43:44 - Epoch(train)  [12/100][25/29]  lr: 5.3635e-06  eta: 2:22:19  time: 83.5277   loss: 0.0731
11/07 04:44:42 - Epoch(train)  [13/100][5/29]  lr: 1.4321e-06  eta: 7:26:17  time: 52.5663   loss: 0.0724
11/07 04:44:50 - Epoch(train)  [13/100][10/29]  lr: 5.7611e-07  eta: 4:13:11  time: 59.7631   loss: 0.1114
11/07 04:44:57 - Epoch(train)  [13/100][15/29]  lr: 9.9983e-04  eta: 3:10:10  time: 67.4649   loss: 0.0896
11/07 04:45:06 - Epoch(train)  [13/100][20/29]  lr: 9.9878e-04  eta: 2:40:7  time: 75.8924   loss: 0.0774
11/07 04:45:17 - Epoch(train)  [13/100][25/29]  lr: 9.9679e-04  eta: 2:26:11  time: 86.7741   loss: 0.1118
11/07 04:46:08 - Epoch(train)  [14/100][5/29]  lr: 9.9082e-04  eta: 6:19:8  time: 45.1720   loss: 0.0685
11/07 04:46:16 - Epoch(train)  [14/100][10/29]  lr: 9.8619e-04  eta: 3:40:11  time: 52.5731   loss: 0.0829
11/07 04:46:23 - Epoch(train)  [14/100][15/29]  lr: 9.8064e-04  eta: 2:46:51  time: 59.8783   loss: 0.0712
11/07 04:46:31 - Epoch(train)  [14/100][20/29]  lr: 9.7417e-04  eta: 2:21:10  time: 67.6827   loss: 0.0773
11/07 04:46:43 - Epoch(train)  [14/100][25/29]  lr: 9.6681e-04  eta: 2:12:36  time: 79.6297   loss: 0.0964
11/07 04:47:39 - Epoch(train)  [15/100][5/29]  lr: 9.5132e-04  eta: 6:50:29  time: 49.4761   loss: 0.0797
11/07 04:47:46 - Epoch(train)  [15/100][10/29]  lr: 9.4150e-04  eta: 3:54:28  time: 56.6347   loss: 0.0706
11/07 04:47:54 - Epoch(train)  [15/100][15/29]  lr: 9.3085e-04  eta: 2:57:19  time: 64.3786   loss: 0.0807
11/07 04:48:03 - Epoch(train)  [15/100][20/29]  lr: 9.1938e-04  eta: 2:30:41  time: 73.0930   loss: 0.0614
11/07 04:48:13 - Epoch(train)  [15/100][25/29]  lr: 9.0710e-04  eta: 2:17:59  time: 83.8371   loss: 0.0902

11/07 04:48:19 - Epoch(test) - offshore: [15/100]:
Threshold is drived from OTSU algorithm.
11/07 04:49:06 - Epoch(test) : [5/13]
11/07 04:49:12 - Epoch(test) : [10/13]
Accuracy: 0.95、Precision: 0.94、Recall: 0.92、F1-score: 0.93、Average_Precision: 0.99

11/07 04:49:22 - Epoch(test) - inshore: [15/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.76、Recall: 0.57、F1-score: 0.65、Average_Precision: 0.77
11/07 04:50:15 - Best model achieved at epoch 15, with inshore AP 0.7694
11/07 04:51:03 - Epoch(train)  [16/100][5/29]  lr: 8.8308e-04  eta: 6:35:55  time: 48.2835   loss: 0.0581
11/07 04:51:10 - Epoch(train)  [16/100][10/29]  lr: 8.6870e-04  eta: 3:46:57  time: 55.4674   loss: 0.0563
11/07 04:51:18 - Epoch(train)  [16/100][15/29]  lr: 8.5363e-04  eta: 2:50:56  time: 62.7918   loss: 0.1044
11/07 04:51:25 - Epoch(train)  [16/100][20/29]  lr: 8.3788e-04  eta: 2:22:41  time: 70.0353   loss: 0.0547
11/07 04:51:38 - Epoch(train)  [16/100][25/29]  lr: 8.2148e-04  eta: 2:14:47  time: 82.8590   loss: 0.0559
11/07 04:52:41 - Epoch(train)  [17/100][5/29]  lr: 7.9046e-04  eta: 7:45:29  time: 57.4444   loss: 0.0529
11/07 04:52:49 - Epoch(train)  [17/100][10/29]  lr: 7.7243e-04  eta: 4:26:19  time: 65.8684   loss: 0.0513
11/07 04:52:57 - Epoch(train)  [17/100][15/29]  lr: 7.5389e-04  eta: 3:17:46  time: 73.5195   loss: 0.0762
11/07 04:53:05 - Epoch(train)  [17/100][20/29]  lr: 7.3487e-04  eta: 2:43:58  time: 81.4463   loss: 0.0859
11/07 04:53:15 - Epoch(train)  [17/100][25/29]  lr: 7.1540e-04  eta: 2:27:5  time: 91.5145   loss: 0.0690
11/07 04:54:08 - Epoch(train)  [18/100][5/29]  lr: 6.7934e-04  eta: 6:4:30  time: 45.5251   loss: 0.0566
11/07 04:54:17 - Epoch(train)  [18/100][10/29]  lr: 6.5882e-04  eta: 3:38:1  time: 54.5733   loss: 0.0513
11/07 04:54:23 - Epoch(train)  [18/100][15/29]  lr: 6.3800e-04  eta: 2:41:10  time: 60.6435   loss: 0.0486
11/07 04:54:32 - Epoch(train)  [18/100][20/29]  lr: 6.1691e-04  eta: 2:17:58  time: 69.3646   loss: 0.0523
11/07 04:54:43 - Epoch(train)  [18/100][25/29]  lr: 5.9561e-04  eta: 2:8:26  time: 80.8853   loss: 0.0559
11/07 04:55:35 - Epoch(train)  [19/100][5/29]  lr: 5.5682e-04  eta: 5:49:40  time: 44.2073   loss: 0.0693
11/07 04:55:43 - Epoch(train)  [19/100][10/29]  lr: 5.3511e-04  eta: 3:27:43  time: 52.6316   loss: 0.0524
11/07 04:55:51 - Epoch(train)  [19/100][15/29]  lr: 5.1333e-04  eta: 2:37:50  time: 60.1172   loss: 0.0916
11/07 04:55:59 - Epoch(train)  [19/100][20/29]  lr: 4.9153e-04  eta: 2:14:24  time: 68.3974   loss: 0.0552
11/07 04:56:09 - Epoch(train)  [19/100][25/29]  lr: 4.6974e-04  eta: 2:3:8  time: 78.4996   loss: 0.0577
11/07 04:57:01 - Epoch(train)  [20/100][5/29]  lr: 4.3070e-04  eta: 5:51:59  time: 45.0499   loss: 0.0440
11/07 04:57:08 - Epoch(train)  [20/100][10/29]  lr: 4.0918e-04  eta: 3:23:29  time: 52.1980   loss: 0.0367
11/07 04:57:16 - Epoch(train)  [20/100][15/29]  lr: 3.8783e-04  eta: 2:34:29  time: 59.5737   loss: 0.0638
11/07 04:57:25 - Epoch(train)  [20/100][20/29]  lr: 3.6670e-04  eta: 2:13:5  time: 68.5721   loss: 0.0384
11/07 04:57:34 - Epoch(train)  [20/100][25/29]  lr: 3.4582e-04  eta: 2:1:19  time: 78.3107   loss: 0.0352

11/07 04:57:44 - Epoch(test) - offshore: [20/100]:
Threshold is drived from OTSU algorithm.
11/07 04:58:34 - Epoch(test) : [5/13]
11/07 04:58:40 - Epoch(test) : [10/13]
Accuracy: 0.92、Precision: 0.86、Recall: 0.93、F1-score: 0.89、Average_Precision: 0.99

11/07 04:58:48 - Epoch(test) - inshore: [20/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.79、Recall: 0.55、F1-score: 0.65、Average_Precision: 0.78
11/07 04:59:33 - Best model achieved at epoch 20, with inshore AP 0.7830
11/07 05:00:21 - Epoch(train)  [21/100][5/29]  lr: 3.0900e-04  eta: 6:11:8  time: 48.0959   loss: 0.0380
11/07 05:00:31 - Epoch(train)  [21/100][10/29]  lr: 2.8905e-04  eta: 3:42:41  time: 57.8403   loss: 0.0305
11/07 05:00:39 - Epoch(train)  [21/100][15/29]  lr: 2.6949e-04  eta: 2:49:0  time: 65.9881   loss: 0.0333
11/07 05:00:47 - Epoch(train)  [21/100][20/29]  lr: 2.5038e-04  eta: 2:21:26  time: 73.7970   loss: 0.0303
11/07 05:00:56 - Epoch(train)  [21/100][25/29]  lr: 2.3173e-04  eta: 2:6:59  time: 83.0050   loss: 0.0355
11/07 05:01:50 - Epoch(train)  [22/100][5/29]  lr: 1.9949e-04  eta: 5:32:40  time: 43.6586   loss: 0.0347
11/07 05:01:59 - Epoch(train)  [22/100][10/29]  lr: 1.8237e-04  eta: 3:19:57  time: 52.5973   loss: 0.0315
11/07 05:02:06 - Epoch(train)  [22/100][15/29]  lr: 1.6585e-04  eta: 2:31:17  time: 59.8246   loss: 0.0266
11/07 05:02:14 - Epoch(train)  [22/100][20/29]  lr: 1.4997e-04  eta: 2:7:56  time: 67.6036   loss: 0.0333
11/07 05:02:23 - Epoch(train)  [22/100][25/29]  lr: 1.3476e-04  eta: 1:55:33  time: 76.4912   loss: 0.0282
11/07 05:03:25 - Epoch(train)  [23/100][5/29]  lr: 1.0914e-04  eta: 6:28:57  time: 51.7011   loss: 0.0303
11/07 05:03:32 - Epoch(train)  [23/100][10/29]  lr: 9.5944e-05  eta: 3:40:31  time: 58.7541   loss: 0.0194
11/07 05:03:40 - Epoch(train)  [23/100][15/29]  lr: 8.3516e-05  eta: 2:48:27  time: 67.4716   loss: 0.0198
11/07 05:03:48 - Epoch(train)  [23/100][20/29]  lr: 7.1881e-05  eta: 2:20:1  time: 74.9474   loss: 0.0393
11/07 05:03:59 - Epoch(train)  [23/100][25/29]  lr: 6.1061e-05  eta: 2:8:7  time: 85.9078   loss: 0.0255
11/07 05:04:56 - Epoch(train)  [24/100][5/29]  lr: 4.3706e-05  eta: 6:12:32  time: 50.1622   loss: 0.0261
11/07 05:05:03 - Epoch(train)  [24/100][10/29]  lr: 3.5274e-05  eta: 3:32:57  time: 57.4775   loss: 0.0229
11/07 05:05:11 - Epoch(train)  [24/100][15/29]  lr: 2.7727e-05  eta: 2:40:7  time: 64.9765   loss: 0.0240
11/07 05:05:19 - Epoch(train)  [24/100][20/29]  lr: 2.1080e-05  eta: 2:13:56  time: 72.6296   loss: 0.0285
11/07 05:05:31 - Epoch(train)  [24/100][25/29]  lr: 1.5345e-05  eta: 2:5:18  time: 85.1309   loss: 0.0230
11/07 05:06:22 - Epoch(train)  [25/100][5/29]  lr: 7.3538e-06  eta: 5:29:49  time: 44.9961   loss: 0.0334
11/07 05:06:29 - Epoch(train)  [25/100][10/29]  lr: 4.2251e-06  eta: 3:9:43  time: 51.8838   loss: 0.0211
11/07 05:06:36 - Epoch(train)  [25/100][15/29]  lr: 2.0406e-06  eta: 2:23:19  time: 58.9260   loss: 0.0128
11/07 05:06:44 - Epoch(train)  [25/100][20/29]  lr: 8.0443e-07  eta: 2:1:13  time: 66.6069   loss: 0.0272
11/07 05:06:55 - Epoch(train)  [25/100][25/29]  lr: 9.9998e-04  eta: 1:53:44  time: 78.3029   loss: 0.0212

11/07 05:07:01 - Epoch(test) - offshore: [25/100]:
Threshold is drived from OTSU algorithm.
11/07 05:07:51 - Epoch(test) : [5/13]
11/07 05:07:59 - Epoch(test) : [10/13]
Accuracy: 0.87、Precision: 0.77、Recall: 0.92、F1-score: 0.84、Average_Precision: 0.99

11/07 05:08:08 - Epoch(test) - inshore: [25/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.74、Recall: 0.59、F1-score: 0.66、Average_Precision: 0.78
11/07 05:09:45 - Epoch(train)  [26/100][5/29]  lr: 9.9810e-04  eta: 5:29:25  time: 45.5425   loss: 0.0271
11/07 05:09:53 - Epoch(train)  [26/100][10/29]  lr: 9.9572e-04  eta: 3:13:45  time: 53.6975   loss: 0.0360
11/07 05:10:02 - Epoch(train)  [26/100][15/29]  lr: 9.9241e-04  eta: 2:29:40  time: 62.3653   loss: 0.0367
11/07 05:10:09 - Epoch(train)  [26/100][20/29]  lr: 9.8815e-04  eta: 2:5:45  time: 70.0242   loss: 0.0313
11/07 05:10:21 - Epoch(train)  [26/100][25/29]  lr: 9.8297e-04  eta: 1:56:21  time: 81.1846   loss: 0.0380
11/07 05:11:10 - Epoch(train)  [27/100][5/29]  lr: 9.7134e-04  eta: 5:9:55  time: 43.4261   loss: 0.0431
11/07 05:11:17 - Epoch(train)  [27/100][10/29]  lr: 9.6361e-04  eta: 2:59:37  time: 50.4548   loss: 0.0419
11/07 05:11:24 - Epoch(train)  [27/100][15/29]  lr: 9.5500e-04  eta: 2:15:10  time: 57.0866   loss: 0.0444
11/07 05:11:32 - Epoch(train)  [27/100][20/29]  lr: 9.4553e-04  eta: 1:55:52  time: 65.4003   loss: 0.0430
11/07 05:11:44 - Epoch(train)  [27/100][25/29]  lr: 9.3521e-04  eta: 1:48:49  time: 76.9607   loss: 0.0414
11/07 05:12:40 - Epoch(train)  [28/100][5/29]  lr: 9.1456e-04  eta: 5:49:39  time: 49.6678   loss: 0.0411
11/07 05:12:48 - Epoch(train)  [28/100][10/29]  lr: 9.0198e-04  eta: 3:22:39  time: 57.7095   loss: 0.0430
11/07 05:12:55 - Epoch(train)  [28/100][15/29]  lr: 8.8863e-04  eta: 2:31:44  time: 64.9709   loss: 0.0545
11/07 05:13:03 - Epoch(train)  [28/100][20/29]  lr: 8.7454e-04  eta: 2:7:43  time: 73.0934   loss: 0.0309
11/07 05:13:15 - Epoch(train)  [28/100][25/29]  lr: 8.5974e-04  eta: 1:58:19  time: 84.8361   loss: 0.0283
11/07 05:14:17 - Epoch(train)  [29/100][5/29]  lr: 8.3139e-04  eta: 6:20:59  time: 54.8714   loss: 0.0493
11/07 05:14:25 - Epoch(train)  [29/100][10/29]  lr: 8.1475e-04  eta: 3:35:57  time: 62.3579   loss: 0.0328
11/07 05:14:32 - Epoch(train)  [29/100][15/29]  lr: 7.9751e-04  eta: 2:41:10  time: 69.9759   loss: 0.0346
11/07 05:14:40 - Epoch(train)  [29/100][20/29]  lr: 7.7971e-04  eta: 2:13:19  time: 77.3634   loss: 0.0329
11/07 05:14:52 - Epoch(train)  [29/100][25/29]  lr: 7.6137e-04  eta: 2:2:43  time: 89.2286   loss: 0.0514
11/07 05:15:50 - Epoch(train)  [30/100][5/29]  lr: 7.2713e-04  eta: 5:52:8  time: 51.4336   loss: 0.0399
11/07 05:15:58 - Epoch(train)  [30/100][10/29]  lr: 7.0749e-04  eta: 3:21:6  time: 58.8920   loss: 0.0213
11/07 05:16:05 - Epoch(train)  [30/100][15/29]  lr: 6.8746e-04  eta: 2:31:4  time: 66.5237   loss: 0.0415
11/07 05:16:13 - Epoch(train)  [30/100][20/29]  lr: 6.6707e-04  eta: 2:6:14  time: 74.2957   loss: 0.0277
11/07 05:16:25 - Epoch(train)  [30/100][25/29]  lr: 6.4636e-04  eta: 1:56:21  time: 85.8101   loss: 0.0226

11/07 05:16:32 - Epoch(test) - offshore: [30/100]:
Threshold is drived from OTSU algorithm.
11/07 05:17:22 - Epoch(test) : [5/13]
11/07 05:17:28 - Epoch(test) : [10/13]
Accuracy: 0.88、Precision: 0.77、Recall: 0.94、F1-score: 0.85、Average_Precision: 0.99

11/07 05:17:39 - Epoch(test) - inshore: [30/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.75、Recall: 0.63、F1-score: 0.69、Average_Precision: 0.79
11/07 05:18:33 - Best model achieved at epoch 30, with inshore AP 0.7936
11/07 05:19:19 - Epoch(train)  [31/100][5/29]  lr: 6.0842e-04  eta: 5:14:12  time: 46.5485   loss: 0.0161
11/07 05:19:29 - Epoch(train)  [31/100][10/29]  lr: 5.8703e-04  eta: 3:7:59  time: 55.8379   loss: 0.0232
11/07 05:19:36 - Epoch(train)  [31/100][15/29]  lr: 5.6548e-04  eta: 2:21:0  time: 62.9833   loss: 0.0149
11/07 05:19:43 - Epoch(train)  [31/100][20/29]  lr: 5.4381e-04  eta: 1:57:53  time: 70.3878   loss: 0.0153
11/07 05:19:52 - Epoch(train)  [31/100][25/29]  lr: 5.2205e-04  eta: 1:46:10  time: 79.4385   loss: 0.0238
11/07 05:20:52 - Epoch(train)  [32/100][5/29]  lr: 4.8281e-04  eta: 5:40:17  time: 51.1461   loss: 0.0160
11/07 05:21:00 - Epoch(train)  [32/100][10/29]  lr: 4.6104e-04  eta: 3:15:18  time: 58.8589   loss: 0.0194
11/07 05:21:07 - Epoch(train)  [32/100][15/29]  lr: 4.3935e-04  eta: 2:26:25  time: 66.3551   loss: 0.0228
11/07 05:21:16 - Epoch(train)  [32/100][20/29]  lr: 4.1777e-04  eta: 2:4:0  time: 75.1205   loss: 0.0166
11/07 05:21:28 - Epoch(train)  [32/100][25/29]  lr: 3.9635e-04  eta: 1:55:18  time: 87.5335   loss: 0.0286
11/07 05:22:22 - Epoch(train)  [33/100][5/29]  lr: 3.5831e-04  eta: 5:12:12  time: 47.6161   loss: 0.0080
11/07 05:22:30 - Epoch(train)  [33/100][10/29]  lr: 3.3755e-04  eta: 3:0:40  time: 55.2523   loss: 0.0049
11/07 05:22:37 - Epoch(train)  [33/100][15/29]  lr: 3.1709e-04  eta: 2:15:2  time: 62.1022   loss: 0.0072
11/07 05:22:44 - Epoch(train)  [33/100][20/29]  lr: 2.9698e-04  eta: 1:53:10  time: 69.5719   loss: 0.0151
11/07 05:22:57 - Epoch(train)  [33/100][25/29]  lr: 2.7726e-04  eta: 1:46:51  time: 82.3206   loss: 0.0074
11/07 05:23:53 - Epoch(train)  [34/100][5/29]  lr: 2.4286e-04  eta: 5:17:48  time: 49.1955   loss: 0.0038
11/07 05:24:03 - Epoch(train)  [34/100][10/29]  lr: 2.2442e-04  eta: 3:9:35  time: 58.8478   loss: 0.0066
11/07 05:24:11 - Epoch(train)  [34/100][15/29]  lr: 2.0650e-04  eta: 2:23:21  time: 66.9224   loss: 0.0072
11/07 05:24:19 - Epoch(train)  [34/100][20/29]  lr: 1.8915e-04  eta: 2:0:32  time: 75.2203   loss: 0.0085
11/07 05:24:28 - Epoch(train)  [34/100][25/29]  lr: 1.7238e-04  eta: 1:47:36  time: 84.1528   loss: 0.0032
11/07 05:25:22 - Epoch(train)  [35/100][5/29]  lr: 1.4380e-04  eta: 4:43:3  time: 44.4838   loss: 0.0054
11/07 05:25:31 - Epoch(train)  [35/100][10/29]  lr: 1.2886e-04  eta: 2:51:49  time: 54.1488   loss: 0.0039
11/07 05:25:39 - Epoch(train)  [35/100][15/29]  lr: 1.1463e-04  eta: 2:10:16  time: 61.7401   loss: 0.0044
11/07 05:25:46 - Epoch(train)  [35/100][20/29]  lr: 1.0113e-04  eta: 1:49:3  time: 69.1005   loss: 0.0064
11/07 05:25:56 - Epoch(train)  [35/100][25/29]  lr: 8.8393e-05  eta: 1:39:16  time: 78.8360   loss: 0.0053

11/07 05:26:07 - Epoch(test) - offshore: [35/100]:
Threshold is drived from OTSU algorithm.
11/07 05:26:51 - Epoch(test) : [5/13]
11/07 05:26:56 - Epoch(test) : [10/13]
Accuracy: 0.68、Precision: 0.54、Recall: 0.94、F1-score: 0.68、Average_Precision: 0.99

11/07 05:27:04 - Epoch(test) - inshore: [35/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.67、Recall: 0.67、F1-score: 0.67、Average_Precision: 0.79
11/07 05:28:34 - Epoch(train)  [36/100][5/29]  lr: 6.7454e-05  eta: 4:48:35  time: 46.0524   loss: 0.0015
11/07 05:28:42 - Epoch(train)  [36/100][10/29]  lr: 5.6966e-05  eta: 2:49:0  time: 54.0837   loss: 0.0030
11/07 05:28:49 - Epoch(train)  [36/100][15/29]  lr: 4.7323e-05  eta: 2:7:55  time: 61.5691   loss: 0.0036
11/07 05:28:56 - Epoch(train)  [36/100][20/29]  lr: 3.8541e-05  eta: 1:47:3  time: 68.8803   loss: 0.0030
11/07 05:29:09 - Epoch(train)  [36/100][25/29]  lr: 3.0639e-05  eta: 1:40:38  time: 81.1582   loss: 0.0057
11/07 05:30:09 - Epoch(train)  [37/100][5/29]  lr: 1.8676e-05  eta: 5:20:30  time: 51.9454   loss: 0.0030
11/07 05:30:17 - Epoch(train)  [37/100][10/29]  lr: 1.3309e-05  eta: 3:2:9  time: 59.2073   loss: 0.0027
11/07 05:30:24 - Epoch(train)  [37/100][15/29]  lr: 8.8684e-06  eta: 2:15:27  time: 66.2219   loss: 0.0017
11/07 05:30:31 - Epoch(train)  [37/100][20/29]  lr: 5.3635e-06  eta: 1:52:26  time: 73.4952   loss: 0.0044
11/07 05:30:42 - Epoch(train)  [37/100][25/29]  lr: 2.8007e-06  eta: 1:43:31  time: 84.8075   loss: 0.0058
11/07 05:31:35 - Epoch(train)  [38/100][5/29]  lr: 5.7611e-07  eta: 4:32:55  time: 44.9378   loss: 0.0028
11/07 05:31:45 - Epoch(train)  [38/100][10/29]  lr: 9.9983e-04  eta: 2:44:16  time: 54.2434   loss: 0.0014
11/07 05:31:53 - Epoch(train)  [38/100][15/29]  lr: 9.9878e-04  eta: 2:5:57  time: 62.5613   loss: 0.0061
11/07 05:32:00 - Epoch(train)  [38/100][20/29]  lr: 9.9679e-04  eta: 1:44:24  time: 69.3312   loss: 0.0026
11/07 05:32:09 - Epoch(train)  [38/100][25/29]  lr: 9.9385e-04  eta: 1:33:52  time: 78.1371   loss: 0.0063
11/07 05:33:05 - Epoch(train)  [39/100][5/29]  lr: 9.8619e-04  eta: 4:47:56  time: 48.1763   loss: 0.0209
11/07 05:33:12 - Epoch(train)  [39/100][10/29]  lr: 9.8064e-04  eta: 2:44:13  time: 55.1064   loss: 0.0258
11/07 05:33:20 - Epoch(train)  [39/100][15/29]  lr: 9.7417e-04  eta: 2:5:4  time: 63.1344   loss: 0.0210
11/07 05:33:29 - Epoch(train)  [39/100][20/29]  lr: 9.6681e-04  eta: 1:45:55  time: 71.4911   loss: 0.0179
11/07 05:33:39 - Epoch(train)  [39/100][25/29]  lr: 9.5855e-04  eta: 1:36:55  time: 81.9948   loss: 0.0208
11/07 05:34:39 - Epoch(train)  [40/100][5/29]  lr: 9.4150e-04  eta: 4:59:44  time: 50.9776   loss: 0.0228
11/07 05:34:46 - Epoch(train)  [40/100][10/29]  lr: 9.3085e-04  eta: 2:51:10  time: 58.3871   loss: 0.0405
11/07 05:34:54 - Epoch(train)  [40/100][15/29]  lr: 9.1938e-04  eta: 2:7:52  time: 65.6155   loss: 0.0288
11/07 05:35:01 - Epoch(train)  [40/100][20/29]  lr: 9.0710e-04  eta: 1:46:15  time: 72.9030   loss: 0.0494
11/07 05:35:12 - Epoch(train)  [40/100][25/29]  lr: 8.9406e-04  eta: 1:37:44  time: 84.0686   loss: 0.0270

11/07 05:35:21 - Epoch(test) - offshore: [40/100]:
Threshold is drived from OTSU algorithm.
11/07 05:36:06 - Epoch(test) : [5/13]
11/07 05:36:11 - Epoch(test) : [10/13]
Accuracy: 0.88、Precision: 0.78、Recall: 0.95、F1-score: 0.85、Average_Precision: 0.99

11/07 05:36:22 - Epoch(test) - inshore: [40/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.74、Recall: 0.69、F1-score: 0.71、Average_Precision: 0.78
11/07 05:38:05 - Epoch(train)  [41/100][5/29]  lr: 8.6870e-04  eta: 4:57:49  time: 51.4975   loss: 0.0166
11/07 05:38:14 - Epoch(train)  [41/100][10/29]  lr: 8.5363e-04  eta: 2:54:17  time: 60.4501   loss: 0.0198
11/07 05:38:22 - Epoch(train)  [41/100][15/29]  lr: 8.3788e-04  eta: 2:10:58  time: 68.3383   loss: 0.0154
11/07 05:38:31 - Epoch(train)  [41/100][20/29]  lr: 8.2148e-04  eta: 1:50:29  time: 77.0836   loss: 0.0236
11/07 05:38:39 - Epoch(train)  [41/100][25/29]  lr: 8.0448e-04  eta: 1:37:29  time: 85.2723   loss: 0.0178
11/07 05:39:44 - Epoch(train)  [42/100][5/29]  lr: 7.7243e-04  eta: 5:7:24  time: 54.0568   loss: 0.0112
11/07 05:39:52 - Epoch(train)  [42/100][10/29]  lr: 7.5389e-04  eta: 2:57:2  time: 62.4459   loss: 0.0136
11/07 05:39:59 - Epoch(train)  [42/100][15/29]  lr: 7.3487e-04  eta: 2:10:40  time: 69.3415   loss: 0.0109
11/07 05:40:07 - Epoch(train)  [42/100][20/29]  lr: 7.1540e-04  eta: 1:48:16  time: 76.8397   loss: 0.0171
11/07 05:40:18 - Epoch(train)  [42/100][25/29]  lr: 6.9552e-04  eta: 1:38:35  time: 87.7101   loss: 0.0133
11/07 05:41:13 - Epoch(train)  [43/100][5/29]  lr: 6.5882e-04  eta: 4:24:33  time: 47.3259   loss: 0.0076
11/07 05:41:20 - Epoch(train)  [43/100][10/29]  lr: 6.3800e-04  eta: 2:32:2  time: 54.5627   loss: 0.0089
11/07 05:41:28 - Epoch(train)  [43/100][15/29]  lr: 6.1691e-04  eta: 1:55:34  time: 62.4023   loss: 0.0099
11/07 05:41:36 - Epoch(train)  [43/100][20/29]  lr: 5.9561e-04  eta: 1:36:25  time: 69.6234   loss: 0.0072
11/07 05:41:48 - Epoch(train)  [43/100][25/29]  lr: 5.7412e-04  eta: 1:31:13  time: 82.5774   loss: 0.0085
11/07 05:42:41 - Epoch(train)  [44/100][5/29]  lr: 5.3511e-04  eta: 4:9:47  time: 45.4708   loss: 0.0088
11/07 05:42:49 - Epoch(train)  [44/100][10/29]  lr: 5.1333e-04  eta: 2:24:38  time: 52.8236   loss: 0.0039
11/07 05:42:56 - Epoch(train)  [44/100][15/29]  lr: 4.9153e-04  eta: 1:49:6  time: 59.9491   loss: 0.0097
11/07 05:43:04 - Epoch(train)  [44/100][20/29]  lr: 4.6974e-04  eta: 1:32:0  time: 67.6141   loss: 0.0117
11/07 05:43:15 - Epoch(train)  [44/100][25/29]  lr: 4.4801e-04  eta: 1:25:25  time: 78.7104   loss: 0.0047
11/07 05:44:06 - Epoch(train)  [45/100][5/29]  lr: 4.0918e-04  eta: 3:59:53  time: 44.4524   loss: 0.0050
11/07 05:44:13 - Epoch(train)  [45/100][10/29]  lr: 3.8783e-04  eta: 2:20:4  time: 52.0735   loss: 0.0037
11/07 05:44:21 - Epoch(train)  [45/100][15/29]  lr: 3.6670e-04  eta: 1:46:15  time: 59.4380   loss: 0.0111
11/07 05:44:28 - Epoch(train)  [45/100][20/29]  lr: 3.4582e-04  eta: 1:29:54  time: 67.2571   loss: 0.0054
11/07 05:44:40 - Epoch(train)  [45/100][25/29]  lr: 3.2523e-04  eta: 1:24:26  time: 79.2176   loss: 0.0017

11/07 05:44:48 - Epoch(test) - offshore: [45/100]:
Threshold is drived from OTSU algorithm.
11/07 05:45:37 - Epoch(test) : [5/13]
11/07 05:45:46 - Epoch(test) : [10/13]
Accuracy: 0.67、Precision: 0.53、Recall: 0.94、F1-score: 0.68、Average_Precision: 0.99

11/07 05:45:52 - Epoch(test) - inshore: [45/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.67、Recall: 0.68、F1-score: 0.68、Average_Precision: 0.80
11/07 05:46:37 - Best model achieved at epoch 45, with inshore AP 0.7965
11/07 05:47:22 - Epoch(train)  [46/100][5/29]  lr: 2.8905e-04  eta: 3:58:46  time: 45.0531   loss: 0.0022
11/07 05:47:29 - Epoch(train)  [46/100][10/29]  lr: 2.6949e-04  eta: 2:18:32  time: 52.4426   loss: 0.0026
11/07 05:47:39 - Epoch(train)  [46/100][15/29]  lr: 2.5038e-04  eta: 1:48:35  time: 61.8590   loss: 0.0021
11/07 05:47:46 - Epoch(train)  [46/100][20/29]  lr: 2.3173e-04  eta: 1:30:0  time: 68.5791   loss: 0.0036
11/07 05:47:57 - Epoch(train)  [46/100][25/29]  lr: 2.1361e-04  eta: 1:24:9  time: 80.4139   loss: 0.0012
11/07 05:48:57 - Epoch(train)  [47/100][5/29]  lr: 1.8237e-04  eta: 4:24:35  time: 50.8501   loss: 0.0014
11/07 05:49:05 - Epoch(train)  [47/100][10/29]  lr: 1.6585e-04  eta: 2:31:34  time: 58.4459   loss: 0.0014
11/07 05:49:13 - Epoch(train)  [47/100][15/29]  lr: 1.4997e-04  eta: 1:54:31  time: 66.4549   loss: 0.0007
11/07 05:49:21 - Epoch(train)  [47/100][20/29]  lr: 1.3476e-04  eta: 1:35:47  time: 74.3524   loss: 0.0007
11/07 05:49:32 - Epoch(train)  [47/100][25/29]  lr: 1.2024e-04  eta: 1:28:3  time: 85.7079   loss: 0.0008
11/07 05:50:32 - Epoch(train)  [48/100][5/29]  lr: 9.5944e-05  eta: 4:25:40  time: 52.0251   loss: 0.0007
11/07 05:50:39 - Epoch(train)  [48/100][10/29]  lr: 8.3516e-05  eta: 2:30:36  time: 59.1768   loss: 0.0004
11/07 05:50:48 - Epoch(train)  [48/100][15/29]  lr: 7.1881e-05  eta: 1:55:13  time: 68.1348   loss: 0.0008
11/07 05:50:55 - Epoch(train)  [48/100][20/29]  lr: 6.1061e-05  eta: 1:34:47  time: 74.9814   loss: 0.0004
11/07 05:51:06 - Epoch(train)  [48/100][25/29]  lr: 5.1078e-05  eta: 1:26:41  time: 86.0012   loss: 0.0019
11/07 05:52:01 - Epoch(train)  [49/100][5/29]  lr: 3.5274e-05  eta: 4:0:51  time: 48.0754   loss: 0.0004
11/07 05:52:08 - Epoch(train)  [49/100][10/29]  lr: 2.7727e-05  eta: 2:18:55  time: 55.6428   loss: 0.0014
11/07 05:52:17 - Epoch(train)  [49/100][15/29]  lr: 2.1080e-05  eta: 1:45:41  time: 63.7108   loss: 0.0004
11/07 05:52:24 - Epoch(train)  [49/100][20/29]  lr: 1.5345e-05  eta: 1:28:14  time: 71.1593   loss: 0.0011
11/07 05:52:36 - Epoch(train)  [49/100][25/29]  lr: 1.0533e-05  eta: 1:22:40  time: 83.6248   loss: 0.0002
11/07 05:53:33 - Epoch(train)  [50/100][5/29]  lr: 4.2251e-06  eta: 4:2:30  time: 49.3578   loss: 0.0012
11/07 05:53:40 - Epoch(train)  [50/100][10/29]  lr: 2.0406e-06  eta: 2:18:41  time: 56.6441   loss: 0.0004
11/07 05:53:48 - Epoch(train)  [50/100][15/29]  lr: 8.0443e-07  eta: 1:44:27  time: 64.2149   loss: 0.0009
11/07 05:53:55 - Epoch(train)  [50/100][20/29]  lr: 9.9998e-04  eta: 1:27:14  time: 71.7591   loss: 0.0007
11/07 05:54:06 - Epoch(train)  [50/100][25/29]  lr: 9.9932e-04  eta: 1:19:40  time: 82.1914   loss: 0.0002

11/07 05:54:13 - Epoch(test) - offshore: [50/100]:
Threshold is drived from OTSU algorithm.
11/07 05:55:00 - Epoch(test) : [5/13]
11/07 05:55:06 - Epoch(test) : [10/13]
Accuracy: 0.61、Precision: 0.49、Recall: 0.94、F1-score: 0.65、Average_Precision: 0.99

11/07 05:55:15 - Epoch(test) - inshore: [50/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.59、Recall: 0.69、F1-score: 0.64、Average_Precision: 0.79
11/07 05:56:47 - Epoch(train)  [51/100][5/29]  lr: 9.9572e-04  eta: 3:36:15  time: 44.8977   loss: 0.0002
11/07 05:56:55 - Epoch(train)  [51/100][10/29]  lr: 9.9241e-04  eta: 2:7:33  time: 53.1488   loss: 0.0002
11/07 05:57:03 - Epoch(train)  [51/100][15/29]  lr: 9.8815e-04  eta: 1:37:57  time: 61.4390   loss: 0.0011
11/07 05:57:10 - Epoch(train)  [51/100][20/29]  lr: 9.8297e-04  eta: 1:21:24  time: 68.3170   loss: 0.0018
11/07 05:57:23 - Epoch(train)  [51/100][25/29]  lr: 9.7687e-04  eta: 1:17:23  time: 81.4590   loss: 0.0028
11/07 05:58:19 - Epoch(train)  [52/100][5/29]  lr: 9.6361e-04  eta: 3:52:51  time: 49.3346   loss: 0.0057
11/07 05:58:26 - Epoch(train)  [52/100][10/29]  lr: 9.5500e-04  eta: 2:12:44  time: 56.4481   loss: 0.0106
11/07 05:58:46 - Epoch(train)  [52/100][15/29]  lr: 9.4553e-04  eta: 1:59:30  time: 76.4997   loss: 0.0111
11/07 05:58:57 - Epoch(train)  [52/100][20/29]  lr: 9.3521e-04  eta: 1:42:16  time: 87.6070   loss: 0.0126
11/07 05:59:08 - Epoch(train)  [52/100][25/29]  lr: 9.2406e-04  eta: 1:31:47  time: 98.6237   loss: 0.0092
11/07 06:00:02 - Epoch(train)  [53/100][5/29]  lr: 9.0198e-04  eta: 3:37:33  time: 47.0557   loss: 0.0122
11/07 06:00:11 - Epoch(train)  [53/100][10/29]  lr: 8.8863e-04  eta: 2:10:26  time: 56.6352   loss: 0.0098
11/07 06:00:20 - Epoch(train)  [53/100][15/29]  lr: 8.7454e-04  eta: 1:39:10  time: 64.8180   loss: 0.0144
11/07 06:00:28 - Epoch(train)  [53/100][20/29]  lr: 8.5974e-04  eta: 1:23:38  time: 73.1570   loss: 0.0087
11/07 06:00:48 - Epoch(train)  [53/100][25/29]  lr: 8.4426e-04  eta: 1:25:20  time: 93.6477   loss: 0.0108
11/07 06:01:55 - Epoch(train)  [54/100][5/29]  lr: 8.1475e-04  eta: 4:14:52  time: 56.3067   loss: 0.0211
11/07 06:02:06 - Epoch(train)  [54/100][10/29]  lr: 7.9751e-04  eta: 2:32:38  time: 67.6914   loss: 0.0080
11/07 06:02:18 - Epoch(train)  [54/100][15/29]  lr: 7.7971e-04  eta: 1:59:29  time: 79.7768   loss: 0.0078
11/07 06:02:27 - Epoch(train)  [54/100][20/29]  lr: 7.6137e-04  eta: 1:38:57  time: 88.4154   loss: 0.0057
11/07 06:02:50 - Epoch(train)  [54/100][25/29]  lr: 7.4253e-04  eta: 1:39:55  time: 112.0172   loss: 0.0053
11/07 06:07:59 - Epoch(train)  [55/100][5/29]  lr: 7.0749e-04  eta: 22:30:1  time: 304.7470   loss: 0.0051
11/07 06:08:59 - Epoch(train)  [55/100][10/29]  lr: 6.8746e-04  eta: 13:24:22  time: 364.5225   loss: 0.0115
11/07 06:10:30 - Epoch(train)  [55/100][15/29]  lr: 6.6707e-04  eta: 11:7:59  time: 455.7888   loss: 0.0102
11/07 06:11:58 - Epoch(train)  [55/100][20/29]  lr: 6.4636e-04  eta: 9:55:28  time: 543.8196   loss: 0.0053
11/07 06:13:36 - Epoch(train)  [55/100][25/29]  lr: 6.2538e-04  eta: 9:20:14  time: 641.9950   loss: 0.0152

11/07 06:13:46 - Epoch(test) - offshore: [55/100]:
Threshold is drived from OTSU algorithm.
11/07 06:14:33 - Epoch(test) : [5/13]
11/07 06:14:39 - Epoch(test) : [10/13]
Accuracy: 0.68、Precision: 0.54、Recall: 0.94、F1-score: 0.69、Average_Precision: 0.99

11/07 06:14:47 - Epoch(test) - inshore: [55/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.68、Recall: 0.66、F1-score: 0.67、Average_Precision: 0.79
11/07 06:16:29 - Epoch(train)  [56/100][5/29]  lr: 5.8703e-04  eta: 3:24:28  time: 47.1858   loss: 0.0045
11/07 06:16:36 - Epoch(train)  [56/100][10/29]  lr: 5.6548e-04  eta: 1:58:6  time: 54.7236   loss: 0.0037
11/07 06:16:43 - Epoch(train)  [56/100][15/29]  lr: 5.4381e-04  eta: 1:28:44  time: 61.9157   loss: 0.0029
11/07 06:16:50 - Epoch(train)  [56/100][20/29]  lr: 5.2205e-04  eta: 1:13:57  time: 69.0621   loss: 0.0020
11/07 06:17:01 - Epoch(train)  [56/100][25/29]  lr: 5.0025e-04  eta: 1:8:14  time: 79.9770   loss: 0.0047
11/07 06:17:54 - Epoch(train)  [57/100][5/29]  lr: 4.6104e-04  eta: 3:13:17  time: 45.6253   loss: 0.0026
11/07 06:18:01 - Epoch(train)  [57/100][10/29]  lr: 4.3935e-04  eta: 1:50:48  time: 52.5145   loss: 0.0020
11/07 06:18:10 - Epoch(train)  [57/100][15/29]  lr: 4.1777e-04  eta: 1:26:18  time: 61.5964   loss: 0.0025
11/07 06:18:19 - Epoch(train)  [57/100][20/29]  lr: 3.9635e-04  eta: 1:13:18  time: 70.0426   loss: 0.0006
11/07 06:18:29 - Epoch(train)  [57/100][25/29]  lr: 3.7512e-04  eta: 1:6:57  time: 80.2942   loss: 0.0020
11/07 06:19:25 - Epoch(train)  [58/100][5/29]  lr: 3.3755e-04  eta: 3:24:17  time: 49.3458   loss: 0.0003
11/07 06:19:33 - Epoch(train)  [58/100][10/29]  lr: 3.1709e-04  eta: 1:57:6  time: 56.8056   loss: 0.0008
11/07 06:19:40 - Epoch(train)  [58/100][15/29]  lr: 2.9698e-04  eta: 1:28:10  time: 64.4078   loss: 0.0003
11/07 06:19:48 - Epoch(train)  [58/100][20/29]  lr: 2.7726e-04  eta: 1:13:53  time: 72.2587   loss: 0.0003
11/07 06:19:59 - Epoch(train)  [58/100][25/29]  lr: 2.5797e-04  eta: 1:7:40  time: 83.0608   loss: 0.0003
11/07 06:20:54 - Epoch(train)  [59/100][5/29]  lr: 2.2442e-04  eta: 3:18:8  time: 49.0031   loss: 0.0001
11/07 06:21:01 - Epoch(train)  [59/100][10/29]  lr: 2.0650e-04  eta: 1:54:7  time: 56.6873   loss: 0.0002
11/07 06:21:09 - Epoch(train)  [59/100][15/29]  lr: 1.8915e-04  eta: 1:26:39  time: 64.8297   loss: 0.0005
11/07 06:21:18 - Epoch(train)  [59/100][20/29]  lr: 1.7238e-04  eta: 1:13:39  time: 73.7746   loss: 0.0002
11/07 06:21:27 - Epoch(train)  [59/100][25/29]  lr: 1.5624e-04  eta: 1:5:46  time: 82.7054   loss: 0.0001
11/07 06:22:33 - Epoch(train)  [60/100][5/29]  lr: 1.2886e-04  eta: 3:40:30  time: 55.8741   loss: 0.0001
11/07 06:22:41 - Epoch(train)  [60/100][10/29]  lr: 1.1463e-04  eta: 2:5:7  time: 63.6751   loss: 0.0001
11/07 06:22:48 - Epoch(train)  [60/100][15/29]  lr: 1.0113e-04  eta: 1:32:6  time: 70.6163   loss: 0.0002
11/07 06:22:59 - Epoch(train)  [60/100][20/29]  lr: 8.8393e-05  eta: 1:19:51  time: 81.9681   loss: 0.0002
11/07 06:23:13 - Epoch(train)  [60/100][25/29]  lr: 7.6438e-05  eta: 1:14:46  time: 96.3544   loss: 0.0001

11/07 06:23:24 - Epoch(test) - offshore: [60/100]:
Threshold is drived from OTSU algorithm.
11/07 06:24:15 - Epoch(test) : [5/13]
11/07 06:24:21 - Epoch(test) : [10/13]
Accuracy: 0.60、Precision: 0.48、Recall: 0.95、F1-score: 0.64、Average_Precision: 0.99

11/07 06:24:31 - Epoch(test) - inshore: [60/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.60、Recall: 0.71、F1-score: 0.65、Average_Precision: 0.80
11/07 06:25:32 - Best model achieved at epoch 60, with inshore AP 0.7971
11/07 06:26:23 - Epoch(train)  [61/100][5/29]  lr: 5.6966e-05  eta: 3:15:21  time: 50.7418   loss: 0.0001
11/07 06:26:30 - Epoch(train)  [61/100][10/29]  lr: 4.7323e-05  eta: 1:51:23  time: 58.1189   loss: 0.0001
11/07 06:26:38 - Epoch(train)  [61/100][15/29]  lr: 3.8541e-05  eta: 1:23:27  time: 65.5984   loss: 0.0001
11/07 06:26:47 - Epoch(train)  [61/100][20/29]  lr: 3.0639e-05  eta: 1:11:5  time: 74.8250   loss: 0.0002
11/07 06:26:59 - Epoch(train)  [61/100][25/29]  lr: 2.3630e-05  eta: 1:5:24  time: 86.4498   loss: 0.0001
11/07 06:27:53 - Epoch(train)  [62/100][5/29]  lr: 1.3309e-05  eta: 3:1:39  time: 48.3972   loss: 0.0001
11/07 06:28:02 - Epoch(train)  [62/100][10/29]  lr: 8.8684e-06  eta: 1:45:48  time: 56.6304   loss: 0.0001
11/07 06:28:11 - Epoch(train)  [62/100][15/29]  lr: 5.3635e-06  eta: 1:22:8  time: 66.2475   loss: 0.0001
11/07 06:28:19 - Epoch(train)  [62/100][20/29]  lr: 2.8007e-06  eta: 1:8:53  time: 74.4035   loss: 0.0002
11/07 06:28:28 - Epoch(train)  [62/100][25/29]  lr: 1.1849e-06  eta: 1:1:8  time: 82.9328   loss: 0.0002
11/07 06:29:30 - Epoch(train)  [63/100][5/29]  lr: 9.9983e-04  eta: 3:14:22  time: 53.1545   loss: 0.0002
11/07 06:29:39 - Epoch(train)  [63/100][10/29]  lr: 9.9878e-04  eta: 1:52:30  time: 61.8212   loss: 0.0001
11/07 06:29:47 - Epoch(train)  [63/100][15/29]  lr: 9.9679e-04  eta: 1:25:14  time: 70.5779   loss: 0.0003
11/07 06:29:54 - Epoch(train)  [63/100][20/29]  lr: 9.9385e-04  eta: 1:9:43  time: 77.3204   loss: 0.0003
11/07 06:30:05 - Epoch(train)  [63/100][25/29]  lr: 9.8997e-04  eta: 1:3:27  time: 88.3852   loss: 0.0008
11/07 06:31:01 - Epoch(train)  [64/100][5/29]  lr: 9.8064e-04  eta: 2:50:58  time: 48.0266   loss: 0.0016
11/07 06:31:11 - Epoch(train)  [64/100][10/29]  lr: 9.7417e-04  eta: 1:41:45  time: 57.4358   loss: 0.0005
11/07 06:31:18 - Epoch(train)  [64/100][15/29]  lr: 9.6681e-04  eta: 1:15:42  time: 64.3958   loss: 0.0009
11/07 06:31:25 - Epoch(train)  [64/100][20/29]  lr: 9.5855e-04  eta: 1:2:43  time: 71.4889   loss: 0.0012
11/07 06:31:38 - Epoch(train)  [64/100][25/29]  lr: 9.4942e-04  eta: 0:58:58  time: 84.4078   loss: 0.0039
11/07 06:32:38 - Epoch(train)  [65/100][5/29]  lr: 9.3085e-04  eta: 3:1:53  time: 52.5173   loss: 0.0087
11/07 06:32:45 - Epoch(train)  [65/100][10/29]  lr: 9.1938e-04  eta: 1:43:35  time: 60.1123   loss: 0.0098
11/07 06:32:52 - Epoch(train)  [65/100][15/29]  lr: 9.0710e-04  eta: 1:16:47  time: 67.1686   loss: 0.0118
11/07 06:33:00 - Epoch(train)  [65/100][20/29]  lr: 8.9406e-04  eta: 1:3:25  time: 74.3343   loss: 0.0065
11/07 06:33:12 - Epoch(train)  [65/100][25/29]  lr: 8.8026e-04  eta: 0:58:49  time: 86.5956   loss: 0.0117

11/07 06:33:21 - Epoch(test) - offshore: [65/100]:
Threshold is drived from OTSU algorithm.
11/07 06:34:16 - Epoch(test) : [5/13]
11/07 06:34:23 - Epoch(test) : [10/13]
Accuracy: 0.71、Precision: 0.56、Recall: 0.95、F1-score: 0.71、Average_Precision: 0.99

11/07 06:34:33 - Epoch(test) - inshore: [65/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.70、Recall: 0.69、F1-score: 0.70、Average_Precision: 0.77
11/07 06:36:14 - Epoch(train)  [66/100][5/29]  lr: 8.5363e-04  eta: 2:54:41  time: 51.8876   loss: 0.0159
11/07 06:36:22 - Epoch(train)  [66/100][10/29]  lr: 8.3788e-04  eta: 1:40:21  time: 59.9168   loss: 0.0095
11/07 06:36:29 - Epoch(train)  [66/100][15/29]  lr: 8.2148e-04  eta: 1:14:47  time: 67.3105   loss: 0.0109
11/07 06:36:37 - Epoch(train)  [66/100][20/29]  lr: 8.0448e-04  eta: 1:1:56  time: 74.7120   loss: 0.0101
11/07 06:36:49 - Epoch(train)  [66/100][25/29]  lr: 7.8689e-04  eta: 0:57:10  time: 86.6238   loss: 0.0069
11/07 06:37:49 - Epoch(train)  [67/100][5/29]  lr: 7.5389e-04  eta: 2:53:23  time: 53.0241   loss: 0.0084
11/07 06:37:57 - Epoch(train)  [67/100][10/29]  lr: 7.3487e-04  eta: 1:38:9  time: 60.3412   loss: 0.0053
11/07 06:38:04 - Epoch(train)  [67/100][15/29]  lr: 7.1540e-04  eta: 1:12:53  time: 67.5579   loss: 0.0093
11/07 06:38:12 - Epoch(train)  [67/100][20/29]  lr: 6.9552e-04  eta: 1:0:38  time: 75.3328   loss: 0.0071
11/07 06:38:24 - Epoch(train)  [67/100][25/29]  lr: 6.7527e-04  eta: 0:55:56  time: 87.3280   loss: 0.0061
11/07 06:39:19 - Epoch(train)  [68/100][5/29]  lr: 6.3800e-04  eta: 2:34:28  time: 48.6778   loss: 0.0044
11/07 06:39:29 - Epoch(train)  [68/100][10/29]  lr: 6.1691e-04  eta: 1:33:6  time: 58.9897   loss: 0.0065
11/07 06:39:37 - Epoch(train)  [68/100][15/29]  lr: 5.9561e-04  eta: 1:9:42  time: 66.6021   loss: 0.0066
11/07 06:39:45 - Epoch(train)  [68/100][20/29]  lr: 5.7412e-04  eta: 0:58:43  time: 75.2093   loss: 0.0063
11/07 06:39:55 - Epoch(train)  [68/100][25/29]  lr: 5.5249e-04  eta: 0:52:42  time: 84.8215   loss: 0.0033
11/07 06:40:51 - Epoch(train)  [69/100][5/29]  lr: 5.1333e-04  eta: 2:24:35  time: 46.9939   loss: 0.0021
11/07 06:40:58 - Epoch(train)  [69/100][10/29]  lr: 4.9153e-04  eta: 1:22:45  time: 54.0856   loss: 0.0026
11/07 06:41:05 - Epoch(train)  [69/100][15/29]  lr: 4.6974e-04  eta: 1:2:33  time: 61.6681   loss: 0.0035
11/07 06:41:13 - Epoch(train)  [69/100][20/29]  lr: 4.4801e-04  eta: 0:52:20  time: 69.1639   loss: 0.0014
11/07 06:41:25 - Epoch(train)  [69/100][25/29]  lr: 4.2638e-04  eta: 0:49:2  time: 81.4545   loss: 0.0004
11/07 06:42:19 - Epoch(train)  [70/100][5/29]  lr: 3.8783e-04  eta: 2:19:3  time: 46.6663   loss: 0.0004
11/07 06:42:26 - Epoch(train)  [70/100][10/29]  lr: 3.6670e-04  eta: 1:19:39  time: 53.7674   loss: 0.0008
11/07 06:42:35 - Epoch(train)  [70/100][15/29]  lr: 3.4582e-04  eta: 1:2:20  time: 63.4696   loss: 0.0003
11/07 06:42:43 - Epoch(train)  [70/100][20/29]  lr: 3.2523e-04  eta: 0:52:7  time: 71.1577   loss: 0.0005
11/07 06:42:52 - Epoch(train)  [70/100][25/29]  lr: 3.0498e-04  eta: 0:46:55  time: 80.5236   loss: 0.0004

11/07 06:43:03 - Epoch(test) - offshore: [70/100]:
Threshold is drived from OTSU algorithm.
11/07 06:43:55 - Epoch(test) : [5/13]
11/07 06:44:01 - Epoch(test) : [10/13]
Accuracy: 0.63、Precision: 0.50、Recall: 0.95、F1-score: 0.66、Average_Precision: 0.99

11/07 06:44:15 - Epoch(test) - inshore: [70/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.64、Recall: 0.70、F1-score: 0.67、Average_Precision: 0.79
11/07 06:45:46 - Epoch(train)  [71/100][5/29]  lr: 2.6949e-04  eta: 2:17:18  time: 47.6191   loss: 0.0002
11/07 06:45:54 - Epoch(train)  [71/100][10/29]  lr: 2.5038e-04  eta: 1:19:5  time: 55.1790   loss: 0.0002
11/07 06:46:03 - Epoch(train)  [71/100][15/29]  lr: 2.3173e-04  eta: 1:0:50  time: 64.0406   loss: 0.0002
11/07 06:46:10 - Epoch(train)  [71/100][20/29]  lr: 2.1361e-04  eta: 0:50:33  time: 71.3868   loss: 0.0001
11/07 06:46:21 - Epoch(train)  [71/100][25/29]  lr: 1.9602e-04  eta: 0:46:8  time: 81.9204   loss: 0.0001
11/07 06:47:16 - Epoch(train)  [72/100][5/29]  lr: 1.6585e-04  eta: 2:7:15  time: 45.6680   loss: 0.0002
11/07 06:47:24 - Epoch(train)  [72/100][10/29]  lr: 1.4997e-04  eta: 1:14:14  time: 53.6054   loss: 0.0001
11/07 06:47:32 - Epoch(train)  [72/100][15/29]  lr: 1.3476e-04  eta: 0:56:10  time: 61.2134   loss: 0.0001
11/07 06:47:41 - Epoch(train)  [72/100][20/29]  lr: 1.2024e-04  eta: 0:47:42  time: 69.7271   loss: 0.0001
11/07 06:47:54 - Epoch(train)  [72/100][25/29]  lr: 1.0644e-04  eta: 0:45:7  time: 82.9359   loss: 0.0001
11/07 06:48:52 - Epoch(train)  [73/100][5/29]  lr: 8.3516e-05  eta: 2:20:32  time: 52.2461   loss: 0.0001
11/07 06:49:00 - Epoch(train)  [73/100][10/29]  lr: 7.1881e-05  eta: 1:20:54  time: 60.5266   loss: 0.0001
11/07 06:49:08 - Epoch(train)  [73/100][15/29]  lr: 6.1061e-05  eta: 1:0:11  time: 67.9752   loss: 0.0001
11/07 06:49:15 - Epoch(train)  [73/100][20/29]  lr: 5.1078e-05  eta: 0:49:55  time: 75.6549   loss: 0.0002
11/07 06:49:26 - Epoch(train)  [73/100][25/29]  lr: 4.1949e-05  eta: 0:45:16  time: 86.2858   loss: 0.0001
11/07 06:50:21 - Epoch(train)  [74/100][5/29]  lr: 2.7727e-05  eta: 2:2:50  time: 47.3666   loss: 0.0000
11/07 06:50:29 - Epoch(train)  [74/100][10/29]  lr: 2.1080e-05  eta: 1:10:54  time: 55.0394   loss: 0.0001
11/07 06:50:37 - Epoch(train)  [74/100][15/29]  lr: 1.5345e-05  eta: 0:54:8  time: 63.4442   loss: 0.0001
11/07 06:50:45 - Epoch(train)  [74/100][20/29]  lr: 1.0533e-05  eta: 0:45:16  time: 71.2056   loss: 0.0001
11/07 06:50:59 - Epoch(train)  [74/100][25/29]  lr: 6.6528e-06  eta: 0:42:59  time: 85.0754   loss: 0.0001
11/07 06:51:57 - Epoch(train)  [75/100][5/29]  lr: 2.0406e-06  eta: 2:10:50  time: 52.4076   loss: 0.0001
11/07 06:52:05 - Epoch(train)  [75/100][10/29]  lr: 8.0443e-07  eta: 1:14:49  time: 60.3449   loss: 0.0001
11/07 06:52:13 - Epoch(train)  [75/100][15/29]  lr: 9.9998e-04  eta: 0:55:48  time: 67.9632   loss: 0.0002
11/07 06:52:20 - Epoch(train)  [75/100][20/29]  lr: 9.9932e-04  eta: 0:46:14  time: 75.5979   loss: 0.0000
11/07 06:52:30 - Epoch(train)  [75/100][25/29]  lr: 9.9770e-04  eta: 0:41:39  time: 85.7179   loss: 0.0001

11/07 06:52:39 - Epoch(test) - offshore: [75/100]:
Threshold is drived from OTSU algorithm.
11/07 06:53:29 - Epoch(test) : [5/13]
11/07 06:53:36 - Epoch(test) : [10/13]
Accuracy: 0.60、Precision: 0.48、Recall: 0.95、F1-score: 0.64、Average_Precision: 0.99

11/07 06:53:47 - Epoch(test) - inshore: [75/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.90、Precision: 0.58、Recall: 0.71、F1-score: 0.64、Average_Precision: 0.79
11/07 06:55:31 - Epoch(train)  [76/100][5/29]  lr: 9.9241e-04  eta: 2:7:41  time: 53.2065   loss: 0.0007
11/07 06:55:39 - Epoch(train)  [76/100][10/29]  lr: 9.8815e-04  eta: 1:12:28  time: 60.8124   loss: 0.0012
11/07 06:55:47 - Epoch(train)  [76/100][15/29]  lr: 9.8297e-04  eta: 0:54:33  time: 69.1535   loss: 0.0017
11/07 06:55:55 - Epoch(train)  [76/100][20/29]  lr: 9.7687e-04  eta: 0:45:23  time: 77.2560   loss: 0.0027
11/07 06:56:08 - Epoch(train)  [76/100][25/29]  lr: 9.6986e-04  eta: 0:42:6  time: 90.2167   loss: 0.0069
11/07 06:57:08 - Epoch(train)  [77/100][5/29]  lr: 9.5500e-04  eta: 2:2:42  time: 53.2720   loss: 0.0146
11/07 06:57:15 - Epoch(train)  [77/100][10/29]  lr: 9.4553e-04  eta: 1:8:33  time: 59.9593   loss: 0.0069
11/07 06:57:25 - Epoch(train)  [77/100][15/29]  lr: 9.3521e-04  eta: 0:52:44  time: 69.7025   loss: 0.0058
11/07 06:57:33 - Epoch(train)  [77/100][20/29]  lr: 9.2406e-04  eta: 0:43:40  time: 77.5180   loss: 0.0101
11/07 06:57:42 - Epoch(train)  [77/100][25/29]  lr: 9.1211e-04  eta: 0:38:58  time: 87.1451   loss: 0.0107
11/07 06:58:43 - Epoch(train)  [78/100][5/29]  lr: 8.8863e-04  eta: 1:50:19  time: 49.9998   loss: 0.0132
11/07 06:58:50 - Epoch(train)  [78/100][10/29]  lr: 8.7454e-04  eta: 1:2:14  time: 56.8343   loss: 0.0130
11/07 06:58:58 - Epoch(train)  [78/100][15/29]  lr: 8.5974e-04  eta: 0:46:48  time: 64.6124   loss: 0.0111
11/07 06:59:05 - Epoch(train)  [78/100][20/29]  lr: 8.4426e-04  eta: 0:38:58  time: 72.2962   loss: 0.0115
11/07 06:59:17 - Epoch(train)  [78/100][25/29]  lr: 8.2812e-04  eta: 0:36:5  time: 84.3345   loss: 0.0066
11/07 07:00:25 - Epoch(train)  [79/100][5/29]  lr: 7.9751e-04  eta: 1:56:21  time: 55.1469   loss: 0.0095
11/07 07:00:32 - Epoch(train)  [79/100][10/29]  lr: 7.7971e-04  eta: 1:5:27  time: 62.5402   loss: 0.0139
11/07 07:00:40 - Epoch(train)  [79/100][15/29]  lr: 7.6137e-04  eta: 0:48:44  time: 70.4046   loss: 0.0101
11/07 07:00:49 - Epoch(train)  [79/100][20/29]  lr: 7.4253e-04  eta: 0:40:56  time: 79.5046   loss: 0.0087
11/07 07:01:02 - Epoch(train)  [79/100][25/29]  lr: 7.2324e-04  eta: 0:37:46  time: 92.4485   loss: 0.0073
11/07 07:02:00 - Epoch(train)  [80/100][5/29]  lr: 6.8746e-04  eta: 1:45:59  time: 52.6470   loss: 0.0070
11/07 07:02:08 - Epoch(train)  [80/100][10/29]  lr: 6.6707e-04  eta: 1:0:10  time: 60.2821   loss: 0.0030
11/07 07:02:16 - Epoch(train)  [80/100][15/29]  lr: 6.4636e-04  eta: 0:44:59  time: 68.1626   loss: 0.0047
11/07 07:02:24 - Epoch(train)  [80/100][20/29]  lr: 6.2538e-04  eta: 0:37:21  time: 76.1165   loss: 0.0106
11/07 07:02:35 - Epoch(train)  [80/100][25/29]  lr: 6.0415e-04  eta: 0:33:57  time: 87.2320   loss: 0.0026

11/07 07:02:42 - Epoch(test) - offshore: [80/100]:
Threshold is drived from OTSU algorithm.
11/07 07:03:35 - Epoch(test) : [5/13]
11/07 07:03:41 - Epoch(test) : [10/13]
Accuracy: 0.72、Precision: 0.57、Recall: 0.95、F1-score: 0.72、Average_Precision: 0.99

11/07 07:03:50 - Epoch(test) - inshore: [80/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.70、Recall: 0.69、F1-score: 0.70、Average_Precision: 0.78
11/07 07:05:46 - Epoch(train)  [81/100][5/29]  lr: 5.6548e-04  eta: 2:1:39  time: 63.4757   loss: 0.0045
11/07 07:05:53 - Epoch(train)  [81/100][10/29]  lr: 5.4381e-04  eta: 1:6:49  time: 70.3476   loss: 0.0020
11/07 07:06:01 - Epoch(train)  [81/100][15/29]  lr: 5.2205e-04  eta: 0:49:15  time: 78.4719   loss: 0.0039
11/07 07:06:08 - Epoch(train)  [81/100][20/29]  lr: 5.0025e-04  eta: 0:39:52  time: 85.4323   loss: 0.0039
11/07 07:06:18 - Epoch(train)  [81/100][25/29]  lr: 4.7845e-04  eta: 0:35:33  time: 96.1097   loss: 0.0009
11/07 07:07:12 - Epoch(train)  [82/100][5/29]  lr: 4.3935e-04  eta: 1:25:21  time: 46.9046   loss: 0.0014
11/07 07:07:20 - Epoch(train)  [82/100][10/29]  lr: 4.1777e-04  eta: 0:49:37  time: 55.0396   loss: 0.0010
11/07 07:07:26 - Epoch(train)  [82/100][15/29]  lr: 3.9635e-04  eta: 0:36:43  time: 61.6774   loss: 0.0009
11/07 07:07:34 - Epoch(train)  [82/100][20/29]  lr: 3.7512e-04  eta: 0:30:50  time: 69.7056   loss: 0.0011
11/07 07:07:46 - Epoch(train)  [82/100][25/29]  lr: 3.5414e-04  eta: 0:28:30  time: 81.2791   loss: 0.0006
11/07 07:08:44 - Epoch(train)  [83/100][5/29]  lr: 3.1709e-04  eta: 1:29:34  time: 51.9813   loss: 0.0003
11/07 07:08:51 - Epoch(train)  [83/100][10/29]  lr: 2.9698e-04  eta: 0:50:50  time: 59.5727   loss: 0.0019
11/07 07:08:59 - Epoch(train)  [83/100][15/29]  lr: 2.7726e-04  eta: 0:38:3  time: 67.5645   loss: 0.0002
11/07 07:09:08 - Epoch(train)  [83/100][20/29]  lr: 2.5797e-04  eta: 0:31:50  time: 76.1082   loss: 0.0002
11/07 07:09:23 - Epoch(train)  [83/100][25/29]  lr: 2.3913e-04  eta: 0:30:11  time: 91.1255   loss: 0.0001
11/07 07:10:25 - Epoch(train)  [84/100][5/29]  lr: 2.0650e-04  eta: 1:22:23  time: 50.6468   loss: 0.0001
11/07 07:10:36 - Epoch(train)  [84/100][10/29]  lr: 1.8915e-04  eta: 0:49:56  time: 62.0408   loss: 0.0004
11/07 07:10:47 - Epoch(train)  [84/100][15/29]  lr: 1.7238e-04  eta: 0:38:19  time: 72.1645   loss: 0.0001
11/07 07:10:55 - Epoch(train)  [84/100][20/29]  lr: 1.5624e-04  eta: 0:31:53  time: 80.8992   loss: 0.0001
11/07 07:11:04 - Epoch(train)  [84/100][25/29]  lr: 1.4076e-04  eta: 0:28:0  time: 89.7598   loss: 0.0002
11/07 07:12:08 - Epoch(train)  [85/100][5/29]  lr: 1.1463e-04  eta: 1:14:33  time: 48.7269   loss: 0.0001
11/07 07:12:17 - Epoch(train)  [85/100][10/29]  lr: 1.0113e-04  eta: 0:43:37  time: 57.6644   loss: 0.0001
11/07 07:12:25 - Epoch(train)  [85/100][15/29]  lr: 8.8393e-05  eta: 0:32:37  time: 65.3989   loss: 0.0001
11/07 07:12:33 - Epoch(train)  [85/100][20/29]  lr: 7.6438e-05  eta: 0:27:22  time: 73.9836   loss: 0.0001
11/07 07:12:46 - Epoch(train)  [85/100][25/29]  lr: 6.5290e-05  eta: 0:25:17  time: 86.4318   loss: 0.0003

11/07 07:12:51 - Epoch(test) - offshore: [85/100]:
Threshold is drived from OTSU algorithm.
11/07 07:13:35 - Epoch(test) : [5/13]
11/07 07:13:41 - Epoch(test) : [10/13]
Accuracy: 0.61、Precision: 0.49、Recall: 0.95、F1-score: 0.65、Average_Precision: 0.99

11/07 07:13:50 - Epoch(test) - inshore: [85/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.64、Recall: 0.69、F1-score: 0.66、Average_Precision: 0.81
11/07 07:14:37 - Best model achieved at epoch 85, with inshore AP 0.8065
11/07 07:15:20 - Epoch(train)  [86/100][5/29]  lr: 4.7323e-05  eta: 1:2:2  time: 43.2817   loss: 0.0001
11/07 07:15:27 - Epoch(train)  [86/100][10/29]  lr: 3.8541e-05  eta: 0:35:40  time: 50.3668   loss: 0.0001
11/07 07:15:35 - Epoch(train)  [86/100][15/29]  lr: 3.0639e-05  eta: 0:27:11  time: 58.2711   loss: 0.0001
11/07 07:15:42 - Epoch(train)  [86/100][20/29]  lr: 2.3630e-05  eta: 0:22:31  time: 65.1183   loss: 0.0001
11/07 07:15:54 - Epoch(train)  [86/100][25/29]  lr: 1.7529e-05  eta: 0:20:58  time: 76.7503   loss: 0.0001
11/07 07:16:44 - Epoch(train)  [87/100][5/29]  lr: 8.8684e-06  eta: 0:57:54  time: 43.3238   loss: 0.0001
11/07 07:16:52 - Epoch(train)  [87/100][10/29]  lr: 5.3635e-06  eta: 0:33:34  time: 50.8751   loss: 0.0002
11/07 07:16:59 - Epoch(train)  [87/100][15/29]  lr: 2.8007e-06  eta: 0:25:17  time: 58.2209   loss: 0.0001
11/07 07:17:07 - Epoch(train)  [87/100][20/29]  lr: 1.1849e-06  eta: 0:21:10  time: 65.8096   loss: 0.0001
11/07 07:17:19 - Epoch(train)  [87/100][25/29]  lr: 5.1903e-07  eta: 0:19:51  time: 78.1735   loss: 0.0001
11/07 07:18:12 - Epoch(train)  [88/100][5/29]  lr: 9.9878e-04  eta: 0:54:30  time: 43.9640   loss: 0.0000
11/07 07:18:19 - Epoch(train)  [88/100][10/29]  lr: 9.9679e-04  eta: 0:31:1  time: 50.7283   loss: 0.0001
11/07 07:18:26 - Epoch(train)  [88/100][15/29]  lr: 9.9385e-04  eta: 0:23:15  time: 57.8067   loss: 0.0000
11/07 07:18:35 - Epoch(train)  [88/100][20/29]  lr: 9.8997e-04  eta: 0:19:56  time: 67.0434   loss: 0.0000
11/07 07:18:48 - Epoch(train)  [88/100][25/29]  lr: 9.8516e-04  eta: 0:18:47  time: 80.0805   loss: 0.0000
11/07 07:19:38 - Epoch(train)  [89/100][5/29]  lr: 9.7417e-04  eta: 0:51:29  time: 45.0395   loss: 0.0000
11/07 07:19:45 - Epoch(train)  [89/100][10/29]  lr: 9.6681e-04  eta: 0:29:18  time: 52.0241   loss: 0.0000
11/07 07:19:53 - Epoch(train)  [89/100][15/29]  lr: 9.5855e-04  eta: 0:22:14  time: 60.0986   loss: 0.0000
11/07 07:20:01 - Epoch(train)  [89/100][20/29]  lr: 9.4942e-04  eta: 0:18:30  time: 67.6862   loss: 0.0000
11/07 07:20:12 - Epoch(train)  [89/100][25/29]  lr: 9.3944e-04  eta: 0:17:2  time: 79.1219   loss: 0.0000
11/07 07:21:03 - Epoch(train)  [90/100][5/29]  lr: 9.1938e-04  eta: 0:45:23  time: 43.3623   loss: 0.0000
11/07 07:21:10 - Epoch(train)  [90/100][10/29]  lr: 9.0710e-04  eta: 0:26:0  time: 50.5022   loss: 0.0000
11/07 07:21:18 - Epoch(train)  [90/100][15/29]  lr: 8.9406e-04  eta: 0:19:45  time: 58.5079   loss: 0.0000
11/07 07:21:25 - Epoch(train)  [90/100][20/29]  lr: 8.8026e-04  eta: 0:16:20  time: 65.5548   loss: 0.0000
11/07 07:21:36 - Epoch(train)  [90/100][25/29]  lr: 8.6574e-04  eta: 0:15:0  time: 76.5517   loss: 0.0000

11/07 07:21:46 - Epoch(test) - offshore: [90/100]:
Threshold is drived from OTSU algorithm.
11/07 07:22:34 - Epoch(test) : [5/13]
11/07 07:22:40 - Epoch(test) : [10/13]
Accuracy: 0.57、Precision: 0.46、Recall: 0.96、F1-score: 0.62、Average_Precision: 0.99

11/07 07:22:49 - Epoch(test) - inshore: [90/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.59、Recall: 0.71、F1-score: 0.64、Average_Precision: 0.80
11/07 07:24:22 - Epoch(train)  [91/100][5/29]  lr: 8.3788e-04  eta: 0:48:30  time: 51.0599   loss: 0.0000
11/07 07:24:30 - Epoch(train)  [91/100][10/29]  lr: 8.2148e-04  eta: 0:27:37  time: 59.2013   loss: 0.0000
11/07 07:24:38 - Epoch(train)  [91/100][15/29]  lr: 8.0448e-04  eta: 0:20:26  time: 66.9120   loss: 0.0000
11/07 07:24:46 - Epoch(train)  [91/100][20/29]  lr: 7.8689e-04  eta: 0:16:55  time: 75.2423   loss: 0.0000
11/07 07:24:58 - Epoch(train)  [91/100][25/29]  lr: 7.6877e-04  eta: 0:15:22  time: 87.0628   loss: 0.0000
11/07 07:26:03 - Epoch(train)  [92/100][5/29]  lr: 7.3487e-04  eta: 0:49:33  time: 58.0757   loss: 0.0000
11/07 07:26:09 - Epoch(train)  [92/100][10/29]  lr: 7.1540e-04  eta: 0:26:54  time: 64.3078   loss: 0.0000
11/07 07:26:17 - Epoch(train)  [92/100][15/29]  lr: 6.9552e-04  eta: 0:19:46  time: 72.3534   loss: 0.0001
11/07 07:26:25 - Epoch(train)  [92/100][20/29]  lr: 6.7527e-04  eta: 0:16:3  time: 79.9420   loss: 0.0012
11/07 07:26:34 - Epoch(train)  [92/100][25/29]  lr: 6.5468e-04  eta: 0:14:3  time: 89.3866   loss: 0.0000
11/07 07:27:37 - Epoch(train)  [93/100][5/29]  lr: 6.1691e-04  eta: 0:40:32  time: 53.5861   loss: 0.0005
11/07 07:27:45 - Epoch(train)  [93/100][10/29]  lr: 5.9561e-04  eta: 0:22:31  time: 60.8679   loss: 0.0000
11/07 07:27:52 - Epoch(train)  [93/100][15/29]  lr: 5.7412e-04  eta: 0:16:26  time: 68.1839   loss: 0.0001
11/07 07:28:01 - Epoch(train)  [93/100][20/29]  lr: 5.5249e-04  eta: 0:13:36  time: 77.0689   loss: 0.0002
11/07 07:28:12 - Epoch(train)  [93/100][25/29]  lr: 5.3076e-04  eta: 0:12:8  time: 87.9568   loss: 0.0001
11/07 07:29:03 - Epoch(train)  [94/100][5/29]  lr: 4.9153e-04  eta: 0:28:48  time: 43.6397   loss: 0.0001
11/07 07:29:09 - Epoch(train)  [94/100][10/29]  lr: 4.6974e-04  eta: 0:16:10  time: 50.2805   loss: 0.0004
11/07 07:29:17 - Epoch(train)  [94/100][15/29]  lr: 4.4801e-04  eta: 0:12:5  time: 57.8859   loss: 0.0000
11/07 07:29:25 - Epoch(train)  [94/100][20/29]  lr: 4.2638e-04  eta: 0:10:0  time: 65.6364   loss: 0.0000
11/07 07:29:37 - Epoch(train)  [94/100][25/29]  lr: 4.0489e-04  eta: 0:9:13  time: 77.6991   loss: 0.0001
11/07 07:30:27 - Epoch(train)  [95/100][5/29]  lr: 3.6670e-04  eta: 0:23:55  time: 42.4635   loss: 0.0001
11/07 07:30:34 - Epoch(train)  [95/100][10/29]  lr: 3.4582e-04  eta: 0:13:35  time: 49.7404   loss: 0.0000
11/07 07:30:41 - Epoch(train)  [95/100][15/29]  lr: 3.2523e-04  eta: 0:10:0  time: 56.6259   loss: 0.0001
11/07 07:30:49 - Epoch(train)  [95/100][20/29]  lr: 3.0498e-04  eta: 0:8:15  time: 64.3464   loss: 0.0000
11/07 07:31:00 - Epoch(train)  [95/100][25/29]  lr: 2.8510e-04  eta: 0:7:30  time: 75.6203   loss: 0.0000

11/07 07:31:07 - Epoch(test) - offshore: [95/100]:
Threshold is drived from OTSU algorithm.
11/07 07:31:50 - Epoch(test) : [5/13]
11/07 07:31:55 - Epoch(test) : [10/13]
Accuracy: 0.56、Precision: 0.46、Recall: 0.96、F1-score: 0.62、Average_Precision: 0.99

11/07 07:32:05 - Epoch(test) - inshore: [95/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.90、Precision: 0.56、Recall: 0.71、F1-score: 0.63、Average_Precision: 0.80
11/07 07:33:33 - Epoch(train)  [96/100][5/29]  lr: 2.5038e-04  eta: 0:20:54  time: 44.8209   loss: 0.0000
11/07 07:33:40 - Epoch(train)  [96/100][10/29]  lr: 2.3173e-04  eta: 0:11:47  time: 52.3709   loss: 0.0000
11/07 07:33:48 - Epoch(train)  [96/100][15/29]  lr: 2.1361e-04  eta: 0:8:39  time: 59.9448   loss: 0.0000
11/07 07:33:56 - Epoch(train)  [96/100][20/29]  lr: 1.9602e-04  eta: 0:7:5  time: 68.1273   loss: 0.0000
11/07 07:34:08 - Epoch(train)  [96/100][25/29]  lr: 1.7902e-04  eta: 0:6:24  time: 80.0671   loss: 0.0000
11/07 07:34:58 - Epoch(train)  [97/100][5/29]  lr: 1.4997e-04  eta: 0:16:12  time: 43.7889   loss: 0.0000
11/07 07:35:05 - Epoch(train)  [97/100][10/29]  lr: 1.3476e-04  eta: 0:9:1  time: 51.0406   loss: 0.0000
11/07 07:35:12 - Epoch(train)  [97/100][15/29]  lr: 1.2024e-04  eta: 0:6:33  time: 58.4599   loss: 0.0000
11/07 07:35:20 - Epoch(train)  [97/100][20/29]  lr: 1.0644e-04  eta: 0:5:15  time: 65.7760   loss: 0.0000
11/07 07:35:30 - Epoch(train)  [97/100][25/29]  lr: 9.3396e-05  eta: 0:4:37  time: 76.3242   loss: 0.0000
11/07 07:36:19 - Epoch(train)  [98/100][5/29]  lr: 7.1881e-05  eta: 0:11:47  time: 43.1228   loss: 0.0000
11/07 07:36:28 - Epoch(train)  [98/100][10/29]  lr: 6.1061e-05  eta: 0:6:35  time: 51.3758   loss: 0.0000
11/07 07:36:35 - Epoch(train)  [98/100][15/29]  lr: 5.1078e-05  eta: 0:4:43  time: 58.9843   loss: 0.0000
11/07 07:36:43 - Epoch(train)  [98/100][20/29]  lr: 4.1949e-05  eta: 0:3:43  time: 66.7281   loss: 0.0000
11/07 07:36:55 - Epoch(train)  [98/100][25/29]  lr: 3.3693e-05  eta: 0:3:14  time: 78.3559   loss: 0.0000
11/07 07:37:42 - Epoch(train)  [99/100][5/29]  lr: 2.1080e-05  eta: 0:7:27  time: 42.2300   loss: 0.0000
11/07 07:37:50 - Epoch(train)  [99/100][10/29]  lr: 1.5345e-05  eta: 0:4:1  time: 50.3452   loss: 0.0000
11/07 07:37:58 - Epoch(train)  [99/100][15/29]  lr: 1.0533e-05  eta: 0:2:45  time: 57.5817   loss: 0.0000
11/07 07:38:06 - Epoch(train)  [99/100][20/29]  lr: 6.6528e-06  eta: 0:2:5  time: 66.2563   loss: 0.0000
11/07 07:38:21 - Epoch(train)  [99/100][25/29]  lr: 3.7125e-06  eta: 0:1:47  time: 81.2381   loss: 0.0000
11/07 07:39:15 - Epoch(train)  [100/100][5/29]  lr: 8.0443e-07  eta: 0:3:41  time: 46.1757   loss: 0.0000
11/07 07:39:22 - Epoch(train)  [100/100][10/29]  lr: 9.9998e-04  eta: 0:1:40  time: 53.1365   loss: 0.0000
11/07 07:39:28 - Epoch(train)  [100/100][15/29]  lr: 9.9932e-04  eta: 0:0:55  time: 59.6675   loss: 0.0000
11/07 07:39:36 - Epoch(train)  [100/100][20/29]  lr: 9.9770e-04  eta: 0:0:30  time: 67.9456   loss: 0.0000
11/07 07:39:48 - Epoch(train)  [100/100][25/29]  lr: 9.9514e-04  eta: 0:0:12  time: 79.5555   loss: 0.0000

11/07 07:39:56 - Epoch(test) - offshore: [100/100]:
Threshold is drived from OTSU algorithm.
11/07 07:40:43 - Epoch(test) : [5/13]
11/07 07:40:49 - Epoch(test) : [10/13]
Accuracy: 0.55、Precision: 0.45、Recall: 0.96、F1-score: 0.61、Average_Precision: 0.99

11/07 07:40:59 - Epoch(test) - inshore: [100/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.90、Precision: 0.56、Recall: 0.72、F1-score: 0.63、Average_Precision: 0.80
11/07 07:41:44 - Last model saved :work_dirs/SuperPoint+Boost-B_last_model_weight.pth
>>> model weights loaded from work_dirs/SuperPoint+Boost-B_best_model_weights_finetune.pth with MD5 b94feae223029c300fcb9d9972fe563b!

11/07 07:41:44 - Epoch(test) - all:
Threshold is drived from OTSU algorithm.
11/07 07:42:30 - Epoch(test) : [5/16]
11/07 07:42:37 - Epoch(test) : [10/16]
11/07 07:42:44 - Epoch(test) : [15/16]
Accuracy: 0.84、Precision: 0.53、Recall: 0.86、F1-score: 0.66、Average_Precision: 0.93

11/07 07:42:50 - Epoch(test) - offshore:
Threshold is drived from OTSU algorithm.
11/07 07:43:31 - Epoch(test) : [5/13]
11/07 07:43:37 - Epoch(test) : [10/13]
Accuracy: 0.61、Precision: 0.49、Recall: 0.97、F1-score: 0.65、Average_Precision: 0.99

11/07 07:43:46 - Epoch(test) - inshore:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.63、Recall: 0.75、F1-score: 0.68、Average_Precision: 0.81
>>> PR_cruve saved: work_dirs/PR_curve_SuperPoint+Boost-B_best_model_weights_finetune_b94fe.png

11/07 07:44:29 - Epoch(test) - data/hrsid/testsplit/all/images/1_0_0.png:
Threshold is drived from OTSU algorithm :0.19607843137254902.
Accuracy: 0.99、Precision: 0.67、Recall: 0.86、F1-score: 0.75、Average_Precision: 0.84
