nohup: ignoring input
Namespace(batch_size=128, checkpoint='', descriptor='SuperPoint+Boost-B-attlay6', eval_interval=5, expand_piexl=5, lr=0.001, multiprocessing_context='spawn', num_epochs=100, num_workers=4, print_interval=5, random_seed=0, save_interval=10, save_path='work_dirs/$des\\_best_model_weights_scratch_decay.pth', test=False, test_image='', test_threshold=None, test_threshold_mul=1, train_ratio=1.0, warmup_step=20)
>>> device: cuda!
>>> {'descriptor_dim': 256, 'keypoint_encoder': [32, 64, 128, 256], 'Attentional_layers': 6, 'last_activation': 'tanh', 'l2_normalization': False, 'output_dim': 256, 'keypoint_dim': 3, 'descriptor_encoder': [256, 256]}
from torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, LinearLR, MultiStepLR, ChainedScheduler
from extract_features import normalize_keypoints, extractor_build, extract_img_feature
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, average_precision_score, precision_recall_curve
from FeatureBooster.featurebooster import FeatureBooster, MLP
from mmengine.analysis import get_model_complexity_info
from torch.utils.data import DataLoader, Dataset
from torch.nn.utils.rnn import pad_sequence
from torch.nn.utils import clip_grad_norm_
from mmdet.models.losses import FocalLoss
from mmengine.dataset import Compose
from sklearn.cluster import DBSCAN
import multiprocessing as mp
from os import path as osp
from pathlib import Path
from torch import nn
import numpy as np
import matplotlib
matplotlib.use('Agg')  # 设置Agg为后端
import matplotlib.pyplot as plt
import warnings
import argparse
import shutil
import hashlib
import random
import torch
import time
import glob
import yaml
import cv2
import os
warnings.filterwarnings('ignore')

def parse_arguments():
    parser = argparse.ArgumentParser(description="Extract feature and refine descriptor using neural network to find ship keypoint.")
    
    parser.add_argument(
        '--descriptor', type=str, default='SuperPoint+Boost-B',
        help='descriptor to extract' )
    
    parser.add_argument(
        '--num_epochs', type=int, default=100,)
    
    parser.add_argument(
        '--train_ratio', type=float, default=1.0,
        help='The ratio of data used for training out of the training set' )    

    parser.add_argument(
        '--batch_size', type=int, default=128,)
    
    parser.add_argument(
        '--num_workers', type=int, default=4,)

    parser.add_argument(
        '--print_interval', type=int, default=5,)

    parser.add_argument(
        '--eval_interval', type=int, default=5,)
    
    parser.add_argument(
        '--save_interval', type=int, default=10,)

    parser.add_argument(
        '--lr', type=float, default=1e-3,)

    parser.add_argument(
        '--warmup_step', type=int, default=20,)

    parser.add_argument(
        '--random_seed', type=int, default=0,)

    parser.add_argument(
        '--expand_piexl', type=int, default=5,)

    parser.add_argument(
        '--test_threshold_mul', type=float, default=1,)
    
    parser.add_argument(
        '--test_threshold', type=float, default=None,)
           
    parser.add_argument(
        '--test_image', type=str, default='' ,)
    
    parser.add_argument(
        '--test', action='store_true',)
    
    parser.add_argument(
        '--save_path', type=str, default='',)
    
    parser.add_argument(
        '--checkpoint', type=str, default='',)

    parser.add_argument(
        '--multiprocessing_context', type=str, default=None,)
        
    args = parser.parse_args()
    return args

def calculate_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        # 以块的方式读取文件，以防文件太大
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

# 定义舰船目标关键点检测模型（示例）
class ShipKeyPointsModel(nn.Module):
    def __init__(self, descriptor, device='cpu', pretrained =''):
        super().__init__() 
        self.device = device       
        # load json config file
        config_file = Path(__file__).parent / "config.yaml"
        with open(str(config_file), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[descriptor]
        self.k = nn.Parameter(torch.tensor(1.0))
        # Model
        self.feature_booster = FeatureBooster(self.config)
        # load the model
        if os.path.isfile(pretrained):
            self.feature_booster.load_state_dict(torch.load(pretrained))
            print(f">>> feature_booster weights loaded from {pretrained}!")
        self.fc_out = MLP([self.config['output_dim'], self.config['output_dim']//2,1])
        self.fc_thed = MLP([self.config['output_dim'], self.config['output_dim']//2,1])
        self.to(self.device)
        
    def forward(self, x):
        x = self.feature_booster(x[...,self.config['keypoint_dim']:], x[...,:self.config['keypoint_dim']])
        x = (self.fc_out(x)-self.fc_thed(torch.mean(x,dim=-2,keepdim=True))).squeeze(-1)
        return torch.sigmoid(self.k* x)
    
# 定义数据集（示例）
class ShipKeyPointsDataset(Dataset):
    def __init__(self, data_root, descriptor, expand_piexl = 5, pipeline = [], img_suffix = 'png', debug = False, device = torch.device('cpu'), **kwargs):
        super(ShipKeyPointsDataset, self).__init__()
        self.transform = Compose(pipeline)  
        self.expand_piexl = expand_piexl
        self.debug = debug
        self.img_suffix = img_suffix
        self.descriptor = descriptor
        self.device = device
        config_file = Path(__file__).parent / "config.yaml"
        with open(str(config_file), 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        self.config = config[descriptor]
        self.extractor = extractor_build(self.descriptor, device = self.device)
        if 'ann_file' in kwargs and kwargs['ann_file'] !='': 
            # train case  
            ann_dir = kwargs['ann_file']
            if isinstance(ann_dir, str):
                ann_dir = [ann_dir]
        else:
            ann_dir = []
        self.txt_files = []
        for path in ann_dir:
            self.txt_files.extend(glob.glob(osp.join(data_root, path, "**/*.txt"), recursive=True))

        if 'train_ratio' in kwargs:
            self.txt_files = random.sample(self.txt_files, int(np.ceil(len(self.txt_files)*kwargs['train_ratio'])))

    def __len__(self):
        return len(self.txt_files)

    def load_data_info(self, idx):
        data_info = {}
        txt_file = self.txt_files[idx]
        img_id = osp.split(txt_file)[1][:-4]
        data_info['img_id'] = img_id
        img_name = img_id + f'.{self.img_suffix}'
        data_info['file_name'] = img_name
        
        img_path = txt_file.replace('.txt','.png').replace('labelTxt','images')
        data_info['img_path'] = img_path
        
        instances = []
        with open(txt_file) as f:
            s = f.readlines()
            for si in s:
                instance = {}
                bbox_info = si.split()
                instance['bbox_label'] = 0                       
                instance['ignore_flag'] = 0
                instance['bbox'] = [float(i) for i in bbox_info[:8]]
                instances.append(instance)
        data_info['instances'] = instances
        return data_info
                
    def __getitem__(self, idx):
        data_info = self.load_data_info(idx)
        bboxes = []
        if len(self.transform.transforms):       
            data = self.transform(data_info)
            image = data['inputs'].cpu().numpy().transpose(1, 2, 0)
            box = data['data_samples'].gt_instances.bboxes.tensor
            for box_id in range(box.shape[0]):
                instances = box[box_id]
                bboxes.append(np.array([(instances[i], instances[i + 1]) for i in range(0, len(instances), 2)], dtype=np.int32)) 
            del data
        else:
            image = cv2.cvtColor(cv2.imread(data_info['img_path']), cv2.COLOR_BGR2RGB)
            for instances in data_info['instances']:
               bboxes.append(np.array([(instances['bbox'][i], instances['bbox'][i + 1]) for i in range(0, len(instances['bbox']), 2)], dtype=np.int32)) 
        keypoints, descriptors, image = extract_img_feature(self.descriptor, image, self.extractor)    
        if len(keypoints) <= 0:
            print(f">>> {data_info['img_path']} has no keypoint founded with {self.descriptor}")
            return torch.zeros([2, self.config['keypoint_dim'] + self.config['descriptor_dim'] + 2], dtype = torch.float32, requires_grad = False), data_info['img_path']
        else:     
            tmp = np.zeros(image.shape[:2], dtype=np.uint8)
            if len(bboxes) > 0 :
                cv2.fillPoly(tmp, bboxes, 1)
            target = np.array([np.any(tmp[max(0,int(kp[1]-self.expand_piexl)):min(int(kp[1]+self.expand_piexl),image.shape[0]),
                                        max(0,int(kp[0]-self.expand_piexl)):min(int(kp[0]+self.expand_piexl),image.shape[1])]) 
                            for kp in keypoints ]) 
            # visualization
            if self.debug:
                print(f">>> VISUALIZATION: {data_info['img_path']}")
                kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])
                image = cv2.drawKeypoints(image, kps[target], None, color=(255,0,0,)) 
                image = cv2.drawKeypoints(image, kps[~target], None, color=(0,0,255)) 
                image = cv2.polylines(image, bboxes, isClosed=True, color=(0, 255, 0), thickness=2)
                cv2.imwrite('test_2.jpg', cv2.cvtColor(image, cv2.COLOR_RGB2BGR)) 

            # boosted the descriptor using trained model
            keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
            if 'orb' in self.descriptor.lower():
                descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
                descriptors = descriptors * 2.0 - 1.0
            # 最后的全一是为了区分对齐batch的padding数据              
            result = torch.from_numpy(np.concatenate([keypoints, descriptors, target.reshape(-1, 1), np.ones([len(target),1])], axis=-1))  
            result.requires_grad = False                 
            return result, data_info['img_path']

def get_metric(all_labels, all_output, all_thred):
    
    if isinstance(all_output, torch.Tensor):
        if all_output.requires_grad:
            all_output = all_output.detach()
        all_output = all_output.cpu().numpy()    
    if isinstance(all_labels, torch.Tensor):
        all_labels = all_labels.cpu().numpy()
    if isinstance(all_thred, torch.Tensor):
        all_thred = all_thred.cpu().numpy()
        
    all_predict = (all_output>all_thred) 
    all_labels = all_labels   
    all_output = all_output        
    accuracy = accuracy_score(all_labels, all_predict)
    precision = precision_score(all_labels, all_predict)
    recall = recall_score(all_labels, all_predict)
    F1_score = f1_score(all_labels, all_predict)
    AP_score = average_precision_score(all_labels, all_output)
    metric_dict = dict(Accuracy=accuracy, Precision=precision, Recall=recall, F1_score=F1_score, Average_Precision = AP_score)
    metric_str = "Accuracy: {Accuracy:.2f}、Precision: {Precision:.2f}、Recall: {Recall:.2f}、F1-score: {F1_score:.2f}、Average_Precision: {Average_Precision:.2f}".format(**metric_dict)
    print(metric_str)
    precisions, recalls, _ = precision_recall_curve(all_labels, all_output)
    PR_dict = dict(Precision=precisions, Recall=recalls)
    return metric_dict, PR_dict

def test(model, args): 
    model.eval()
    device = model.device
    extractor = extractor_build(args.descriptor)
    keypoints, descriptors, image = extract_img_feature(args.descriptor, cv2.cvtColor(cv2.imread(args.test_image), cv2.COLOR_BGR2RGB), extractor)
            
    boxes = []
    with open(args.test_image.replace('.png','.txt').replace('images','labelTxt'), 'r') as file:
        for line in file:
            coordinates = [float(coord) for coord in line.strip().split()[:8]]
            boxes.append(np.array([(coordinates[i], coordinates[i + 1]) for i in range(0, len(coordinates), 2)], dtype=np.int32))
    tmp = np.zeros(image.shape[:2], dtype=np.uint8)
    if len(boxes) > 0 :
        cv2.fillPoly(tmp, boxes, 1) 
    labels = np.array([np.any(tmp[max(0,int(kp[1]-args.expand_piexl)):min(int(kp[1]+args.expand_piexl),image.shape[0]),
                                max(0,int(kp[0]-args.expand_piexl)):min(int(kp[0]+args.expand_piexl),image.shape[1])]) 
                    for kp in keypoints ]) 
    
    kps = np.array([cv2.KeyPoint(*kp) for kp in keypoints])

    # boosted the descriptor using trained model
    keypoints = normalize_keypoints(keypoints, image.shape).astype(np.float32)
    if 'orb' in args.descriptor.lower():
        descriptors = np.unpackbits(descriptors, axis=1, bitorder='little').astype(np.float32)
        descriptors = descriptors * 2.0 - 1.0
    with torch.no_grad():                  
        output = model(torch.from_numpy(np.concatenate([keypoints, descriptors,], axis=-1)).to(device).float()).cpu().numpy()  
    if args.test_threshold is None:
        threshold, _  = cv2.threshold((output * 255).astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)  
        threshold = min(threshold/255.0 * args.test_threshold_mul, 0.95) 
        print(f"Threshold is drived from OTSU algorithm :{threshold}.")   
    else:
        print(f"Threshold is a constant value {args.test_threshold}.") 
        threshold = args.test_threshold
    predict = (output > threshold)

    metric_dict, PR_dict = get_metric(labels, output, threshold)
    
    image = cv2.drawKeypoints(image, kps[predict], None, color=(0, 255, 0),) # 红色 虚警 
    # image = cv2.drawKeypoints(image, kps[(~predict)&(labels)], None, color=(0,0,255)) # Aqua蓝色 漏检 
    # image = cv2.drawKeypoints(image, kps[predict&labels], None, color=(0,0,255,),) # 黄色 正确预测(正样本)
    # image = cv2.drawKeypoints(image, kps[(~predict)&(~labels)], None, color= (0, 255, 0) ) # 绿色 正确预测(负样本)
    # image = cv2.drawKeypoints(image, kps[(label)], None, color=(255,0,0,))
    # image = cv2.drawKeypoints(image, kps[(~label)], None, color=(0,0,255))
    image = cv2.polylines(image, boxes, isClosed=True, color=(255, 255, 0), thickness=2)
    cv2.imwrite('test.jpg', cv2.cvtColor(image, cv2.COLOR_RGB2BGR))  
    return metric_dict, PR_dict

def evaluate(model, data_root, ann_file, args):
    model.eval() 
    device = model.device
    eva_dataset = ShipKeyPointsDataset(data_root, args.descriptor, expand_piexl = args.expand_piexl, ann_file = ann_file, device = device)
    eva_loader = DataLoader(eva_dataset, batch_size=args.batch_size, shuffle=False, num_workers=args.num_workers, collate_fn=custom_collate_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)

    all_output = torch.tensor([], device=device)
    all_labels = torch.tensor([], device=device)
    all_thred = torch.tensor([], device=device)     
    if args.test_threshold is None:
        print(f"Threshold is drived from OTSU algorithm.")
    else:
        print(f"Threshold is a constant value {args.test_threshold}.") 
        all_thred = args.test_threshold
    
    with torch.no_grad():
        for i, (data, img_paths) in enumerate(eva_loader):
            data = data.to(device).float()  # 将测试数据移动到GPU
            outputs = model(data[:,:,:-2])
            
            if args.test_threshold is None:
                for k in range(outputs.shape[0]):
                    thred, _  = cv2.threshold((outputs[k] * 255).cpu().numpy().astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                    all_thred = torch.cat([all_thred, torch.tensor([min(thred/255.0 * args.test_threshold_mul, 0.95)]*(int(data[k,:,-1].sum())), device=device) ])            
                    
            all_output = torch.cat([all_output, outputs[data[:,:,-1].bool()]])    
            all_labels = torch.cat([all_labels, data[:,:,-2].bool()[data[:,:,-1].bool()]]) 

            if (i + 1) % args.print_interval == 0:
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) : [{i + 1}/{len(eva_loader)}]")

    return get_metric(all_labels, all_output, all_thred)
 

def train(model, args):
    device = model.device
    
    train_pipeline = [
        dict(type='mmdet.LoadImageFromFile', backend_args=None),
        dict(type='mmdet.LoadAnnotations', with_bbox=True, box_type='qbox'),
        dict(
            type='mmrotate.ConvertBoxType',
            box_type_mapping=dict(gt_bboxes='rbox')),
        dict(type='mmdet.RandomCrop', crop_size=(800,800)),
        dict(
            type='mmrotate.RandomRotate',
            prob=0.5,
            angle_range=180,
            rotate_type='mmrotate.Rotate'),
        dict(
            type='mmdet.RandomFlip',
            prob=0.75,
            direction=['horizontal', 'vertical', 'diagonal']),
        dict(
            type='mmdet.RandomAffine',),    
        dict(
            type='mmdet.PhotoMetricDistortion',),    

        dict(
            type='mmrotate.ConvertBoxType',
            box_type_mapping=dict(gt_bboxes='qbox')),
        dict(type='mmdet.PackDetInputs', meta_keys=())]
    train_pipeline = [] 
    train_dataset = ShipKeyPointsDataset("data/hrsid/", args.descriptor, expand_piexl = args.expand_piexl, ann_file = ['trainsplit/','valplit/'], pipeline = train_pipeline, device = device, train_ratio = args.train_ratio)
    train_loader = DataLoader(train_dataset, batch_size=args.batch_size, shuffle=True, num_workers=args.num_workers, collate_fn=custom_collate_fn, worker_init_fn=worker_init_fn,pin_memory=True,multiprocessing_context=args.multiprocessing_context)
    
    outputs = get_model_complexity_info(
        model,
        input_shape=None,
        inputs=train_dataset.__getitem__(0)[0][:,:-2].float().to(device),  # the input tensor of the model
        show_table=True,  # show the complexity table
        show_arch=False)  # show the complexity arch
    for k, v in outputs.items():
        print(f"{k}: {v}")
    
    # 定义损失函数和优化器
    criterion = nn.BCELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=1e-5)
    total_steps = len(train_loader) * args.num_epochs
    scheduler = ChainedScheduler([LinearLR(optimizer, start_factor=1.0 / 20, end_factor=1.0, total_iters=args.warmup_step, last_epoch=-1, verbose=False),
                                CosineAnnealingWarmRestarts(optimizer, T_0 = (total_steps - args.warmup_step)//8, T_mult=1, eta_min=5e-7, verbose=False)])
    
    start_epoch = 0
    best_AP = 0.0
    if len(args.checkpoint):
        checkpoint = torch.load(args.checkpoint)
        model.load_state_dict(checkpoint['model_state_dict'])
        optimizer.load_state_dict(checkpoint['optimizer_state_dict']),
        scheduler.load_state_dict(checkpoint['scheduler_state_dict'])
        start_epoch = checkpoint['epoch']+1
        best_AP = checkpoint['best_AP']
        print(f'>>> Continue training from epoch [{start_epoch}] !')
    
    for epoch in range(start_epoch, args.num_epochs):       
        start_time = time.time()
        model.train()
        for i, (data, img_paths)  in enumerate(train_loader):
            optimizer.zero_grad()
            data = data.to(device).float()
            outputs = model(data[:,:,:-2])
            vaild = data[:,:,-1].reshape(-1).bool()
            loss = criterion(outputs.reshape(-1)[vaild], data[:,:,-2].reshape(-1)[vaild])
            loss.backward()

            clip_grad_norm_(model.parameters(), 35, 2)
            optimizer.step()
            scheduler.step()
            if (i + 1) % args.print_interval == 0:
                current_time = time.time()
                eta_seconds = (current_time - start_time) / (i+1) * ( (args.num_epochs - epoch ) * len(train_loader) - (i + 1))
                eta_str = str(int(eta_seconds // 3600)) + ':' + str(int((eta_seconds % 3600) // 60)) + ':' + str(int(eta_seconds % 60))
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Epoch(train)  [{epoch + 1}/{args.num_epochs}][{i + 1}/{len(train_loader)}]  lr: {optimizer.param_groups[0]['lr']:.4e}  eta: {eta_str}  time: {current_time - start_time:.4f}   loss: {loss:.4f}")
            
        if ((epoch+1) % args.eval_interval == 0) or (epoch == 0) or (epoch == args.num_epochs-1):
            print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - all: [{epoch+1}/{args.num_epochs}]:") 
            metric_dict_all, _ = evaluate(model, "data/hrsid/", ['testsplit/all/'], args)
            
            # print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - offshore: [{epoch+1}/{args.num_epochs}]:")  
            # metric_dict, _ = evaluate(model, "data/hrsid/", ['testsplit/offshore/'], args)
              
            print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - inshore: [{epoch+1}/{args.num_epochs}]:") 
            _, _ = evaluate(model, "data/hrsid/", ['testsplit/inshore/'], args)
            
            # 检查是否有更好的模型，如果有，则保存权重
            if metric_dict_all['Average_Precision'] > best_AP:
                best_AP = metric_dict_all['Average_Precision']
                # 保存当前模型的权重
                torch.save(model.state_dict(), args.save_path)
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Best model achieved at epoch {epoch + 1}, with all test image AP {best_AP:.4f}")
            if (epoch >= args.num_epochs-1):
                last_save_path = 'work_dirs/' + args.descriptor + '_last_model_weight.pth'
                torch.save(model.state_dict(), last_save_path)
                print(f"{time.strftime('%m/%d %H:%M:%S')} - Last model saved :{last_save_path}") 

        if ((epoch+1) % args.save_interval == 0):
            for file_path in glob.glob(args.save_path[:-4] + '*_epoch.pth'):
                os.remove(file_path)
            torch.save({
                'model_state_dict': model.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
                'scheduler_state_dict': scheduler.state_dict(),
                'epoch': epoch,
                'best_AP': best_AP,
                }, args.save_path[:-4] + f'_{epoch+1}_epoch.pth') 
    
def worker_init_fn(worker_id):
    # torch.cuda.set_device(worker_id) 指定数加载设备
    torch.cuda.manual_seed_all(worker_id)   

def custom_collate_fn(batch):
    results = [item[0] for item in batch]  # 提取每个样本的result
    img_paths = [item[1] for item in batch]  # 提取每个样本的img_path
    padded_results = pad_sequence(results, batch_first=True, padding_value=0)
    return padded_results, img_paths
    
if __name__ == '__main__': 

    args = parse_arguments()

    random.seed(args.random_seed)
    np.random.seed(args.random_seed)
    torch.manual_seed(args.random_seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed_all(args.random_seed)  

    if ('alike' in args.descriptor.lower()) or ('superpoint' in args.descriptor.lower()) or ('hardnet' in args.descriptor.lower()) or ('sosnet' in args.descriptor.lower()):
        args.multiprocessing_context = 'spawn'
        
    pretrained = '' # Path(__file__).parent / str("FeatureBooster/models/" + args.descriptor + ".pth")
    pretrained_str = 'finetune' if os.path.isfile(pretrained) else 'scratch'
    args.save_path = args.save_path if len(args.save_path) else 'work_dirs/' + args.descriptor + f'{args.train_ratio*100:.0f}_' + f'_best_model_weights_{pretrained_str}.pth'
    
    print(args)

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu") 
    print(f">>> device: {device}!")          
    model = ShipKeyPointsModel(args.descriptor, device=device, pretrained = pretrained)

    if not args.test:
        with open(__file__, 'r') as file:
            lines = file.readlines() 
        for line in lines:
            print(line[:-1])
        print('\n')   
        train(model, args)
        
    model.load_state_dict(torch.load(args.save_path), strict=False)
    model_weights_md5 = calculate_md5(args.save_path)
    print(f">>> model weights loaded from {args.save_path} with MD5 {model_weights_md5}!")

    if not len(args.test_image):        
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - all:") 
        metric_dict, PR_dict_all = evaluate(model, "data/hrsid/", ['testsplit/all/'], args)
            
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - offshore:")  
        metric_dict, PR_dict_offshore = evaluate(model, "data/hrsid/", ['testsplit/offshore/'], args)
            
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - inshore:") 
        metric_dict, PR_dict_inshore = evaluate(model, "data/hrsid/", ['testsplit/inshore/'], args)

        plt.figure()
        plt.plot(PR_dict_all['Recall'], PR_dict_all['Precision'], label='PR curve for all')
        plt.plot(PR_dict_offshore['Recall'], PR_dict_offshore['Precision'], label='PR curve for offshore')
        plt.plot(PR_dict_inshore['Recall'], PR_dict_inshore['Precision'], label='PR curve for inshore')
        plt.xlabel('Recall')
        plt.ylabel('Precision')
        # plt.title('Precision-Recall Curve')
        plt.legend()
        PR_curve_path = 'work_dirs/' + f'PR_curve_{args.save_path.split("/")[-1][:-4]}_{model_weights_md5[:5]}.png'
        plt.savefig(PR_curve_path, bbox_inches='tight', dpi=300)  
        print(f">>> PR_cruve saved: {PR_curve_path}")
        
        shutil.copy(args.save_path,'/keypoint_results/')
        shutil.copy(PR_curve_path,'/keypoint_results/')
    else:
        print(f"\n{time.strftime('%m/%d %H:%M:%S')} - Epoch(test) - {args.test_image}:")            
        metric_dict, PR_dict = test(model, args


11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::add encountered 2 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::sigmoid encountered 7 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::softmax encountered 6 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::mul encountered 13 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::sum encountered 6 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::add_ encountered 12 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::tanh encountered 1 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::mean encountered 1 time(s)
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::sub encountered 1 time(s)
11/08 03:21:58 - mmengine - WARNING - The following submodules of the model were never called during the trace of the graph. They may be unused, or they were accessed by direct calls to .forward() or via other python methods. In the latter case they will have zeros for statistics, though their statistics will still contribute to their parent calling module.
feature_booster.attn_proj.layers.0.attn.dropout, feature_booster.attn_proj.layers.0.ffn.dropout, feature_booster.attn_proj.layers.1.attn.dropout, feature_booster.attn_proj.layers.1.ffn.dropout, feature_booster.attn_proj.layers.2.attn.dropout, feature_booster.attn_proj.layers.2.ffn.dropout, feature_booster.attn_proj.layers.3.attn.dropout, feature_booster.attn_proj.layers.3.ffn.dropout, feature_booster.attn_proj.layers.4.attn.dropout, feature_booster.attn_proj.layers.4.ffn.dropout, feature_booster.attn_proj.layers.5.attn.dropout, feature_booster.attn_proj.layers.5.ffn.dropout, feature_booster.denc.dropout, feature_booster.dropout, feature_booster.kenc.dropout
11/08 03:21:58 - mmengine - WARNING - Unsupported operator aten::layer_norm encountered 13 time(s)
flops: 57089664
flops_str: 57.09M
activations: 202385
activations_str: 0.202M
params: 3601731
params_str: 3.602M
out_table: 
+---------------------------+----------------------+------------+--------------+
| module                    | #parameters or shape | #flops     | #activations |
+---------------------------+----------------------+------------+--------------+
| model                     | 3.602M               | 57.09M     | 0.202M       |
|  k                        |  ()                  |            |              |
|  feature_booster          |  3.536M              |  56.53M    |  0.2M        |
|   feature_booster.kenc.e… |   0.109M             |   1.738M   |   11.776K    |
|    feature_booster.kenc.… |    0.128K            |    1.536K  |    0.512K    |
|    feature_booster.kenc.… |    2.112K            |    32.768K |    1.024K    |
|    feature_booster.kenc.… |    8.32K             |    0.131M  |    2.048K    |
|    feature_booster.kenc.… |    33.024K           |    0.524M  |    4.096K    |
|    feature_booster.kenc.… |    65.792K           |    1.049M  |    4.096K    |
|   feature_booster.denc.e… |   0.197M             |   3.146M   |   12.288K    |
|    feature_booster.denc.… |    65.792K           |    1.049M  |    4.096K    |
|    feature_booster.denc.… |    65.792K           |    1.049M  |    4.096K    |
|    feature_booster.denc.… |    65.792K           |    1.049M  |    4.096K    |
|   feature_booster.attn_p… |   3.163M             |   50.577M  |   0.172M     |
|    feature_booster.attn_… |    0.527M            |    8.43M   |    28.672K   |
|    feature_booster.attn_… |    0.527M            |    8.43M   |    28.672K   |
|    feature_booster.attn_… |    0.527M            |    8.43M   |    28.672K   |
|    feature_booster.attn_… |    0.527M            |    8.43M   |    28.672K   |
|    feature_booster.attn_… |    0.527M            |    8.43M   |    28.672K   |
|    feature_booster.attn_… |    0.527M            |    8.43M   |    28.672K   |
|   feature_booster.final_… |   65.792K            |   1.049M   |   4.096K     |
|    feature_booster.final… |    (256, 256)        |            |              |
|    feature_booster.final… |    (256,)            |            |              |
|   feature_booster.layer_… |   0.512K             |   20.48K   |   0          |
|    feature_booster.layer… |    (256,)            |            |              |
|    feature_booster.layer… |    (256,)            |            |              |
|  fc_out                   |  33.025K             |  0.526M    |  2.064K      |
|   fc_out.0                |   32.896K            |   0.524M   |   2.048K     |
|    fc_out.0.weight        |    (128, 256)        |            |              |
|    fc_out.0.bias          |    (128,)            |            |              |
|   fc_out.2                |   0.129K             |   2.048K   |   16         |
|    fc_out.2.weight        |    (1, 128)          |            |              |
|    fc_out.2.bias          |    (1,)              |            |              |
|  fc_thed                  |  33.025K             |  32.896K   |  0.129K      |
|   fc_thed.0               |   32.896K            |   32.768K  |   0.128K     |
|    fc_thed.0.weight       |    (128, 256)        |            |              |
|    fc_thed.0.bias         |    (128,)            |            |              |
|   fc_thed.2               |   0.129K             |   0.128K   |   1          |
|    fc_thed.2.weight       |    (1, 128)          |            |              |
|    fc_thed.2.bias         |    (1,)              |            |              |
+---------------------------+----------------------+------------+--------------+

out_arch: 
11/08 03:22:29 - Epoch(train)  [1/100][5/29]  lr: 9.9952e-04  eta: 4:54:12  time: 30.4884   loss: 0.5076
11/08 03:22:35 - Epoch(train)  [1/100][10/29]  lr: 9.9810e-04  eta: 2:58:13  time: 37.0003   loss: 0.3887
11/08 03:22:42 - Epoch(train)  [1/100][15/29]  lr: 9.9572e-04  eta: 2:21:39  time: 44.1907   loss: 0.3990
11/08 03:22:49 - Epoch(train)  [1/100][20/29]  lr: 9.9241e-04  eta: 2:2:0  time: 50.8361   loss: 0.4356
11/08 03:22:59 - Epoch(train)  [1/100][25/29]  lr: 9.8815e-04  eta: 1:57:40  time: 61.3915   loss: 0.4086

11/08 03:23:03 - Epoch(test) - all: [1/100]:
Threshold is drived from OTSU algorithm.
11/08 03:23:33 - Epoch(test) : [5/16]
11/08 03:23:39 - Epoch(test) : [10/16]
11/08 03:23:45 - Epoch(test) : [15/16]
Accuracy: 0.86、Precision: 0.60、Recall: 0.76、F1-score: 0.67、Average_Precision: 0.80

11/08 03:23:47 - Epoch(test) - inshore: [1/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.84、Precision: 0.38、Recall: 0.60、F1-score: 0.47、Average_Precision: 0.47
11/08 03:24:01 - Best model achieved at epoch 1, with all test image AP 0.7963
11/08 03:24:30 - Epoch(train)  [2/100][5/29]  lr: 9.7816e-04  eta: 4:34:6  time: 28.6932   loss: 0.2530
11/08 03:24:37 - Epoch(train)  [2/100][10/29]  lr: 9.7134e-04  eta: 2:50:32  time: 35.7651   loss: 0.1713
11/08 03:24:45 - Epoch(train)  [2/100][15/29]  lr: 9.6361e-04  eta: 2:17:6  time: 43.2058   loss: 0.1730
11/08 03:24:51 - Epoch(train)  [2/100][20/29]  lr: 9.5500e-04  eta: 1:56:33  time: 49.0633   loss: 0.2798
11/08 03:25:02 - Epoch(train)  [2/100][25/29]  lr: 9.4553e-04  eta: 1:55:25  time: 60.8348   loss: 0.2404
11/08 03:25:39 - Epoch(train)  [3/100][5/29]  lr: 9.2636e-04  eta: 5:23:5  time: 34.1650   loss: 0.1506
11/08 03:25:46 - Epoch(train)  [3/100][10/29]  lr: 9.1456e-04  eta: 3:12:38  time: 40.8125   loss: 0.2253
11/08 03:25:53 - Epoch(train)  [3/100][15/29]  lr: 9.0198e-04  eta: 2:29:59  time: 47.7510   loss: 0.2132
11/08 03:26:00 - Epoch(train)  [3/100][20/29]  lr: 8.8863e-04  eta: 2:7:46  time: 54.3340   loss: 0.1616
11/08 03:26:11 - Epoch(train)  [3/100][25/29]  lr: 8.7454e-04  eta: 2:3:14  time: 65.6274   loss: 0.2104
11/08 03:26:44 - Epoch(train)  [4/100][5/29]  lr: 8.4741e-04  eta: 4:31:7  time: 28.9661   loss: 0.1728
11/08 03:26:51 - Epoch(train)  [4/100][10/29]  lr: 8.3139e-04  eta: 2:47:32  time: 35.8646   loss: 0.1947
11/08 03:26:57 - Epoch(train)  [4/100][15/29]  lr: 8.1475e-04  eta: 2:11:37  time: 42.3379   loss: 0.2203
11/08 03:27:04 - Epoch(train)  [4/100][20/29]  lr: 7.9751e-04  eta: 1:54:7  time: 49.0362   loss: 0.1578
11/08 03:27:16 - Epoch(train)  [4/100][25/29]  lr: 7.7971e-04  eta: 1:53:9  time: 60.8788   loss: 0.1336
11/08 03:27:48 - Epoch(train)  [5/100][5/29]  lr: 7.4634e-04  eta: 4:28:29  time: 28.9845   loss: 0.1417
11/08 03:27:55 - Epoch(train)  [5/100][10/29]  lr: 7.2713e-04  eta: 2:47:2  time: 36.1289   loss: 0.1527
11/08 03:28:02 - Epoch(train)  [5/100][15/29]  lr: 7.0749e-04  eta: 2:10:28  time: 42.4059   loss: 0.1448
11/08 03:28:09 - Epoch(train)  [5/100][20/29]  lr: 6.8746e-04  eta: 1:54:42  time: 49.8003   loss: 0.1119
11/08 03:28:20 - Epoch(train)  [5/100][25/29]  lr: 6.6707e-04  eta: 1:51:58  time: 60.8792   loss: 0.1614

11/08 03:28:24 - Epoch(test) - all: [5/100]:
Threshold is drived from OTSU algorithm.
11/08 03:28:52 - Epoch(test) : [5/16]
11/08 03:28:58 - Epoch(test) : [10/16]
11/08 03:29:04 - Epoch(test) : [15/16]
Accuracy: 0.89、Precision: 0.64、Recall: 0.87、F1-score: 0.74、Average_Precision: 0.89

11/08 03:29:06 - Epoch(test) - inshore: [5/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.89、Precision: 0.53、Recall: 0.79、F1-score: 0.64、Average_Precision: 0.65
11/08 03:29:21 - Best model achieved at epoch 5, with all test image AP 0.8872
11/08 03:29:50 - Epoch(train)  [6/100][5/29]  lr: 6.2959e-04  eta: 4:29:11  time: 29.3668   loss: 0.1560
11/08 03:29:57 - Epoch(train)  [6/100][10/29]  lr: 6.0842e-04  eta: 2:45:11  time: 36.1065   loss: 0.1135
11/08 03:30:04 - Epoch(train)  [6/100][15/29]  lr: 5.8703e-04  eta: 2:11:9  time: 43.0810   loss: 0.1424
11/08 03:30:11 - Epoch(train)  [6/100][20/29]  lr: 5.6548e-04  eta: 1:53:23  time: 49.7502   loss: 0.1335
11/08 03:30:22 - Epoch(train)  [6/100][25/29]  lr: 5.4381e-04  eta: 1:51:28  time: 61.2543   loss: 0.1363
11/08 03:30:55 - Epoch(train)  [7/100][5/29]  lr: 5.0461e-04  eta: 4:25:54  time: 29.3179   loss: 0.1132
11/08 03:31:03 - Epoch(train)  [7/100][10/29]  lr: 4.8281e-04  eta: 2:44:51  time: 36.4196   loss: 0.1210
11/08 03:31:09 - Epoch(train)  [7/100][15/29]  lr: 4.6104e-04  eta: 2:9:22  time: 42.9528   loss: 0.1439
11/08 03:31:16 - Epoch(train)  [7/100][20/29]  lr: 4.3935e-04  eta: 1:51:36  time: 49.4919   loss: 0.1787
11/08 03:31:27 - Epoch(train)  [7/100][25/29]  lr: 4.1777e-04  eta: 1:49:4  time: 60.5762   loss: 0.0998
11/08 03:32:00 - Epoch(train)  [8/100][5/29]  lr: 3.7935e-04  eta: 4:29:32  time: 30.0385   loss: 0.1234
11/08 03:32:07 - Epoch(train)  [8/100][10/29]  lr: 3.5831e-04  eta: 2:44:39  time: 36.7664   loss: 0.1689
11/08 03:32:14 - Epoch(train)  [8/100][15/29]  lr: 3.3755e-04  eta: 2:10:35  time: 43.8239   loss: 0.1497
11/08 03:32:20 - Epoch(train)  [8/100][20/29]  lr: 3.1709e-04  eta: 1:51:48  time: 50.1183   loss: 0.1263
11/08 03:32:31 - Epoch(train)  [8/100][25/29]  lr: 2.9698e-04  eta: 1:47:56  time: 60.6002   loss: 0.1242
11/08 03:33:04 - Epoch(train)  [9/100][5/29]  lr: 2.6179e-04  eta: 4:20:1  time: 29.2940   loss: 0.1312
11/08 03:33:10 - Epoch(train)  [9/100][10/29]  lr: 2.4286e-04  eta: 2:39:53  time: 36.0927   loss: 0.1433
11/08 03:33:18 - Epoch(train)  [9/100][15/29]  lr: 2.2442e-04  eta: 2:8:48  time: 43.6969   loss: 0.1430
11/08 03:33:25 - Epoch(train)  [9/100][20/29]  lr: 2.0650e-04  eta: 1:51:15  time: 50.4216   loss: 0.1150
11/08 03:33:35 - Epoch(train)  [9/100][25/29]  lr: 1.8915e-04  eta: 1:46:1  time: 60.1697   loss: 0.0813
11/08 03:34:16 - Epoch(train)  [10/100][5/29]  lr: 1.5942e-04  eta: 5:31:10  time: 37.7195   loss: 0.1416
11/08 03:34:23 - Epoch(train)  [10/100][10/29]  lr: 1.4380e-04  eta: 3:17:32  time: 45.0850   loss: 0.1356
11/08 03:34:31 - Epoch(train)  [10/100][15/29]  lr: 1.2886e-04  eta: 2:33:16  time: 52.5720   loss: 0.1023
11/08 03:34:37 - Epoch(train)  [10/100][20/29]  lr: 1.1463e-04  eta: 2:8:40  time: 58.9578   loss: 0.1053
11/08 03:34:49 - Epoch(train)  [10/100][25/29]  lr: 1.0113e-04  eta: 2:2:57  time: 70.5545   loss: 0.0835

11/08 03:34:52 - Epoch(test) - all: [10/100]:
Threshold is drived from OTSU algorithm.
11/08 03:37:11 - Epoch(test) : [5/16]
11/08 03:37:18 - Epoch(test) : [10/16]
11/08 03:37:24 - Epoch(test) : [15/16]
Accuracy: 0.90、Precision: 0.66、Recall: 0.89、F1-score: 0.76、Average_Precision: 0.91

11/08 03:37:27 - Epoch(test) - inshore: [10/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.58、Recall: 0.81、F1-score: 0.68、Average_Precision: 0.73
11/08 03:37:42 - Best model achieved at epoch 10, with all test image AP 0.9113
11/08 03:38:11 - Epoch(train)  [11/100][5/29]  lr: 7.8765e-05  eta: 4:3:11  time: 28.0071   loss: 0.1567
11/08 03:38:17 - Epoch(train)  [11/100][10/29]  lr: 6.7454e-05  eta: 2:28:40  time: 34.3094   loss: 0.1363
11/08 03:38:25 - Epoch(train)  [11/100][15/29]  lr: 5.6966e-05  eta: 1:59:56  time: 41.5997   loss: 0.1026
11/08 03:38:31 - Epoch(train)  [11/100][20/29]  lr: 4.7323e-05  eta: 1:44:14  time: 48.2946   loss: 0.1003
11/08 03:38:43 - Epoch(train)  [11/100][25/29]  lr: 3.8541e-05  eta: 1:43:18  time: 59.9504   loss: 0.1487
11/08 03:39:14 - Epoch(train)  [12/100][5/29]  lr: 2.4960e-05  eta: 4:2:25  time: 28.2325   loss: 0.1477
11/08 03:39:22 - Epoch(train)  [12/100][10/29]  lr: 1.8676e-05  eta: 2:35:27  time: 36.2812   loss: 0.1138
11/08 03:39:29 - Epoch(train)  [12/100][15/29]  lr: 1.3309e-05  eta: 2:2:35  time: 42.9972   loss: 0.1256
11/08 03:39:36 - Epoch(train)  [12/100][20/29]  lr: 8.8684e-06  eta: 1:47:1  time: 50.1484   loss: 0.1170
11/08 03:39:47 - Epoch(train)  [12/100][25/29]  lr: 5.3635e-06  eta: 1:43:21  time: 60.6550   loss: 0.1007
11/08 03:40:18 - Epoch(train)  [13/100][5/29]  lr: 1.4321e-06  eta: 3:55:28  time: 27.7357   loss: 0.1036
11/08 03:40:25 - Epoch(train)  [13/100][10/29]  lr: 5.7611e-07  eta: 2:27:22  time: 34.7861   loss: 0.1143
11/08 03:40:31 - Epoch(train)  [13/100][15/29]  lr: 9.9983e-04  eta: 1:57:2  time: 41.5208   loss: 0.1413
11/08 03:40:39 - Epoch(train)  [13/100][20/29]  lr: 9.9878e-04  eta: 1:42:54  time: 48.7702   loss: 0.1067
11/08 03:40:50 - Epoch(train)  [13/100][25/29]  lr: 9.9679e-04  eta: 1:41:26  time: 60.2122   loss: 0.1346
11/08 03:41:20 - Epoch(train)  [14/100][5/29]  lr: 9.9082e-04  eta: 3:46:19  time: 26.9649   loss: 0.1132
11/08 03:41:28 - Epoch(train)  [14/100][10/29]  lr: 9.8619e-04  eta: 2:24:40  time: 34.5426   loss: 0.1280
11/08 03:41:35 - Epoch(train)  [14/100][15/29]  lr: 9.8064e-04  eta: 1:55:53  time: 41.5866   loss: 0.0969
11/08 03:41:41 - Epoch(train)  [14/100][20/29]  lr: 9.7417e-04  eta: 1:39:58  time: 47.9270   loss: 0.1139
11/08 03:41:51 - Epoch(train)  [14/100][25/29]  lr: 9.6681e-04  eta: 1:36:44  time: 58.0889   loss: 0.1397
11/08 03:42:23 - Epoch(train)  [15/100][5/29]  lr: 9.5132e-04  eta: 3:47:55  time: 27.4728   loss: 0.1517
11/08 03:42:29 - Epoch(train)  [15/100][10/29]  lr: 9.4150e-04  eta: 2:19:2  time: 33.5863   loss: 0.3697
11/08 03:42:36 - Epoch(train)  [15/100][15/29]  lr: 9.3085e-04  eta: 1:52:8  time: 40.7129   loss: 0.1259
11/08 03:42:42 - Epoch(train)  [15/100][20/29]  lr: 9.1938e-04  eta: 1:37:2  time: 47.0670   loss: 0.1478
11/08 03:42:54 - Epoch(train)  [15/100][25/29]  lr: 9.0710e-04  eta: 1:35:42  time: 58.1421   loss: 0.1593

11/08 03:42:57 - Epoch(test) - all: [15/100]:
Threshold is drived from OTSU algorithm.
11/08 03:43:23 - Epoch(test) : [5/16]
11/08 03:43:30 - Epoch(test) : [10/16]
11/08 03:43:37 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.81、Recall: 0.73、F1-score: 0.77、Average_Precision: 0.88

11/08 03:43:39 - Epoch(test) - inshore: [15/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.66、Recall: 0.54、F1-score: 0.59、Average_Precision: 0.64
11/08 03:44:24 - Epoch(train)  [16/100][5/29]  lr: 8.8308e-04  eta: 4:0:41  time: 29.3530   loss: 0.1444
11/08 03:44:30 - Epoch(train)  [16/100][10/29]  lr: 8.6870e-04  eta: 2:25:38  time: 35.5950   loss: 0.1769
11/08 03:44:37 - Epoch(train)  [16/100][15/29]  lr: 8.5363e-04  eta: 1:55:19  time: 42.3664   loss: 0.1550
11/08 03:44:44 - Epoch(train)  [16/100][20/29]  lr: 8.3788e-04  eta: 1:39:47  time: 48.9769   loss: 0.1154
11/08 03:44:56 - Epoch(train)  [16/100][25/29]  lr: 8.2148e-04  eta: 1:39:5  time: 60.9166   loss: 0.1447
11/08 03:45:25 - Epoch(train)  [17/100][5/29]  lr: 7.9046e-04  eta: 3:34:37  time: 26.4853   loss: 0.1089
11/08 03:45:32 - Epoch(train)  [17/100][10/29]  lr: 7.7243e-04  eta: 2:14:22  time: 33.2349   loss: 0.1712
11/08 03:45:38 - Epoch(train)  [17/100][15/29]  lr: 7.5389e-04  eta: 1:47:36  time: 40.0032   loss: 0.1058
11/08 03:45:45 - Epoch(train)  [17/100][20/29]  lr: 7.3487e-04  eta: 1:34:16  time: 46.8268   loss: 0.1117
11/08 03:45:56 - Epoch(train)  [17/100][25/29]  lr: 7.1540e-04  eta: 1:33:2  time: 57.8857   loss: 0.1528
11/08 03:46:28 - Epoch(train)  [18/100][5/29]  lr: 6.7934e-04  eta: 3:42:27  time: 27.7838   loss: 0.1045
11/08 03:46:36 - Epoch(train)  [18/100][10/29]  lr: 6.5882e-04  eta: 2:23:1  time: 35.7992   loss: 0.0855
11/08 03:46:43 - Epoch(train)  [18/100][15/29]  lr: 6.3800e-04  eta: 1:53:35  time: 42.7416   loss: 0.1295
11/08 03:46:50 - Epoch(train)  [18/100][20/29]  lr: 6.1691e-04  eta: 1:39:13  time: 49.8796   loss: 0.0929
11/08 03:47:01 - Epoch(train)  [18/100][25/29]  lr: 5.9561e-04  eta: 1:36:36  time: 60.8338   loss: 0.1094
11/08 03:47:32 - Epoch(train)  [19/100][5/29]  lr: 5.5682e-04  eta: 3:40:33  time: 27.8844   loss: 0.1681
11/08 03:47:38 - Epoch(train)  [19/100][10/29]  lr: 5.3511e-04  eta: 2:15:24  time: 34.3078   loss: 0.0984
11/08 03:47:46 - Epoch(train)  [19/100][15/29]  lr: 5.1333e-04  eta: 1:48:37  time: 41.3751   loss: 0.0917
11/08 03:47:53 - Epoch(train)  [19/100][20/29]  lr: 4.9153e-04  eta: 1:35:40  time: 48.6924   loss: 0.1165
11/08 03:48:03 - Epoch(train)  [19/100][25/29]  lr: 4.6974e-04  eta: 1:32:46  time: 59.1422   loss: 0.1239
11/08 03:48:35 - Epoch(train)  [20/100][5/29]  lr: 4.3070e-04  eta: 3:45:40  time: 28.8841   loss: 0.0869
11/08 03:48:42 - Epoch(train)  [20/100][10/29]  lr: 4.0918e-04  eta: 2:17:24  time: 35.2500   loss: 0.0818
11/08 03:48:49 - Epoch(train)  [20/100][15/29]  lr: 3.8783e-04  eta: 1:49:39  time: 42.2841   loss: 0.1186
11/08 03:48:56 - Epoch(train)  [20/100][20/29]  lr: 3.6670e-04  eta: 1:35:52  time: 49.3951   loss: 0.1321
11/08 03:49:07 - Epoch(train)  [20/100][25/29]  lr: 3.4582e-04  eta: 1:33:34  time: 60.3962   loss: 0.1325

11/08 03:49:10 - Epoch(test) - all: [20/100]:
Threshold is drived from OTSU algorithm.
11/08 03:49:37 - Epoch(test) : [5/16]
11/08 03:49:44 - Epoch(test) : [10/16]
11/08 03:49:50 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.73、Recall: 0.92、F1-score: 0.82、Average_Precision: 0.93

11/08 03:49:53 - Epoch(test) - inshore: [20/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.60、Recall: 0.87、F1-score: 0.71、Average_Precision: 0.78
11/08 03:50:08 - Best model achieved at epoch 20, with all test image AP 0.9256
11/08 03:50:37 - Epoch(train)  [21/100][5/29]  lr: 3.0900e-04  eta: 3:37:0  time: 28.1227   loss: 0.1369
11/08 03:50:44 - Epoch(train)  [21/100][10/29]  lr: 2.8905e-04  eta: 2:15:42  time: 35.2508   loss: 0.0965
11/08 03:50:51 - Epoch(train)  [21/100][15/29]  lr: 2.6949e-04  eta: 1:48:48  time: 42.4843   loss: 0.1075
11/08 03:50:57 - Epoch(train)  [21/100][20/29]  lr: 2.5038e-04  eta: 1:33:35  time: 48.8294   loss: 0.0979
11/08 03:51:09 - Epoch(train)  [21/100][25/29]  lr: 2.3173e-04  eta: 1:31:44  time: 59.9626   loss: 0.0781
11/08 03:51:39 - Epoch(train)  [22/100][5/29]  lr: 1.9949e-04  eta: 3:32:20  time: 27.8661   loss: 0.0853
11/08 03:51:46 - Epoch(train)  [22/100][10/29]  lr: 1.8237e-04  eta: 2:11:16  time: 34.5297   loss: 0.0932
11/08 03:51:53 - Epoch(train)  [22/100][15/29]  lr: 1.6585e-04  eta: 1:44:43  time: 41.4095   loss: 0.1235
11/08 03:51:59 - Epoch(train)  [22/100][20/29]  lr: 1.4997e-04  eta: 1:31:2  time: 48.1052   loss: 0.0719
11/08 03:52:11 - Epoch(train)  [22/100][25/29]  lr: 1.3476e-04  eta: 1:30:1  time: 59.5877   loss: 0.0586
11/08 03:52:41 - Epoch(train)  [23/100][5/29]  lr: 1.0914e-04  eta: 3:24:45  time: 27.2169   loss: 0.0717
11/08 03:52:48 - Epoch(train)  [23/100][10/29]  lr: 9.5944e-05  eta: 2:6:53  time: 33.8083   loss: 0.1050
11/08 03:52:55 - Epoch(train)  [23/100][15/29]  lr: 8.3516e-05  eta: 1:41:53  time: 40.8139   loss: 0.0867
11/08 03:53:00 - Epoch(train)  [23/100][20/29]  lr: 7.1881e-05  eta: 1:26:36  time: 46.3558   loss: 0.1068
11/08 03:53:12 - Epoch(train)  [23/100][25/29]  lr: 6.1061e-05  eta: 1:27:4  time: 58.3915   loss: 0.0813
11/08 03:53:44 - Epoch(train)  [24/100][5/29]  lr: 4.3706e-05  eta: 3:28:8  time: 28.0265   loss: 0.0677
11/08 03:53:50 - Epoch(train)  [24/100][10/29]  lr: 3.5274e-05  eta: 2:7:35  time: 34.4360   loss: 0.0840
11/08 03:53:57 - Epoch(train)  [24/100][15/29]  lr: 2.7727e-05  eta: 1:41:19  time: 41.1164   loss: 0.0901
11/08 03:54:03 - Epoch(train)  [24/100][20/29]  lr: 2.1080e-05  eta: 1:28:16  time: 47.8681   loss: 0.1043
11/08 03:54:13 - Epoch(train)  [24/100][25/29]  lr: 1.5345e-05  eta: 1:25:0  time: 57.7475   loss: 0.0880
11/08 03:54:45 - Epoch(train)  [25/100][5/29]  lr: 7.3538e-06  eta: 3:25:37  time: 28.0524   loss: 0.0568
11/08 03:54:53 - Epoch(train)  [25/100][10/29]  lr: 4.2251e-06  eta: 2:9:14  time: 35.3439   loss: 0.0615
11/08 03:54:59 - Epoch(train)  [25/100][15/29]  lr: 2.0406e-06  eta: 1:42:19  time: 42.0723   loss: 0.0842
11/08 03:55:07 - Epoch(train)  [25/100][20/29]  lr: 8.0443e-07  eta: 1:29:37  time: 49.2408   loss: 0.1211
11/08 03:55:18 - Epoch(train)  [25/100][25/29]  lr: 9.9998e-04  eta: 1:27:41  time: 60.3677   loss: 0.0736

11/08 03:55:21 - Epoch(test) - all: [25/100]:
Threshold is drived from OTSU algorithm.
11/08 03:55:49 - Epoch(test) : [5/16]
11/08 03:55:55 - Epoch(test) : [10/16]
11/08 03:56:01 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.70、Recall: 0.94、F1-score: 0.80、Average_Precision: 0.93

11/08 03:56:03 - Epoch(test) - inshore: [25/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.57、Recall: 0.89、F1-score: 0.69、Average_Precision: 0.78
11/08 03:56:19 - Best model achieved at epoch 25, with all test image AP 0.9263
11/08 03:56:46 - Epoch(train)  [26/100][5/29]  lr: 9.9810e-04  eta: 3:17:29  time: 27.3029   loss: 0.0877
11/08 03:56:54 - Epoch(train)  [26/100][10/29]  lr: 9.9572e-04  eta: 2:6:16  time: 34.9944   loss: 0.0739
11/08 03:57:01 - Epoch(train)  [26/100][15/29]  lr: 9.9241e-04  eta: 1:40:46  time: 41.9918   loss: 0.0966
11/08 03:57:08 - Epoch(train)  [26/100][20/29]  lr: 9.8815e-04  eta: 1:27:46  time: 48.8787   loss: 0.0942
11/08 03:57:19 - Epoch(train)  [26/100][25/29]  lr: 9.8297e-04  eta: 1:25:57  time: 59.9700   loss: 0.1593
11/08 03:57:50 - Epoch(train)  [27/100][5/29]  lr: 9.7134e-04  eta: 3:18:2  time: 27.7500   loss: 0.0918
11/08 03:57:56 - Epoch(train)  [27/100][10/29]  lr: 9.6361e-04  eta: 2:2:39  time: 34.4545   loss: 0.1007
11/08 03:58:03 - Epoch(train)  [27/100][15/29]  lr: 9.5500e-04  eta: 1:38:2  time: 41.4081   loss: 0.0744
11/08 03:58:10 - Epoch(train)  [27/100][20/29]  lr: 9.4553e-04  eta: 1:25:42  time: 48.3779   loss: 0.0814
11/08 03:58:22 - Epoch(train)  [27/100][25/29]  lr: 9.3521e-04  eta: 1:24:24  time: 59.6991   loss: 0.0918
11/08 03:58:52 - Epoch(train)  [28/100][5/29]  lr: 9.1456e-04  eta: 3:17:29  time: 28.0538   loss: 0.0746
11/08 03:58:59 - Epoch(train)  [28/100][10/29]  lr: 9.0198e-04  eta: 2:2:22  time: 34.8471   loss: 0.0805
11/08 03:59:08 - Epoch(train)  [28/100][15/29]  lr: 8.8863e-04  eta: 1:42:23  time: 43.8395   loss: 0.0787
11/08 03:59:15 - Epoch(train)  [28/100][20/29]  lr: 8.7454e-04  eta: 1:28:38  time: 50.7239   loss: 0.0816
11/08 03:59:24 - Epoch(train)  [28/100][25/29]  lr: 8.5974e-04  eta: 1:23:17  time: 59.7224   loss: 0.0661
11/08 03:59:55 - Epoch(train)  [29/100][5/29]  lr: 8.3139e-04  eta: 3:8:42  time: 27.1790   loss: 0.1026
11/08 04:00:03 - Epoch(train)  [29/100][10/29]  lr: 8.1475e-04  eta: 2:0:46  time: 34.8743   loss: 0.1177
11/08 04:00:09 - Epoch(train)  [29/100][15/29]  lr: 7.9751e-04  eta: 1:34:56  time: 41.2208   loss: 0.0923
11/08 04:00:16 - Epoch(train)  [29/100][20/29]  lr: 7.7971e-04  eta: 1:22:23  time: 47.8106   loss: 0.0509
11/08 04:00:27 - Epoch(train)  [29/100][25/29]  lr: 7.6137e-04  eta: 1:20:58  time: 58.8771   loss: 0.0494
11/08 04:00:58 - Epoch(train)  [30/100][5/29]  lr: 7.2713e-04  eta: 3:15:31  time: 28.5575   loss: 0.0665
11/08 04:01:05 - Epoch(train)  [30/100][10/29]  lr: 7.0749e-04  eta: 2:1:35  time: 35.6070   loss: 0.1009
11/08 04:01:13 - Epoch(train)  [30/100][15/29]  lr: 6.8746e-04  eta: 1:37:59  time: 43.1499   loss: 0.1004
11/08 04:01:20 - Epoch(train)  [30/100][20/29]  lr: 6.6707e-04  eta: 1:25:8  time: 50.1059   loss: 0.0551
11/08 04:01:30 - Epoch(train)  [30/100][25/29]  lr: 6.4636e-04  eta: 1:22:15  time: 60.6615   loss: 0.0850

11/08 04:01:33 - Epoch(test) - all: [30/100]:
Threshold is drived from OTSU algorithm.
11/08 04:02:01 - Epoch(test) : [5/16]
11/08 04:02:07 - Epoch(test) : [10/16]
11/08 04:02:13 - Epoch(test) : [15/16]
Accuracy: 0.94、Precision: 0.81、Recall: 0.87、F1-score: 0.84、Average_Precision: 0.93

11/08 04:02:15 - Epoch(test) - inshore: [30/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.94、Precision: 0.71、Recall: 0.77、F1-score: 0.74、Average_Precision: 0.80
11/08 04:02:30 - Best model achieved at epoch 30, with all test image AP 0.9346
11/08 04:02:58 - Epoch(train)  [31/100][5/29]  lr: 6.0842e-04  eta: 3:7:4  time: 27.7155   loss: 0.0767
11/08 04:03:05 - Epoch(train)  [31/100][10/29]  lr: 5.8703e-04  eta: 1:56:26  time: 34.5883   loss: 0.0571
11/08 04:03:12 - Epoch(train)  [31/100][15/29]  lr: 5.6548e-04  eta: 1:31:46  time: 40.9945   loss: 0.0644
11/08 04:03:18 - Epoch(train)  [31/100][20/29]  lr: 5.4381e-04  eta: 1:19:57  time: 47.7376   loss: 0.0809
11/08 04:03:30 - Epoch(train)  [31/100][25/29]  lr: 5.2205e-04  eta: 1:19:18  time: 59.3327   loss: 0.0543
11/08 04:04:02 - Epoch(train)  [32/100][5/29]  lr: 4.8281e-04  eta: 3:13:23  time: 29.0674   loss: 0.0971
11/08 04:04:09 - Epoch(train)  [32/100][10/29]  lr: 4.6104e-04  eta: 1:59:9  time: 35.9073   loss: 0.0770
11/08 04:04:16 - Epoch(train)  [32/100][15/29]  lr: 4.3935e-04  eta: 1:34:27  time: 42.8027   loss: 0.0446
11/08 04:04:22 - Epoch(train)  [32/100][20/29]  lr: 4.1777e-04  eta: 1:21:39  time: 49.4627   loss: 0.0545
11/08 04:04:34 - Epoch(train)  [32/100][25/29]  lr: 3.9635e-04  eta: 1:20:29  time: 61.1076   loss: 0.0866
11/08 04:05:05 - Epoch(train)  [33/100][5/29]  lr: 3.5831e-04  eta: 3:5:46  time: 28.3348   loss: 0.0577
11/08 04:05:12 - Epoch(train)  [33/100][10/29]  lr: 3.3755e-04  eta: 1:54:7  time: 34.9015   loss: 0.0419
11/08 04:05:18 - Epoch(train)  [33/100][15/29]  lr: 3.1709e-04  eta: 1:30:24  time: 41.5794   loss: 0.0526
11/08 04:05:25 - Epoch(train)  [33/100][20/29]  lr: 2.9698e-04  eta: 1:19:14  time: 48.7154   loss: 0.0576
11/08 04:05:36 - Epoch(train)  [33/100][25/29]  lr: 2.7726e-04  eta: 1:17:5  time: 59.3985   loss: 0.0581
11/08 04:06:07 - Epoch(train)  [34/100][5/29]  lr: 2.4286e-04  eta: 3:4:13  time: 28.5189   loss: 0.0676
11/08 04:06:14 - Epoch(train)  [34/100][10/29]  lr: 2.2442e-04  eta: 1:51:28  time: 34.6014   loss: 0.0373
11/08 04:06:20 - Epoch(train)  [34/100][15/29]  lr: 2.0650e-04  eta: 1:28:29  time: 41.3119   loss: 0.0512
11/08 04:06:27 - Epoch(train)  [34/100][20/29]  lr: 1.8915e-04  eta: 1:17:1  time: 48.0697   loss: 0.0376
11/08 04:06:39 - Epoch(train)  [34/100][25/29]  lr: 1.7238e-04  eta: 1:16:43  time: 60.0094   loss: 0.0370
11/08 04:07:09 - Epoch(train)  [35/100][5/29]  lr: 1.4380e-04  eta: 2:52:21  time: 27.0861   loss: 0.0411
11/08 04:07:16 - Epoch(train)  [35/100][10/29]  lr: 1.2886e-04  eta: 1:48:21  time: 34.1465   loss: 0.0267
11/08 04:07:22 - Epoch(train)  [35/100][15/29]  lr: 1.1463e-04  eta: 1:25:53  time: 40.7092   loss: 0.0379
11/08 04:07:29 - Epoch(train)  [35/100][20/29]  lr: 1.0113e-04  eta: 1:15:0  time: 47.5288   loss: 0.0530
11/08 04:07:40 - Epoch(train)  [35/100][25/29]  lr: 8.8393e-05  eta: 1:12:44  time: 57.7664   loss: 0.0385

11/08 04:07:43 - Epoch(test) - all: [35/100]:
Threshold is drived from OTSU algorithm.
11/08 04:08:10 - Epoch(test) : [5/16]
11/08 04:08:17 - Epoch(test) : [10/16]
11/08 04:08:23 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.72、Recall: 0.91、F1-score: 0.81、Average_Precision: 0.94

11/08 04:08:24 - Epoch(test) - inshore: [35/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.68、Recall: 0.84、F1-score: 0.75、Average_Precision: 0.82
11/08 04:08:40 - Best model achieved at epoch 35, with all test image AP 0.9392
11/08 04:09:07 - Epoch(train)  [36/100][5/29]  lr: 6.7454e-05  eta: 2:52:8  time: 27.4684   loss: 0.0471
11/08 04:09:14 - Epoch(train)  [36/100][10/29]  lr: 5.6966e-05  eta: 1:46:8  time: 33.9649   loss: 0.0485
11/08 04:09:21 - Epoch(train)  [36/100][15/29]  lr: 4.7323e-05  eta: 1:25:20  time: 41.0715   loss: 0.0356
11/08 04:09:28 - Epoch(train)  [36/100][20/29]  lr: 3.8541e-05  eta: 1:14:57  time: 48.2311   loss: 0.0259
11/08 04:09:39 - Epoch(train)  [36/100][25/29]  lr: 3.0639e-05  eta: 1:13:39  time: 59.4006   loss: 0.0558
11/08 04:10:11 - Epoch(train)  [37/100][5/29]  lr: 1.8676e-05  eta: 2:51:31  time: 27.8005   loss: 0.0221
11/08 04:10:18 - Epoch(train)  [37/100][10/29]  lr: 1.3309e-05  eta: 1:48:14  time: 35.1816   loss: 0.0257
11/08 04:10:25 - Epoch(train)  [37/100][15/29]  lr: 8.8684e-06  eta: 1:25:46  time: 41.9285   loss: 0.0277
11/08 04:10:32 - Epoch(train)  [37/100][20/29]  lr: 5.3635e-06  eta: 1:14:57  time: 48.9975   loss: 0.0426
11/08 04:10:43 - Epoch(train)  [37/100][25/29]  lr: 2.8007e-06  eta: 1:12:51  time: 59.6903   loss: 0.0734
11/08 04:11:15 - Epoch(train)  [38/100][5/29]  lr: 5.7611e-07  eta: 2:56:17  time: 29.0282   loss: 0.0435
11/08 04:11:22 - Epoch(train)  [38/100][10/29]  lr: 9.9983e-04  eta: 1:48:54  time: 35.9636   loss: 0.2723
11/08 04:11:29 - Epoch(train)  [38/100][15/29]  lr: 9.9878e-04  eta: 1:26:21  time: 42.8938   loss: 0.1119
11/08 04:11:36 - Epoch(train)  [38/100][20/29]  lr: 9.9679e-04  eta: 1:15:11  time: 49.9333   loss: 0.1092
11/08 04:11:47 - Epoch(train)  [38/100][25/29]  lr: 9.9385e-04  eta: 1:12:24  time: 60.2722   loss: 0.0980
11/08 04:12:17 - Epoch(train)  [39/100][5/29]  lr: 9.8619e-04  eta: 2:43:49  time: 27.4099   loss: 0.0917
11/08 04:12:24 - Epoch(train)  [39/100][10/29]  lr: 9.8064e-04  eta: 1:43:19  time: 34.6743   loss: 0.1050
11/08 04:12:30 - Epoch(train)  [39/100][15/29]  lr: 9.7417e-04  eta: 1:21:21  time: 41.0690   loss: 0.0685
11/08 04:12:37 - Epoch(train)  [39/100][20/29]  lr: 9.6681e-04  eta: 1:10:26  time: 47.5444   loss: 0.0668
11/08 04:12:49 - Epoch(train)  [39/100][25/29]  lr: 9.5855e-04  eta: 1:10:14  time: 59.4222   loss: 0.0748
11/08 04:13:19 - Epoch(train)  [40/100][5/29]  lr: 9.4150e-04  eta: 2:43:36  time: 27.8252   loss: 0.0704
11/08 04:13:26 - Epoch(train)  [40/100][10/29]  lr: 9.3085e-04  eta: 1:41:40  time: 34.6795   loss: 0.0772
11/08 04:13:34 - Epoch(train)  [40/100][15/29]  lr: 9.1938e-04  eta: 1:21:59  time: 42.0694   loss: 0.0735
11/08 04:13:41 - Epoch(train)  [40/100][20/29]  lr: 9.0710e-04  eta: 1:11:48  time: 49.2715   loss: 0.0856
11/08 04:13:52 - Epoch(train)  [40/100][25/29]  lr: 8.9406e-04  eta: 1:9:47  time: 60.0286   loss: 0.0931

11/08 04:13:54 - Epoch(test) - all: [40/100]:
Threshold is drived from OTSU algorithm.
11/08 04:14:21 - Epoch(test) : [5/16]
11/08 04:14:28 - Epoch(test) : [10/16]
11/08 04:14:34 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.78、Recall: 0.89、F1-score: 0.83、Average_Precision: 0.94

11/08 04:14:37 - Epoch(test) - inshore: [40/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.69、Recall: 0.79、F1-score: 0.74、Average_Precision: 0.81
11/08 04:15:20 - Epoch(train)  [41/100][5/29]  lr: 8.6870e-04  eta: 2:41:23  time: 27.9070   loss: 0.0548
11/08 04:15:26 - Epoch(train)  [41/100][10/29]  lr: 8.5363e-04  eta: 1:39:20  time: 34.4564   loss: 0.0696
11/08 04:15:33 - Epoch(train)  [41/100][15/29]  lr: 8.3788e-04  eta: 1:18:50  time: 41.1376   loss: 0.0688
11/08 04:15:40 - Epoch(train)  [41/100][20/29]  lr: 8.2148e-04  eta: 1:9:21  time: 48.3873   loss: 0.0644
11/08 04:15:52 - Epoch(train)  [41/100][25/29]  lr: 8.0448e-04  eta: 1:8:4  time: 59.5431   loss: 0.0425
11/08 04:16:23 - Epoch(train)  [42/100][5/29]  lr: 7.7243e-04  eta: 2:40:20  time: 28.1968   loss: 0.0657
11/08 04:16:29 - Epoch(train)  [42/100][10/29]  lr: 7.5389e-04  eta: 1:37:19  time: 34.3282   loss: 0.0424
11/08 04:16:36 - Epoch(train)  [42/100][15/29]  lr: 7.3487e-04  eta: 1:17:54  time: 41.3457   loss: 0.0427
11/08 04:16:43 - Epoch(train)  [42/100][20/29]  lr: 7.1540e-04  eta: 1:7:30  time: 47.9107   loss: 0.0628
11/08 04:16:55 - Epoch(train)  [42/100][25/29]  lr: 6.9552e-04  eta: 1:6:58  time: 59.5931   loss: 0.0614
11/08 04:17:25 - Epoch(train)  [43/100][5/29]  lr: 6.5882e-04  eta: 2:34:57  time: 27.7220   loss: 0.0678
11/08 04:17:32 - Epoch(train)  [43/100][10/29]  lr: 6.3800e-04  eta: 1:34:58  time: 34.0827   loss: 0.0410
11/08 04:17:40 - Epoch(train)  [43/100][15/29]  lr: 6.1691e-04  eta: 1:18:6  time: 42.1724   loss: 0.0458
11/08 04:17:47 - Epoch(train)  [43/100][20/29]  lr: 5.9561e-04  eta: 1:8:5  time: 49.1593   loss: 0.0328
11/08 04:17:56 - Epoch(train)  [43/100][25/29]  lr: 5.7412e-04  eta: 1:4:20  time: 58.2481   loss: 0.0660
11/08 04:18:28 - Epoch(train)  [44/100][5/29]  lr: 5.3511e-04  eta: 2:30:7  time: 27.3272   loss: 0.0299
11/08 04:18:35 - Epoch(train)  [44/100][10/29]  lr: 5.1333e-04  eta: 1:32:45  time: 33.8725   loss: 0.0376
11/08 04:18:41 - Epoch(train)  [44/100][15/29]  lr: 4.9153e-04  eta: 1:14:13  time: 40.7796   loss: 0.0361
11/08 04:18:49 - Epoch(train)  [44/100][20/29]  lr: 4.6974e-04  eta: 1:5:30  time: 48.1403   loss: 0.0346
11/08 04:19:00 - Epoch(train)  [44/100][25/29]  lr: 4.4801e-04  eta: 1:4:17  time: 59.2315   loss: 0.0235
11/08 04:19:31 - Epoch(train)  [45/100][5/29]  lr: 4.0918e-04  eta: 2:29:0  time: 27.6104   loss: 0.0240
11/08 04:19:38 - Epoch(train)  [45/100][10/29]  lr: 3.8783e-04  eta: 1:32:57  time: 34.5557   loss: 0.0215
11/08 04:19:44 - Epoch(train)  [45/100][15/29]  lr: 3.6670e-04  eta: 1:12:58  time: 40.8159   loss: 0.0462
11/08 04:19:51 - Epoch(train)  [45/100][20/29]  lr: 3.4582e-04  eta: 1:3:36  time: 47.5838   loss: 0.0330
11/08 04:20:02 - Epoch(train)  [45/100][25/29]  lr: 3.2523e-04  eta: 1:3:8  time: 59.2260   loss: 0.0287

11/08 04:20:05 - Epoch(test) - all: [45/100]:
Threshold is drived from OTSU algorithm.
11/08 04:20:33 - Epoch(test) : [5/16]
11/08 04:20:40 - Epoch(test) : [10/16]
11/08 04:20:46 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.76、Recall: 0.88、F1-score: 0.81、Average_Precision: 0.94

11/08 04:20:49 - Epoch(test) - inshore: [45/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.94、Precision: 0.72、Recall: 0.78、F1-score: 0.75、Average_Precision: 0.82
11/08 04:21:32 - Epoch(train)  [46/100][5/29]  lr: 2.8905e-04  eta: 2:27:51  time: 27.8976   loss: 0.0223
11/08 04:21:38 - Epoch(train)  [46/100][10/29]  lr: 2.6949e-04  eta: 1:30:55  time: 34.4193   loss: 0.0180
11/08 04:21:46 - Epoch(train)  [46/100][15/29]  lr: 2.5038e-04  eta: 1:13:21  time: 41.7850   loss: 0.0188
11/08 04:21:52 - Epoch(train)  [46/100][20/29]  lr: 2.3173e-04  eta: 1:3:2  time: 48.0288   loss: 0.0150
11/08 04:22:03 - Epoch(train)  [46/100][25/29]  lr: 2.1361e-04  eta: 1:1:57  time: 59.1936   loss: 0.0162
11/08 04:22:34 - Epoch(train)  [47/100][5/29]  lr: 1.8237e-04  eta: 2:20:43  time: 27.0441   loss: 0.0202
11/08 04:22:41 - Epoch(train)  [47/100][10/29]  lr: 1.6585e-04  eta: 1:28:19  time: 34.0597   loss: 0.0140
11/08 04:22:48 - Epoch(train)  [47/100][15/29]  lr: 1.4997e-04  eta: 1:11:5  time: 41.2530   loss: 0.0264
11/08 04:22:54 - Epoch(train)  [47/100][20/29]  lr: 1.3476e-04  eta: 1:1:41  time: 47.8896   loss: 0.0187
11/08 04:23:06 - Epoch(train)  [47/100][25/29]  lr: 1.2024e-04  eta: 1:0:48  time: 59.1898   loss: 0.0155
11/08 04:23:36 - Epoch(train)  [48/100][5/29]  lr: 9.5944e-05  eta: 2:21:15  time: 27.6601   loss: 0.0179
11/08 04:23:43 - Epoch(train)  [48/100][10/29]  lr: 8.3516e-05  eta: 1:27:40  time: 34.4523   loss: 0.0123
11/08 04:23:51 - Epoch(train)  [48/100][15/29]  lr: 7.1881e-05  eta: 1:11:20  time: 42.1879   loss: 0.0144
11/08 04:23:58 - Epoch(train)  [48/100][20/29]  lr: 6.1061e-05  eta: 1:2:0  time: 49.0497   loss: 0.0148
11/08 04:24:09 - Epoch(train)  [48/100][25/29]  lr: 5.1078e-05  eta: 1:1:22  time: 60.8947   loss: 0.0098
11/08 04:24:40 - Epoch(train)  [49/100][5/29]  lr: 3.5274e-05  eta: 2:17:18  time: 27.4053   loss: 0.0110
11/08 04:24:47 - Epoch(train)  [49/100][10/29]  lr: 2.7727e-05  eta: 1:26:2  time: 34.4631   loss: 0.0211
11/08 04:24:55 - Epoch(train)  [49/100][15/29]  lr: 2.1080e-05  eta: 1:10:55  time: 42.7535   loss: 0.0142
11/08 04:25:03 - Epoch(train)  [49/100][20/29]  lr: 1.5345e-05  eta: 1:2:34  time: 50.4624   loss: 0.0130
11/08 04:25:11 - Epoch(train)  [49/100][25/29]  lr: 1.0533e-05  eta: 0:57:47  time: 58.4614   loss: 0.0150
11/08 04:25:43 - Epoch(train)  [50/100][5/29]  lr: 4.2251e-06  eta: 2:11:17  time: 26.7204   loss: 0.0053
11/08 04:25:50 - Epoch(train)  [50/100][10/29]  lr: 2.0406e-06  eta: 1:22:0  time: 33.4950   loss: 0.0091
11/08 04:25:57 - Epoch(train)  [50/100][15/29]  lr: 8.0443e-07  eta: 1:5:42  time: 40.3976   loss: 0.0108
11/08 04:26:04 - Epoch(train)  [50/100][20/29]  lr: 9.9998e-04  eta: 0:57:23  time: 47.2007   loss: 0.0129
11/08 04:26:14 - Epoch(train)  [50/100][25/29]  lr: 9.9932e-04  eta: 0:55:45  time: 57.5275   loss: 0.0386

11/08 04:26:18 - Epoch(test) - all: [50/100]:
Threshold is drived from OTSU algorithm.
11/08 04:26:45 - Epoch(test) : [5/16]
11/08 04:26:51 - Epoch(test) : [10/16]
11/08 04:26:57 - Epoch(test) : [15/16]
Accuracy: 0.91、Precision: 0.69、Recall: 0.89、F1-score: 0.78、Average_Precision: 0.93

11/08 04:27:00 - Epoch(test) - inshore: [50/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.69、Recall: 0.80、F1-score: 0.74、Average_Precision: 0.80
11/08 04:27:44 - Epoch(train)  [51/100][5/29]  lr: 9.9572e-04  eta: 2:15:41  time: 28.1700   loss: 0.0477
11/08 04:27:51 - Epoch(train)  [51/100][10/29]  lr: 9.9241e-04  eta: 1:23:17  time: 34.7031   loss: 0.0474
11/08 04:27:57 - Epoch(train)  [51/100][15/29]  lr: 9.8815e-04  eta: 1:5:26  time: 41.0426   loss: 0.0483
11/08 04:28:05 - Epoch(train)  [51/100][20/29]  lr: 9.8297e-04  eta: 0:58:36  time: 49.1819   loss: 0.0452
11/08 04:28:16 - Epoch(train)  [51/100][25/29]  lr: 9.7687e-04  eta: 0:57:13  time: 60.2336   loss: 0.0649
11/08 04:28:47 - Epoch(train)  [52/100][5/29]  lr: 9.6361e-04  eta: 2:10:40  time: 27.6871   loss: 0.0392
11/08 04:28:54 - Epoch(train)  [52/100][10/29]  lr: 9.5500e-04  eta: 1:21:25  time: 34.6215   loss: 0.0544
11/08 04:29:01 - Epoch(train)  [52/100][15/29]  lr: 9.4553e-04  eta: 1:5:9  time: 41.7079   loss: 0.0383
11/08 04:29:08 - Epoch(train)  [52/100][20/29]  lr: 9.3521e-04  eta: 0:56:16  time: 48.2020   loss: 0.0467
11/08 04:29:19 - Epoch(train)  [52/100][25/29]  lr: 9.2406e-04  eta: 0:55:41  time: 59.8350   loss: 0.0648
11/08 04:29:51 - Epoch(train)  [53/100][5/29]  lr: 9.0198e-04  eta: 2:11:23  time: 28.4189   loss: 0.0451
11/08 04:29:57 - Epoch(train)  [53/100][10/29]  lr: 8.8863e-04  eta: 1:20:31  time: 34.9609   loss: 0.0446
11/08 04:30:05 - Epoch(train)  [53/100][15/29]  lr: 8.7454e-04  eta: 1:5:31  time: 42.8235   loss: 0.0227
11/08 04:30:12 - Epoch(train)  [53/100][20/29]  lr: 8.5974e-04  eta: 0:57:6  time: 49.9438   loss: 0.0342
11/08 04:30:23 - Epoch(train)  [53/100][25/29]  lr: 8.4426e-04  eta: 0:55:32  time: 60.9429   loss: 0.0318
11/08 04:30:54 - Epoch(train)  [54/100][5/29]  lr: 8.1475e-04  eta: 2:6:31  time: 27.9502   loss: 0.0539
11/08 04:31:01 - Epoch(train)  [54/100][10/29]  lr: 7.9751e-04  eta: 1:19:5  time: 35.0707   loss: 0.0421
11/08 04:31:08 - Epoch(train)  [54/100][15/29]  lr: 7.7971e-04  eta: 1:2:21  time: 41.6354   loss: 0.0223
11/08 04:31:14 - Epoch(train)  [54/100][20/29]  lr: 7.6137e-04  eta: 0:53:56  time: 48.1927   loss: 0.0150
11/08 04:31:26 - Epoch(train)  [54/100][25/29]  lr: 7.4253e-04  eta: 0:53:9  time: 59.5930   loss: 0.0347
11/08 04:31:55 - Epoch(train)  [55/100][5/29]  lr: 7.0749e-04  eta: 1:59:6  time: 26.8849   loss: 0.0298
11/08 04:32:02 - Epoch(train)  [55/100][10/29]  lr: 6.8746e-04  eta: 1:13:58  time: 33.5213   loss: 0.0229
11/08 04:32:08 - Epoch(train)  [55/100][15/29]  lr: 6.6707e-04  eta: 0:58:31  time: 39.9304   loss: 0.0250
11/08 04:32:15 - Epoch(train)  [55/100][20/29]  lr: 6.4636e-04  eta: 0:51:33  time: 47.0899   loss: 0.0216
11/08 04:32:26 - Epoch(train)  [55/100][25/29]  lr: 6.2538e-04  eta: 0:50:36  time: 57.9964   loss: 0.0255

11/08 04:32:29 - Epoch(test) - all: [55/100]:
Threshold is drived from OTSU algorithm.
11/08 04:32:55 - Epoch(test) : [5/16]
11/08 04:33:03 - Epoch(test) : [10/16]
11/08 04:33:08 - Epoch(test) : [15/16]
Accuracy: 0.92、Precision: 0.73、Recall: 0.89、F1-score: 0.80、Average_Precision: 0.94

11/08 04:33:11 - Epoch(test) - inshore: [55/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.94、Precision: 0.71、Recall: 0.81、F1-score: 0.76、Average_Precision: 0.82
11/08 04:33:52 - Epoch(train)  [56/100][5/29]  lr: 5.8703e-04  eta: 1:55:40  time: 26.6930   loss: 0.0213
11/08 04:33:59 - Epoch(train)  [56/100][10/29]  lr: 5.6548e-04  eta: 1:13:24  time: 34.0078   loss: 0.0267
11/08 04:34:07 - Epoch(train)  [56/100][15/29]  lr: 5.4381e-04  eta: 0:59:7  time: 41.2474   loss: 0.0183
11/08 04:34:14 - Epoch(train)  [56/100][20/29]  lr: 5.2205e-04  eta: 0:51:32  time: 48.1295   loss: 0.0429
11/08 04:34:26 - Epoch(train)  [56/100][25/29]  lr: 5.0025e-04  eta: 0:51:35  time: 60.4497   loss: 0.0137
11/08 04:34:56 - Epoch(train)  [57/100][5/29]  lr: 4.6104e-04  eta: 1:57:59  time: 27.8509   loss: 0.0139
11/08 04:35:04 - Epoch(train)  [57/100][10/29]  lr: 4.3935e-04  eta: 1:14:49  time: 35.4625   loss: 0.0092
11/08 04:35:11 - Epoch(train)  [57/100][15/29]  lr: 4.1777e-04  eta: 0:59:34  time: 42.5185   loss: 0.0119
11/08 04:35:18 - Epoch(train)  [57/100][20/29]  lr: 3.9635e-04  eta: 0:51:58  time: 49.6606   loss: 0.0363
11/08 04:35:29 - Epoch(train)  [57/100][25/29]  lr: 3.7512e-04  eta: 0:50:8  time: 60.1225   loss: 0.0127
11/08 04:35:59 - Epoch(train)  [58/100][5/29]  lr: 3.3755e-04  eta: 1:53:30  time: 27.4174   loss: 0.0145
11/08 04:36:06 - Epoch(train)  [58/100][10/29]  lr: 3.1709e-04  eta: 1:11:15  time: 34.5609   loss: 0.0074
11/08 04:36:13 - Epoch(train)  [58/100][15/29]  lr: 2.9698e-04  eta: 0:56:28  time: 41.2566   loss: 0.0073
11/08 04:36:20 - Epoch(train)  [58/100][20/29]  lr: 2.7726e-04  eta: 0:49:16  time: 48.1866   loss: 0.0054
11/08 04:36:30 - Epoch(train)  [58/100][25/29]  lr: 2.5797e-04  eta: 0:47:50  time: 58.7326   loss: 0.0056
11/08 04:37:01 - Epoch(train)  [59/100][5/29]  lr: 2.2442e-04  eta: 1:49:20  time: 27.0418   loss: 0.0100
11/08 04:37:09 - Epoch(train)  [59/100][10/29]  lr: 2.0650e-04  eta: 1:10:10  time: 34.8561   loss: 0.0093
11/08 04:37:16 - Epoch(train)  [59/100][15/29]  lr: 1.8915e-04  eta: 0:56:16  time: 42.0960   loss: 0.0057
11/08 04:37:23 - Epoch(train)  [59/100][20/29]  lr: 1.7238e-04  eta: 0:49:14  time: 49.3167   loss: 0.0047
11/08 04:37:32 - Epoch(train)  [59/100][25/29]  lr: 1.5624e-04  eta: 0:46:27  time: 58.4132   loss: 0.0093
11/08 04:38:05 - Epoch(train)  [60/100][5/29]  lr: 1.2886e-04  eta: 1:50:31  time: 28.0026   loss: 0.0063
11/08 04:38:11 - Epoch(train)  [60/100][10/29]  lr: 1.1463e-04  eta: 1:8:15  time: 34.7378   loss: 0.0027
11/08 04:38:18 - Epoch(train)  [60/100][15/29]  lr: 1.0113e-04  eta: 0:53:53  time: 41.3202   loss: 0.0043
11/08 04:38:24 - Epoch(train)  [60/100][20/29]  lr: 8.8393e-05  eta: 0:46:28  time: 47.7151   loss: 0.0044
11/08 04:38:36 - Epoch(train)  [60/100][25/29]  lr: 7.6438e-05  eta: 0:46:8  time: 59.4714   loss: 0.0051

11/08 04:38:39 - Epoch(test) - all: [60/100]:
Threshold is drived from OTSU algorithm.
11/08 04:39:06 - Epoch(test) : [5/16]
11/08 04:39:13 - Epoch(test) : [10/16]
11/08 04:39:19 - Epoch(test) : [15/16]
Accuracy: 0.87、Precision: 0.59、Recall: 0.89、F1-score: 0.71、Average_Precision: 0.94

11/08 04:39:21 - Epoch(test) - inshore: [60/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.63、Recall: 0.79、F1-score: 0.70、Average_Precision: 0.82
11/08 04:40:02 - Epoch(train)  [61/100][5/29]  lr: 5.6966e-05  eta: 1:42:14  time: 26.5546   loss: 0.0056
11/08 04:40:09 - Epoch(train)  [61/100][10/29]  lr: 4.7323e-05  eta: 1:3:48  time: 33.2927   loss: 0.0025
11/08 04:40:15 - Epoch(train)  [61/100][15/29]  lr: 3.8541e-05  eta: 0:50:19  time: 39.5587   loss: 0.0032
11/08 04:40:23 - Epoch(train)  [61/100][20/29]  lr: 3.0639e-05  eta: 0:44:30  time: 46.8512   loss: 0.0076
11/08 04:40:34 - Epoch(train)  [61/100][25/29]  lr: 2.3630e-05  eta: 0:44:14  time: 58.4678   loss: 0.0025
11/08 04:41:05 - Epoch(train)  [62/100][5/29]  lr: 1.3309e-05  eta: 1:43:46  time: 27.6477   loss: 0.0021
11/08 04:41:12 - Epoch(train)  [62/100][10/29]  lr: 8.8684e-06  eta: 1:4:26  time: 34.4949   loss: 0.0027
11/08 04:41:19 - Epoch(train)  [62/100][15/29]  lr: 5.3635e-06  eta: 0:51:14  time: 41.3196   loss: 0.0045
11/08 04:41:26 - Epoch(train)  [62/100][20/29]  lr: 2.8007e-06  eta: 0:44:29  time: 48.0480   loss: 0.0012
11/08 04:41:37 - Epoch(train)  [62/100][25/29]  lr: 1.1849e-06  eta: 0:43:39  time: 59.2099   loss: 0.0028
11/08 04:42:06 - Epoch(train)  [63/100][5/29]  lr: 9.9983e-04  eta: 1:37:27  time: 26.6501   loss: 0.0050
11/08 04:42:13 - Epoch(train)  [63/100][10/29]  lr: 9.9878e-04  eta: 1:0:41  time: 33.3460   loss: 0.0109
11/08 04:42:21 - Epoch(train)  [63/100][15/29]  lr: 9.9679e-04  eta: 0:49:33  time: 41.0319   loss: 0.0254
11/08 04:42:27 - Epoch(train)  [63/100][20/29]  lr: 9.9385e-04  eta: 0:42:56  time: 47.6257   loss: 0.0316
11/08 04:42:38 - Epoch(train)  [63/100][25/29]  lr: 9.8997e-04  eta: 0:41:57  time: 58.4274   loss: 0.0411
11/08 04:43:09 - Epoch(train)  [64/100][5/29]  lr: 9.8064e-04  eta: 1:36:51  time: 27.2070   loss: 0.0305
11/08 04:43:15 - Epoch(train)  [64/100][10/29]  lr: 9.7417e-04  eta: 0:59:13  time: 33.4265   loss: 0.0285
11/08 04:43:22 - Epoch(train)  [64/100][15/29]  lr: 9.6681e-04  eta: 0:47:17  time: 40.2244   loss: 0.0462
11/08 04:43:29 - Epoch(train)  [64/100][20/29]  lr: 9.5855e-04  eta: 0:41:37  time: 47.4441   loss: 0.0411
11/08 04:43:40 - Epoch(train)  [64/100][25/29]  lr: 9.4942e-04  eta: 0:41:2  time: 58.7400   loss: 0.0509
11/08 04:44:11 - Epoch(train)  [65/100][5/29]  lr: 9.3085e-04  eta: 1:34:50  time: 27.3852   loss: 0.0277
11/08 04:44:19 - Epoch(train)  [65/100][10/29]  lr: 9.1938e-04  eta: 1:0:29  time: 35.1062   loss: 0.0456
11/08 04:44:26 - Epoch(train)  [65/100][15/29]  lr: 9.0710e-04  eta: 0:48:26  time: 42.3638   loss: 0.0360
11/08 04:44:34 - Epoch(train)  [65/100][20/29]  lr: 8.9406e-04  eta: 0:42:44  time: 50.0806   loss: 0.0449
11/08 04:44:46 - Epoch(train)  [65/100][25/29]  lr: 8.8026e-04  eta: 0:42:28  time: 62.5238   loss: 0.0439

11/08 04:44:49 - Epoch(test) - all: [65/100]:
Threshold is drived from OTSU algorithm.
11/08 04:45:17 - Epoch(test) : [5/16]
11/08 04:45:24 - Epoch(test) : [10/16]
11/08 04:45:31 - Epoch(test) : [15/16]
Accuracy: 0.93、Precision: 0.77、Recall: 0.87、F1-score: 0.82、Average_Precision: 0.93

11/08 04:45:33 - Epoch(test) - inshore: [65/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.94、Precision: 0.72、Recall: 0.77、F1-score: 0.74、Average_Precision: 0.79
11/08 04:46:19 - Epoch(train)  [66/100][5/29]  lr: 8.5363e-04  eta: 1:39:27  time: 29.5414   loss: 0.0316
11/08 04:46:26 - Epoch(train)  [66/100][10/29]  lr: 8.3788e-04  eta: 1:0:44  time: 36.2599   loss: 0.0257
11/08 04:46:34 - Epoch(train)  [66/100][15/29]  lr: 8.2148e-04  eta: 0:48:47  time: 43.9145   loss: 0.0389
11/08 04:46:41 - Epoch(train)  [66/100][20/29]  lr: 8.0448e-04  eta: 0:42:28  time: 51.2355   loss: 0.0386
11/08 04:46:52 - Epoch(train)  [66/100][25/29]  lr: 7.8689e-04  eta: 0:41:2  time: 62.1892   loss: 0.0281
11/08 04:47:27 - Epoch(train)  [67/100][5/29]  lr: 7.5389e-04  eta: 1:42:13  time: 31.2623   loss: 0.0252
11/08 04:47:34 - Epoch(train)  [67/100][10/29]  lr: 7.3487e-04  eta: 1:3:27  time: 39.0084   loss: 0.0268
11/08 04:47:42 - Epoch(train)  [67/100][15/29]  lr: 7.1540e-04  eta: 0:50:20  time: 46.6541   loss: 0.0198
11/08 04:47:49 - Epoch(train)  [67/100][20/29]  lr: 6.9552e-04  eta: 0:43:33  time: 54.1038   loss: 0.0182
11/08 04:48:02 - Epoch(train)  [67/100][25/29]  lr: 6.7527e-04  eta: 0:42:33  time: 66.4362   loss: 0.0250
11/08 04:48:34 - Epoch(train)  [68/100][5/29]  lr: 6.3800e-04  eta: 1:31:45  time: 28.9164   loss: 0.0143
11/08 04:48:40 - Epoch(train)  [68/100][10/29]  lr: 6.1691e-04  eta: 0:55:59  time: 35.4800   loss: 0.0143
11/08 04:48:47 - Epoch(train)  [68/100][15/29]  lr: 5.9561e-04  eta: 0:44:36  time: 42.6181   loss: 0.0145
11/08 04:48:55 - Epoch(train)  [68/100][20/29]  lr: 5.7412e-04  eta: 0:38:55  time: 49.8566   loss: 0.0162
11/08 04:49:06 - Epoch(train)  [68/100][25/29]  lr: 5.5249e-04  eta: 0:38:10  time: 61.4465   loss: 0.0123
11/08 04:49:40 - Epoch(train)  [69/100][5/29]  lr: 5.1333e-04  eta: 1:32:14  time: 29.9817   loss: 0.0085
11/08 04:49:47 - Epoch(train)  [69/100][10/29]  lr: 4.9153e-04  eta: 0:56:43  time: 37.0727   loss: 0.0100
11/08 04:49:55 - Epoch(train)  [69/100][15/29]  lr: 4.6974e-04  eta: 0:45:24  time: 44.7595   loss: 0.0070
11/08 04:50:01 - Epoch(train)  [69/100][20/29]  lr: 4.4801e-04  eta: 0:38:55  time: 51.4357   loss: 0.0056
11/08 04:50:14 - Epoch(train)  [69/100][25/29]  lr: 4.2638e-04  eta: 0:38:29  time: 63.9269   loss: 0.0061
11/08 04:50:47 - Epoch(train)  [70/100][5/29]  lr: 3.8783e-04  eta: 1:27:55  time: 29.5071   loss: 0.0049
11/08 04:50:56 - Epoch(train)  [70/100][10/29]  lr: 3.6670e-04  eta: 0:56:57  time: 38.4404   loss: 0.0036
11/08 04:51:02 - Epoch(train)  [70/100][15/29]  lr: 3.4582e-04  eta: 0:44:20  time: 45.1440   loss: 0.0033
11/08 04:51:10 - Epoch(train)  [70/100][20/29]  lr: 3.2523e-04  eta: 0:38:30  time: 52.5813   loss: 0.0084
11/08 04:51:19 - Epoch(train)  [70/100][25/29]  lr: 3.0498e-04  eta: 0:36:13  time: 62.1800   loss: 0.0034

11/08 04:51:24 - Epoch(test) - all: [70/100]:
Threshold is drived from OTSU algorithm.
11/08 04:51:54 - Epoch(test) : [5/16]
11/08 04:52:01 - Epoch(test) : [10/16]
11/08 04:52:07 - Epoch(test) : [15/16]
Accuracy: 0.88、Precision: 0.60、Recall: 0.89、F1-score: 0.72、Average_Precision: 0.94

11/08 04:52:10 - Epoch(test) - inshore: [70/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.66、Recall: 0.81、F1-score: 0.72、Average_Precision: 0.82
11/08 04:52:56 - Epoch(train)  [71/100][5/29]  lr: 2.6949e-04  eta: 1:24:10  time: 29.1929   loss: 0.0039
11/08 04:53:04 - Epoch(train)  [71/100][10/29]  lr: 2.5038e-04  eta: 0:53:8  time: 37.0707   loss: 0.0048
11/08 04:53:11 - Epoch(train)  [71/100][15/29]  lr: 2.3173e-04  eta: 0:41:46  time: 43.9776   loss: 0.0051
11/08 04:53:19 - Epoch(train)  [71/100][20/29]  lr: 2.1361e-04  eta: 0:36:46  time: 51.9217   loss: 0.0053
11/08 04:53:32 - Epoch(train)  [71/100][25/29]  lr: 1.9602e-04  eta: 0:36:31  time: 64.8493   loss: 0.0017
11/08 04:54:08 - Epoch(train)  [72/100][5/29]  lr: 1.6585e-04  eta: 1:31:59  time: 33.0088   loss: 0.0010
11/08 04:54:16 - Epoch(train)  [72/100][10/29]  lr: 1.4997e-04  eta: 0:56:5  time: 40.5032   loss: 0.0022
11/08 04:54:24 - Epoch(train)  [72/100][15/29]  lr: 1.3476e-04  eta: 0:44:26  time: 48.4200   loss: 0.0021
11/08 04:54:30 - Epoch(train)  [72/100][20/29]  lr: 1.2024e-04  eta: 0:37:40  time: 55.0591   loss: 0.0054
11/08 04:54:42 - Epoch(train)  [72/100][25/29]  lr: 1.0644e-04  eta: 0:36:30  time: 67.1097   loss: 0.0007
11/08 04:55:16 - Epoch(train)  [73/100][5/29]  lr: 8.3516e-05  eta: 1:20:2  time: 29.7572   loss: 0.0011
11/08 04:55:24 - Epoch(train)  [73/100][10/29]  lr: 7.1881e-05  eta: 0:50:11  time: 37.5509   loss: 0.0007
11/08 04:55:31 - Epoch(train)  [73/100][15/29]  lr: 6.1061e-05  eta: 0:39:47  time: 44.9430   loss: 0.0024
11/08 04:55:39 - Epoch(train)  [73/100][20/29]  lr: 5.1078e-05  eta: 0:34:41  time: 52.5757   loss: 0.0003
11/08 04:55:59 - Epoch(train)  [73/100][25/29]  lr: 4.1949e-05  eta: 0:38:32  time: 73.4739   loss: 0.0047
11/08 04:56:44 - Epoch(train)  [74/100][5/29]  lr: 2.7727e-05  eta: 1:39:58  time: 38.5513   loss: 0.0012
11/08 04:56:53 - Epoch(train)  [74/100][10/29]  lr: 2.1080e-05  eta: 1:1:2  time: 47.3742   loss: 0.0027
11/08 04:57:02 - Epoch(train)  [74/100][15/29]  lr: 1.5345e-05  eta: 0:48:34  time: 56.9318   loss: 0.0012
11/08 04:57:17 - Epoch(train)  [74/100][20/29]  lr: 1.0533e-05  eta: 0:45:44  time: 71.9421   loss: 0.0007
11/08 04:57:37 - Epoch(train)  [74/100][25/29]  lr: 6.6528e-06  eta: 0:46:28  time: 91.9766   loss: 0.0011
11/08 04:58:14 - Epoch(train)  [75/100][5/29]  lr: 2.0406e-06  eta: 1:23:57  time: 33.6265   loss: 0.0017
11/08 04:58:21 - Epoch(train)  [75/100][10/29]  lr: 8.0443e-07  eta: 0:50:23  time: 40.6331   loss: 0.0010
11/08 04:58:29 - Epoch(train)  [75/100][15/29]  lr: 9.9998e-04  eta: 0:40:6  time: 48.8442   loss: 0.0028
11/08 04:58:37 - Epoch(train)  [75/100][20/29]  lr: 9.9932e-04  eta: 0:34:50  time: 56.9706   loss: 0.0012
11/08 04:58:48 - Epoch(train)  [75/100][25/29]  lr: 9.9770e-04  eta: 0:32:45  time: 67.4140   loss: 0.0057

11/08 04:58:53 - Epoch(test) - all: [75/100]:
Threshold is drived from OTSU algorithm.
11/08 04:59:23 - Epoch(test) : [5/16]
11/08 04:59:31 - Epoch(test) : [10/16]
11/08 04:59:37 - Epoch(test) : [15/16]
Accuracy: 0.84、Precision: 0.54、Recall: 0.88、F1-score: 0.67、Average_Precision: 0.93

11/08 04:59:40 - Epoch(test) - inshore: [75/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.90、Precision: 0.56、Recall: 0.79、F1-score: 0.65、Average_Precision: 0.81
11/08 05:00:26 - Epoch(train)  [76/100][5/29]  lr: 9.9241e-04  eta: 1:9:34  time: 28.9862   loss: 0.0207
11/08 05:00:33 - Epoch(train)  [76/100][10/29]  lr: 9.8815e-04  eta: 0:43:25  time: 36.4422   loss: 0.0328
11/08 05:00:40 - Epoch(train)  [76/100][15/29]  lr: 9.8297e-04  eta: 0:34:24  time: 43.6181   loss: 0.0355
11/08 05:00:48 - Epoch(train)  [76/100][20/29]  lr: 9.7687e-04  eta: 0:30:12  time: 51.4242   loss: 0.0356
11/08 05:01:01 - Epoch(train)  [76/100][25/29]  lr: 9.6986e-04  eta: 0:29:55  time: 64.1100   loss: 0.0285
11/08 05:01:40 - Epoch(train)  [77/100][5/29]  lr: 9.5500e-04  eta: 1:13:18  time: 31.8286   loss: 0.0229
11/08 05:01:47 - Epoch(train)  [77/100][10/29]  lr: 9.4553e-04  eta: 0:44:11  time: 38.6567   loss: 0.0168
11/08 05:01:54 - Epoch(train)  [77/100][15/29]  lr: 9.3521e-04  eta: 0:34:38  time: 45.7728   loss: 0.0147
11/08 05:02:02 - Epoch(train)  [77/100][20/29]  lr: 9.2406e-04  eta: 0:30:7  time: 53.4888   loss: 0.0139
11/08 05:02:13 - Epoch(train)  [77/100][25/29]  lr: 9.1211e-04  eta: 0:29:8  time: 65.1457   loss: 0.0115
11/08 05:02:46 - Epoch(train)  [78/100][5/29]  lr: 8.8863e-04  eta: 1:6:19  time: 30.0546   loss: 0.0244
11/08 05:02:54 - Epoch(train)  [78/100][10/29]  lr: 8.7454e-04  eta: 0:40:53  time: 37.3387   loss: 0.0217
11/08 05:03:02 - Epoch(train)  [78/100][15/29]  lr: 8.5974e-04  eta: 0:32:52  time: 45.3760   loss: 0.0192
11/08 05:03:09 - Epoch(train)  [78/100][20/29]  lr: 8.4426e-04  eta: 0:28:36  time: 53.0553   loss: 0.0179
11/08 05:03:21 - Epoch(train)  [78/100][25/29]  lr: 8.2812e-04  eta: 0:27:31  time: 64.3106   loss: 0.0117
11/08 05:03:57 - Epoch(train)  [79/100][5/29]  lr: 7.9751e-04  eta: 1:7:16  time: 31.8810   loss: 0.0089
11/08 05:04:04 - Epoch(train)  [79/100][10/29]  lr: 7.7971e-04  eta: 0:40:48  time: 38.9851   loss: 0.0096
11/08 05:04:11 - Epoch(train)  [79/100][15/29]  lr: 7.6137e-04  eta: 0:32:8  time: 46.4258   loss: 0.0119
11/08 05:04:20 - Epoch(train)  [79/100][20/29]  lr: 7.4253e-04  eta: 0:28:17  time: 54.9417   loss: 0.0084
11/08 05:04:32 - Epoch(train)  [79/100][25/29]  lr: 7.2324e-04  eta: 0:27:23  time: 67.0437   loss: 0.0121
11/08 05:05:05 - Epoch(train)  [80/100][5/29]  lr: 6.8746e-04  eta: 1:1:27  time: 30.5230   loss: 0.0170
11/08 05:05:12 - Epoch(train)  [80/100][10/29]  lr: 6.6707e-04  eta: 0:37:53  time: 37.9598   loss: 0.0150
11/08 05:05:22 - Epoch(train)  [80/100][15/29]  lr: 6.4636e-04  eta: 0:31:32  time: 47.8014   loss: 0.0064
11/08 05:05:30 - Epoch(train)  [80/100][20/29]  lr: 6.2538e-04  eta: 0:27:23  time: 55.8032   loss: 0.0102
11/08 05:05:39 - Epoch(train)  [80/100][25/29]  lr: 6.0415e-04  eta: 0:25:15  time: 64.8678   loss: 0.0079

11/08 05:05:44 - Epoch(test) - all: [80/100]:
Threshold is drived from OTSU algorithm.
11/08 05:06:13 - Epoch(test) : [5/16]
11/08 05:06:21 - Epoch(test) : [10/16]
11/08 05:06:26 - Epoch(test) : [15/16]
Accuracy: 0.89、Precision: 0.63、Recall: 0.90、F1-score: 0.74、Average_Precision: 0.93

11/08 05:06:28 - Epoch(test) - inshore: [80/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.67、Recall: 0.82、F1-score: 0.73、Average_Precision: 0.81
11/08 05:07:16 - Epoch(train)  [81/100][5/29]  lr: 5.6548e-04  eta: 0:59:35  time: 31.0937   loss: 0.0093
11/08 05:07:23 - Epoch(train)  [81/100][10/29]  lr: 5.4381e-04  eta: 0:36:34  time: 38.5073   loss: 0.0107
11/08 05:07:30 - Epoch(train)  [81/100][15/29]  lr: 5.2205e-04  eta: 0:28:53  time: 46.0180   loss: 0.0127
11/08 05:07:38 - Epoch(train)  [81/100][20/29]  lr: 5.0025e-04  eta: 0:25:0  time: 53.5911   loss: 0.0089
11/08 05:07:50 - Epoch(train)  [81/100][25/29]  lr: 4.7845e-04  eta: 0:24:12  time: 65.4475   loss: 0.0093
11/08 05:08:27 - Epoch(train)  [82/100][5/29]  lr: 4.3935e-04  eta: 1:0:33  time: 33.2743   loss: 0.0039
11/08 05:08:34 - Epoch(train)  [82/100][10/29]  lr: 4.1777e-04  eta: 0:36:39  time: 40.6584   loss: 0.0022
11/08 05:08:42 - Epoch(train)  [82/100][15/29]  lr: 3.9635e-04  eta: 0:28:41  time: 48.1903   loss: 0.0041
11/08 05:08:49 - Epoch(train)  [82/100][20/29]  lr: 3.7512e-04  eta: 0:24:42  time: 55.8249   loss: 0.0046
11/08 05:09:01 - Epoch(train)  [82/100][25/29]  lr: 3.5414e-04  eta: 0:23:36  time: 67.3302   loss: 0.0026
11/08 05:09:37 - Epoch(train)  [83/100][5/29]  lr: 3.1709e-04  eta: 0:56:24  time: 32.7275   loss: 0.0009
11/08 05:09:44 - Epoch(train)  [83/100][10/29]  lr: 2.9698e-04  eta: 0:34:19  time: 40.2275   loss: 0.0023
11/08 05:09:52 - Epoch(train)  [83/100][15/29]  lr: 2.7726e-04  eta: 0:26:57  time: 47.8544   loss: 0.0027
11/08 05:10:00 - Epoch(train)  [83/100][20/29]  lr: 2.5797e-04  eta: 0:23:26  time: 56.0390   loss: 0.0005
11/08 05:10:12 - Epoch(train)  [83/100][25/29]  lr: 2.3913e-04  eta: 0:22:33  time: 68.0592   loss: 0.0008
11/08 05:10:45 - Epoch(train)  [84/100][5/29]  lr: 2.0650e-04  eta: 0:48:9  time: 29.6046   loss: 0.0004
11/08 05:10:55 - Epoch(train)  [84/100][10/29]  lr: 1.8915e-04  eta: 0:32:14  time: 40.0450   loss: 0.0032
11/08 05:11:03 - Epoch(train)  [84/100][15/29]  lr: 1.7238e-04  eta: 0:25:25  time: 47.8815   loss: 0.0002
11/08 05:11:11 - Epoch(train)  [84/100][20/29]  lr: 1.5624e-04  eta: 0:21:53  time: 55.5364   loss: 0.0006
11/08 05:11:19 - Epoch(train)  [84/100][25/29]  lr: 1.4076e-04  eta: 0:20:0  time: 64.1234   loss: 0.0005
11/08 05:11:55 - Epoch(train)  [85/100][5/29]  lr: 1.1463e-04  eta: 0:47:46  time: 31.2213   loss: 0.0002
11/08 05:12:02 - Epoch(train)  [85/100][10/29]  lr: 1.0113e-04  eta: 0:28:55  time: 38.2345   loss: 0.0015
11/08 05:12:10 - Epoch(train)  [85/100][15/29]  lr: 8.8393e-05  eta: 0:23:9  time: 46.4169   loss: 0.0002
11/08 05:12:18 - Epoch(train)  [85/100][20/29]  lr: 7.6438e-05  eta: 0:19:57  time: 53.9389   loss: 0.0003
11/08 05:12:29 - Epoch(train)  [85/100][25/29]  lr: 6.5290e-05  eta: 0:19:7  time: 65.3240   loss: 0.0012

11/08 05:12:32 - Epoch(test) - all: [85/100]:
Threshold is drived from OTSU algorithm.
11/08 05:13:02 - Epoch(test) : [5/16]
11/08 05:13:09 - Epoch(test) : [10/16]
11/08 05:13:15 - Epoch(test) : [15/16]
Accuracy: 0.84、Precision: 0.54、Recall: 0.89、F1-score: 0.67、Average_Precision: 0.94

11/08 05:13:17 - Epoch(test) - inshore: [85/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.64、Recall: 0.80、F1-score: 0.71、Average_Precision: 0.82
11/08 05:14:03 - Epoch(train)  [86/100][5/29]  lr: 4.7323e-05  eta: 0:43:37  time: 30.4365   loss: 0.0002
11/08 05:14:10 - Epoch(train)  [86/100][10/29]  lr: 3.8541e-05  eta: 0:26:15  time: 37.0681   loss: 0.0002
11/08 05:14:17 - Epoch(train)  [86/100][15/29]  lr: 3.0639e-05  eta: 0:20:46  time: 44.5150   loss: 0.0001
11/08 05:14:24 - Epoch(train)  [86/100][20/29]  lr: 2.3630e-05  eta: 0:17:48  time: 51.4809   loss: 0.0002
11/08 05:14:36 - Epoch(train)  [86/100][25/29]  lr: 1.7529e-05  eta: 0:17:23  time: 63.6066   loss: 0.0015
11/08 05:15:10 - Epoch(train)  [87/100][5/29]  lr: 8.8684e-06  eta: 0:39:6  time: 29.2565   loss: 0.0002
11/08 05:15:21 - Epoch(train)  [87/100][10/29]  lr: 5.3635e-06  eta: 0:26:39  time: 40.3825   loss: 0.0017
11/08 05:15:28 - Epoch(train)  [87/100][15/29]  lr: 2.8007e-06  eta: 0:20:54  time: 48.1138   loss: 0.0003
11/08 05:15:36 - Epoch(train)  [87/100][20/29]  lr: 1.1849e-06  eta: 0:17:55  time: 55.7475   loss: 0.0002
11/08 05:15:44 - Epoch(train)  [87/100][25/29]  lr: 5.1903e-07  eta: 0:16:3  time: 63.2151   loss: 0.0002
11/08 05:16:21 - Epoch(train)  [88/100][5/29]  lr: 9.9878e-04  eta: 0:37:54  time: 30.5696   loss: 0.0002
11/08 05:16:29 - Epoch(train)  [88/100][10/29]  lr: 9.9679e-04  eta: 0:23:22  time: 38.2289   loss: 0.0014
11/08 05:16:36 - Epoch(train)  [88/100][15/29]  lr: 9.9385e-04  eta: 0:18:24  time: 45.7534   loss: 0.0002
11/08 05:16:44 - Epoch(train)  [88/100][20/29]  lr: 9.8997e-04  eta: 0:15:58  time: 53.7068   loss: 0.0010
11/08 05:16:56 - Epoch(train)  [88/100][25/29]  lr: 9.8516e-04  eta: 0:15:19  time: 65.2901   loss: 0.0011
11/08 05:17:28 - Epoch(train)  [89/100][5/29]  lr: 9.7417e-04  eta: 0:32:55  time: 28.7958   loss: 0.0144
11/08 05:17:36 - Epoch(train)  [89/100][10/29]  lr: 9.6681e-04  eta: 0:20:46  time: 36.8726   loss: 0.0185
11/08 05:17:44 - Epoch(train)  [89/100][15/29]  lr: 9.5855e-04  eta: 0:16:29  time: 44.5784   loss: 0.0173
11/08 05:17:51 - Epoch(train)  [89/100][20/29]  lr: 9.4942e-04  eta: 0:14:17  time: 52.3119   loss: 0.0214
11/08 05:18:04 - Epoch(train)  [89/100][25/29]  lr: 9.3944e-04  eta: 0:13:53  time: 64.4895   loss: 0.0203
11/08 05:18:36 - Epoch(train)  [90/100][5/29]  lr: 9.1938e-04  eta: 0:30:47  time: 29.4206   loss: 0.0145
11/08 05:18:43 - Epoch(train)  [90/100][10/29]  lr: 9.0710e-04  eta: 0:18:51  time: 36.6123   loss: 0.0164
11/08 05:18:51 - Epoch(train)  [90/100][15/29]  lr: 8.9406e-04  eta: 0:14:49  time: 43.8920   loss: 0.0142
11/08 05:18:59 - Epoch(train)  [90/100][20/29]  lr: 8.8026e-04  eta: 0:12:56  time: 51.9318   loss: 0.0151
11/08 05:19:11 - Epoch(train)  [90/100][25/29]  lr: 8.6574e-04  eta: 0:12:40  time: 64.6733   loss: 0.0064

11/08 05:19:15 - Epoch(test) - all: [90/100]:
Threshold is drived from OTSU algorithm.
11/08 05:19:46 - Epoch(test) : [5/16]
11/08 05:19:53 - Epoch(test) : [10/16]
11/08 05:19:59 - Epoch(test) : [15/16]
Accuracy: 0.88、Precision: 0.61、Recall: 0.90、F1-score: 0.73、Average_Precision: 0.94

11/08 05:20:01 - Epoch(test) - inshore: [90/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.93、Precision: 0.66、Recall: 0.82、F1-score: 0.73、Average_Precision: 0.81
11/08 05:20:48 - Epoch(train)  [91/100][5/29]  lr: 8.3788e-04  eta: 0:28:30  time: 30.0102   loss: 0.0107
11/08 05:20:56 - Epoch(train)  [91/100][10/29]  lr: 8.2148e-04  eta: 0:17:23  time: 37.2849   loss: 0.0077
11/08 05:21:03 - Epoch(train)  [91/100][15/29]  lr: 8.0448e-04  eta: 0:13:33  time: 44.3724   loss: 0.0130
11/08 05:21:10 - Epoch(train)  [91/100][20/29]  lr: 7.8689e-04  eta: 0:11:45  time: 52.2401   loss: 0.0083
11/08 05:21:24 - Epoch(train)  [91/100][25/29]  lr: 7.6877e-04  eta: 0:11:34  time: 65.4849   loss: 0.0100
11/08 05:21:59 - Epoch(train)  [92/100][5/29]  lr: 7.3487e-04  eta: 0:26:35  time: 31.1601   loss: 0.0092
11/08 05:22:06 - Epoch(train)  [92/100][10/29]  lr: 7.1540e-04  eta: 0:16:13  time: 38.7786   loss: 0.0108
11/08 05:22:14 - Epoch(train)  [92/100][15/29]  lr: 6.9552e-04  eta: 0:12:35  time: 46.0756   loss: 0.0081
11/08 05:22:21 - Epoch(train)  [92/100][20/29]  lr: 6.7527e-04  eta: 0:10:43  time: 53.4158   loss: 0.0056
11/08 05:22:33 - Epoch(train)  [92/100][25/29]  lr: 6.5468e-04  eta: 0:10:16  time: 65.3070   loss: 0.0123
11/08 05:23:06 - Epoch(train)  [93/100][5/29]  lr: 6.1691e-04  eta: 0:22:6  time: 29.2179   loss: 0.0052
11/08 05:23:14 - Epoch(train)  [93/100][10/29]  lr: 5.9561e-04  eta: 0:13:45  time: 37.1946   loss: 0.0044
11/08 05:23:21 - Epoch(train)  [93/100][15/29]  lr: 5.7412e-04  eta: 0:10:42  time: 44.4147   loss: 0.0040
11/08 05:23:29 - Epoch(train)  [93/100][20/29]  lr: 5.5249e-04  eta: 0:9:16  time: 52.4808   loss: 0.0027
11/08 05:23:41 - Epoch(train)  [93/100][25/29]  lr: 5.3076e-04  eta: 0:8:54  time: 64.5238   loss: 0.0068
11/08 05:24:15 - Epoch(train)  [94/100][5/29]  lr: 4.9153e-04  eta: 0:20:0  time: 30.3163   loss: 0.0032
11/08 05:24:24 - Epoch(train)  [94/100][10/29]  lr: 4.6974e-04  eta: 0:12:28  time: 38.7707   loss: 0.0028
11/08 05:24:31 - Epoch(train)  [94/100][15/29]  lr: 4.4801e-04  eta: 0:9:39  time: 46.2082   loss: 0.0039
11/08 05:24:39 - Epoch(train)  [94/100][20/29]  lr: 4.2638e-04  eta: 0:8:14  time: 54.0585   loss: 0.0045
11/08 05:24:51 - Epoch(train)  [94/100][25/29]  lr: 4.0489e-04  eta: 0:7:52  time: 66.3624   loss: 0.0028
11/08 05:25:29 - Epoch(train)  [95/100][5/29]  lr: 3.6670e-04  eta: 0:18:21  time: 32.5913   loss: 0.0037
11/08 05:25:37 - Epoch(train)  [95/100][10/29]  lr: 3.4582e-04  eta: 0:11:18  time: 41.3711   loss: 0.0009
11/08 05:25:46 - Epoch(train)  [95/100][15/29]  lr: 3.2523e-04  eta: 0:8:53  time: 50.3007   loss: 0.0009
11/08 05:25:54 - Epoch(train)  [95/100][20/29]  lr: 3.0498e-04  eta: 0:7:23  time: 57.6590   loss: 0.0020
11/08 05:26:04 - Epoch(train)  [95/100][25/29]  lr: 2.8510e-04  eta: 0:6:42  time: 67.5125   loss: 0.0007

11/08 05:26:09 - Epoch(test) - all: [95/100]:
Threshold is drived from OTSU algorithm.
11/08 05:26:39 - Epoch(test) : [5/16]
11/08 05:26:47 - Epoch(test) : [10/16]
11/08 05:26:53 - Epoch(test) : [15/16]
Accuracy: 0.85、Precision: 0.55、Recall: 0.89、F1-score: 0.68、Average_Precision: 0.93

11/08 05:26:56 - Epoch(test) - inshore: [95/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.92、Precision: 0.62、Recall: 0.80、F1-score: 0.70、Average_Precision: 0.82
11/08 05:27:43 - Epoch(train)  [96/100][5/29]  lr: 2.5038e-04  eta: 0:14:8  time: 30.2922   loss: 0.0009
11/08 05:27:51 - Epoch(train)  [96/100][10/29]  lr: 2.3173e-04  eta: 0:8:33  time: 38.0397   loss: 0.0005
11/08 05:27:58 - Epoch(train)  [96/100][15/29]  lr: 2.1361e-04  eta: 0:6:33  time: 45.4603   loss: 0.0029
11/08 05:28:06 - Epoch(train)  [96/100][20/29]  lr: 1.9602e-04  eta: 0:5:34  time: 53.5034   loss: 0.0004
11/08 05:28:19 - Epoch(train)  [96/100][25/29]  lr: 1.7902e-04  eta: 0:5:16  time: 65.9890   loss: 0.0017
11/08 05:28:52 - Epoch(train)  [97/100][5/29]  lr: 1.4997e-04  eta: 0:11:11  time: 30.2533   loss: 0.0022
11/08 05:28:59 - Epoch(train)  [97/100][10/29]  lr: 1.3476e-04  eta: 0:6:39  time: 37.6455   loss: 0.0001
11/08 05:29:07 - Epoch(train)  [97/100][15/29]  lr: 1.2024e-04  eta: 0:5:6  time: 45.4734   loss: 0.0001
11/08 05:29:15 - Epoch(train)  [97/100][20/29]  lr: 1.0644e-04  eta: 0:4:14  time: 52.9645   loss: 0.0010
11/08 05:29:27 - Epoch(train)  [97/100][25/29]  lr: 9.3396e-05  eta: 0:3:57  time: 65.2330   loss: 0.0001
11/08 05:30:01 - Epoch(train)  [98/100][5/29]  lr: 7.1881e-05  eta: 0:8:21  time: 30.5586   loss: 0.0002
11/08 05:30:09 - Epoch(train)  [98/100][10/29]  lr: 6.1061e-05  eta: 0:4:58  time: 38.7086   loss: 0.0001
11/08 05:30:16 - Epoch(train)  [98/100][15/29]  lr: 5.1078e-05  eta: 0:3:39  time: 45.7579   loss: 0.0010
11/08 05:30:24 - Epoch(train)  [98/100][20/29]  lr: 4.1949e-05  eta: 0:3:0  time: 53.8604   loss: 0.0001
11/08 05:30:36 - Epoch(train)  [98/100][25/29]  lr: 3.3693e-05  eta: 0:2:43  time: 66.0064   loss: 0.0001
11/08 05:31:12 - Epoch(train)  [99/100][5/29]  lr: 2.1080e-05  eta: 0:5:39  time: 32.0061   loss: 0.0015
11/08 05:31:19 - Epoch(train)  [99/100][10/29]  lr: 1.5345e-05  eta: 0:3:8  time: 39.1852   loss: 0.0002
11/08 05:31:27 - Epoch(train)  [99/100][15/29]  lr: 1.0533e-05  eta: 0:2:13  time: 46.7127   loss: 0.0014
11/08 05:31:34 - Epoch(train)  [99/100][20/29]  lr: 6.6528e-06  eta: 0:1:42  time: 54.1903   loss: 0.0010
11/08 05:31:47 - Epoch(train)  [99/100][25/29]  lr: 3.7125e-06  eta: 0:1:28  time: 66.9761   loss: 0.0019
11/08 05:32:20 - Epoch(train)  [100/100][5/29]  lr: 8.0443e-07  eta: 0:2:21  time: 29.5267   loss: 0.0023
11/08 05:32:27 - Epoch(train)  [100/100][10/29]  lr: 9.9998e-04  eta: 0:1:10  time: 37.1697   loss: 0.0001
11/08 05:32:35 - Epoch(train)  [100/100][15/29]  lr: 9.9932e-04  eta: 0:0:41  time: 44.6291   loss: 0.0010
11/08 05:32:43 - Epoch(train)  [100/100][20/29]  lr: 9.9770e-04  eta: 0:0:23  time: 52.4483   loss: 0.0011
11/08 05:32:56 - Epoch(train)  [100/100][25/29]  lr: 9.9514e-04  eta: 0:0:10  time: 65.6579   loss: 0.0011

11/08 05:32:59 - Epoch(test) - all: [100/100]:
Threshold is drived from OTSU algorithm.
11/08 05:33:30 - Epoch(test) : [5/16]
11/08 05:33:38 - Epoch(test) : [10/16]
11/08 05:33:44 - Epoch(test) : [15/16]
Accuracy: 0.83、Precision: 0.52、Recall: 0.89、F1-score: 0.66、Average_Precision: 0.93

11/08 05:33:45 - Epoch(test) - inshore: [100/100]:
Threshold is drived from OTSU algorithm.
Accuracy: 0.91、Precision: 0.57、Recall: 0.80、F1-score: 0.67、Average_Precision: 0.82
11/08 05:34:01 - Last model saved :work_dirs/SuperPoint+Boost-B-attlay6_last_model_weight.pth

# 这里由于跑多个对比模型, 不同权重名称设置成一样的, 所以加载模型失败。不过影响不大, 海面场景综合模型表现基本上99%
# 通过日志打印发现,所有测试图片的性能:
# Best model achieved at epoch 35, with all test image AP 0.9392
# Accuracy: 0.92、Precision: 0.72、Recall: 0.91、F1-score: 0.81、Average_Precision: 0.94
# 近岸场景测试图片的性能:
# Accuracy: 0.93、Precision: 0.68、Recall: 0.84、F1-score: 0.75、Average_Precision: 0.82

